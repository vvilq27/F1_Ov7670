
ov7670.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007dd8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08007ee4  08007ee4  00017ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f94  08007f94  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08007f94  08007f94  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007f94  08007f94  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f94  08007f94  00017f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f98  08007f98  00017f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08007f9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003a44  2000017c  08008118  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003bc0  08008118  00023bc0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015adf  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003085  00000000  00000000  00035c84  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001048  00000000  00000000  00038d10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ed0  00000000  00000000  00039d58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a903  00000000  00000000  0003ac28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001009c  00000000  00000000  0005552b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e888  00000000  00000000  000655c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f3e4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004270  00000000  00000000  000f3ecc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	08007ecc 	.word	0x08007ecc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	08007ecc 	.word	0x08007ecc

0800014c <init>:
//		HAL_Delay(1);
//		HAL_I2C_Mem_Read(&hi2c1, (0x21<<1), OV7670_reg[i][0], 1, &data, 1, 100);
//	}
//}

void init(){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for(int i = 0; i < 31 ; i ++){
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e012      	b.n	800017e <init+0x32>
		WriteOV7670(OV7670_reg[i][0], OV7670_reg[i][1]);
 8000158:	4a0c      	ldr	r2, [pc, #48]	; (800018c <init+0x40>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000160:	4618      	mov	r0, r3
 8000162:	4a0a      	ldr	r2, [pc, #40]	; (800018c <init+0x40>)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	005b      	lsls	r3, r3, #1
 8000168:	4413      	add	r3, r2
 800016a:	785b      	ldrb	r3, [r3, #1]
 800016c:	4619      	mov	r1, r3
 800016e:	f000 fb7b 	bl	8000868 <WriteOV7670>
		HAL_Delay(1);
 8000172:	2001      	movs	r0, #1
 8000174:	f000 fd02 	bl	8000b7c <HAL_Delay>
	for(int i = 0; i < 31 ; i ++){
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	3301      	adds	r3, #1
 800017c:	607b      	str	r3, [r7, #4]
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	2b1e      	cmp	r3, #30
 8000182:	dde9      	ble.n	8000158 <init+0xc>
	}
}
 8000184:	bf00      	nop
 8000186:	3708      	adds	r7, #8
 8000188:	46bd      	mov	sp, r7
 800018a:	bd80      	pop	{r7, pc}
 800018c:	08007f44 	.word	0x08007f44

08000190 <DWT_Delay_Init>:

uint32_t DWT_Delay_Init(void) {
 8000190:	b480      	push	{r7}
 8000192:	af00      	add	r7, sp, #0
 /* Disable TRC */
 CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000194:	4b12      	ldr	r3, [pc, #72]	; (80001e0 <DWT_Delay_Init+0x50>)
 8000196:	68db      	ldr	r3, [r3, #12]
 8000198:	4a11      	ldr	r2, [pc, #68]	; (80001e0 <DWT_Delay_Init+0x50>)
 800019a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800019e:	60d3      	str	r3, [r2, #12]
 /* Enable TRC */
 CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80001a0:	4b0f      	ldr	r3, [pc, #60]	; (80001e0 <DWT_Delay_Init+0x50>)
 80001a2:	68db      	ldr	r3, [r3, #12]
 80001a4:	4a0e      	ldr	r2, [pc, #56]	; (80001e0 <DWT_Delay_Init+0x50>)
 80001a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80001aa:	60d3      	str	r3, [r2, #12]
 /* Disable clock cycle counter */
 DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80001ac:	4b0d      	ldr	r3, [pc, #52]	; (80001e4 <DWT_Delay_Init+0x54>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	4a0c      	ldr	r2, [pc, #48]	; (80001e4 <DWT_Delay_Init+0x54>)
 80001b2:	f023 0301 	bic.w	r3, r3, #1
 80001b6:	6013      	str	r3, [r2, #0]
 /* Enable clock cycle counter */
 DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80001b8:	4b0a      	ldr	r3, [pc, #40]	; (80001e4 <DWT_Delay_Init+0x54>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	4a09      	ldr	r2, [pc, #36]	; (80001e4 <DWT_Delay_Init+0x54>)
 80001be:	f043 0301 	orr.w	r3, r3, #1
 80001c2:	6013      	str	r3, [r2, #0]
 /* Reset the clock cycle counter value */
 DWT->CYCCNT = 0;
 80001c4:	4b07      	ldr	r3, [pc, #28]	; (80001e4 <DWT_Delay_Init+0x54>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	605a      	str	r2, [r3, #4]
/* 3 NO OPERATION instructions */

 /* Check if clock cycle counter has started */
if(DWT->CYCCNT)
 80001ca:	4b06      	ldr	r3, [pc, #24]	; (80001e4 <DWT_Delay_Init+0x54>)
 80001cc:	685b      	ldr	r3, [r3, #4]
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d001      	beq.n	80001d6 <DWT_Delay_Init+0x46>
{
 return 0; /*clock cycle counter started*/
 80001d2:	2300      	movs	r3, #0
 80001d4:	e000      	b.n	80001d8 <DWT_Delay_Init+0x48>
}
 return 1; /*clock cycle counter not started*/
 80001d6:	2301      	movs	r3, #1
}
 80001d8:	4618      	mov	r0, r3
 80001da:	46bd      	mov	sp, r7
 80001dc:	bc80      	pop	{r7}
 80001de:	4770      	bx	lr
 80001e0:	e000edf0 	.word	0xe000edf0
 80001e4:	e0001000 	.word	0xe0001000

080001e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ee:	f000 fc63 	bl	8000ab8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f2:	f000 f8e5 	bl	80003c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001f6:	f000 f9b1 	bl	800055c <MX_GPIO_Init>
//  MX_I2C1_Init();
  MX_TIM2_Init();
 80001fa:	f000 f93b 	bl	8000474 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80001fe:	f007 f991 	bl	8007524 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  DWT_Delay_Init();
 8000202:	f7ff ffc5 	bl	8000190 <DWT_Delay_Init>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000206:	2100      	movs	r1, #0
 8000208:	4864      	ldr	r0, [pc, #400]	; (800039c <main+0x1b4>)
 800020a:	f003 f85f 	bl	80032cc <HAL_TIM_PWM_Start>

  HAL_Delay(100);
 800020e:	2064      	movs	r0, #100	; 0x64
 8000210:	f000 fcb4 	bl	8000b7c <HAL_Delay>

  uint8_t datas = 0;
 8000214:	2300      	movs	r3, #0
 8000216:	70bb      	strb	r3, [r7, #2]

  //check sccb with switching to unput pin
  // check sccb with resistors on hardware i2c
  //check on arduino

  if(InitOV7670())
 8000218:	f000 fb48 	bl	80008ac <InitOV7670>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d010      	beq.n	8000244 <main+0x5c>
	  for(int i = 0 ; i < 3; i++){
 8000222:	2300      	movs	r3, #0
 8000224:	607b      	str	r3, [r7, #4]
 8000226:	e00a      	b.n	800023e <main+0x56>
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000228:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800022c:	485c      	ldr	r0, [pc, #368]	; (80003a0 <main+0x1b8>)
 800022e:	f000 ff5e 	bl	80010ee <HAL_GPIO_TogglePin>
		  HAL_Delay(100);
 8000232:	2064      	movs	r0, #100	; 0x64
 8000234:	f000 fca2 	bl	8000b7c <HAL_Delay>
	  for(int i = 0 ; i < 3; i++){
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	3301      	adds	r3, #1
 800023c:	607b      	str	r3, [r7, #4]
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	2b02      	cmp	r3, #2
 8000242:	ddf1      	ble.n	8000228 <main+0x40>
	  }

  init();
 8000244:	f7ff ff82 	bl	800014c <init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_RESET );
 8000248:	bf00      	nop
 800024a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800024e:	4855      	ldr	r0, [pc, #340]	; (80003a4 <main+0x1bc>)
 8000250:	f000 ff1e 	bl	8001090 <HAL_GPIO_ReadPin>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d0f7      	beq.n	800024a <main+0x62>
	  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_SET );
 800025a:	bf00      	nop
 800025c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000260:	4850      	ldr	r0, [pc, #320]	; (80003a4 <main+0x1bc>)
 8000262:	f000 ff15 	bl	8001090 <HAL_GPIO_ReadPin>
 8000266:	4603      	mov	r3, r0
 8000268:	2b01      	cmp	r3, #1
 800026a:	d0f7      	beq.n	800025c <main+0x74>

//	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

	  //todos
	  //add ic2 and regs to write clk prescaller on cam
	  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_RESET ){
 800026c:	e069      	b.n	8000342 <main+0x15a>

		 while( (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_SET ) ){
			 while( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 0 );
 800026e:	bf00      	nop
 8000270:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000274:	484b      	ldr	r0, [pc, #300]	; (80003a4 <main+0x1bc>)
 8000276:	f000 ff0b 	bl	8001090 <HAL_GPIO_ReadPin>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d0f7      	beq.n	8000270 <main+0x88>

			 while( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1 );
 8000280:	bf00      	nop
 8000282:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000286:	4847      	ldr	r0, [pc, #284]	; (80003a4 <main+0x1bc>)
 8000288:	f000 ff02 	bl	8001090 <HAL_GPIO_ReadPin>
 800028c:	4603      	mov	r3, r0
 800028e:	2b01      	cmp	r3, #1
 8000290:	d0f7      	beq.n	8000282 <main+0x9a>

			 while( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 0 );
 8000292:	bf00      	nop
 8000294:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000298:	4842      	ldr	r0, [pc, #264]	; (80003a4 <main+0x1bc>)
 800029a:	f000 fef9 	bl	8001090 <HAL_GPIO_ReadPin>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d0f7      	beq.n	8000294 <main+0xac>
  //			 tab[line][pxCnt++] = (GPIOC->IDR & 0xff);
			 data[pxCnt++] = (GPIOA->IDR & 0xff);
 80002a4:	4b40      	ldr	r3, [pc, #256]	; (80003a8 <main+0x1c0>)
 80002a6:	6899      	ldr	r1, [r3, #8]
 80002a8:	4b40      	ldr	r3, [pc, #256]	; (80003ac <main+0x1c4>)
 80002aa:	881b      	ldrh	r3, [r3, #0]
 80002ac:	b29b      	uxth	r3, r3
 80002ae:	1c5a      	adds	r2, r3, #1
 80002b0:	b290      	uxth	r0, r2
 80002b2:	4a3e      	ldr	r2, [pc, #248]	; (80003ac <main+0x1c4>)
 80002b4:	8010      	strh	r0, [r2, #0]
 80002b6:	461a      	mov	r2, r3
 80002b8:	b2c9      	uxtb	r1, r1
 80002ba:	4b3d      	ldr	r3, [pc, #244]	; (80003b0 <main+0x1c8>)
 80002bc:	5499      	strb	r1, [r3, r2]
//			 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
			 while( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1 );
 80002be:	bf00      	nop
 80002c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002c4:	4837      	ldr	r0, [pc, #220]	; (80003a4 <main+0x1bc>)
 80002c6:	f000 fee3 	bl	8001090 <HAL_GPIO_ReadPin>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b01      	cmp	r3, #1
 80002ce:	d0f7      	beq.n	80002c0 <main+0xd8>
		 while( (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_SET ) ){
 80002d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002d4:	4833      	ldr	r0, [pc, #204]	; (80003a4 <main+0x1bc>)
 80002d6:	f000 fedb 	bl	8001090 <HAL_GPIO_ReadPin>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b01      	cmp	r3, #1
 80002de:	d0c6      	beq.n	800026e <main+0x86>

		 //if pxcnt....

//		 data[PIXS-3] = 0;
//		 data[PIXS-2] = 0;
		 data[0] = line;
 80002e0:	4b34      	ldr	r3, [pc, #208]	; (80003b4 <main+0x1cc>)
 80002e2:	881b      	ldrh	r3, [r3, #0]
 80002e4:	b29b      	uxth	r3, r3
 80002e6:	b2da      	uxtb	r2, r3
 80002e8:	4b31      	ldr	r3, [pc, #196]	; (80003b0 <main+0x1c8>)
 80002ea:	701a      	strb	r2, [r3, #0]
		 data[PIXS] = "\n";
 80002ec:	4b32      	ldr	r3, [pc, #200]	; (80003b8 <main+0x1d0>)
 80002ee:	b2da      	uxtb	r2, r3
 80002f0:	4b2f      	ldr	r3, [pc, #188]	; (80003b0 <main+0x1c8>)
 80002f2:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

		 memcpy(pic[line], data, PIXS);
 80002f6:	4b2f      	ldr	r3, [pc, #188]	; (80003b4 <main+0x1cc>)
 80002f8:	881b      	ldrh	r3, [r3, #0]
 80002fa:	b29b      	uxth	r3, r3
 80002fc:	461a      	mov	r2, r3
 80002fe:	23c8      	movs	r3, #200	; 0xc8
 8000300:	fb03 f302 	mul.w	r3, r3, r2
 8000304:	4a2d      	ldr	r2, [pc, #180]	; (80003bc <main+0x1d4>)
 8000306:	4413      	add	r3, r2
 8000308:	4a29      	ldr	r2, [pc, #164]	; (80003b0 <main+0x1c8>)
 800030a:	4618      	mov	r0, r3
 800030c:	4611      	mov	r1, r2
 800030e:	23c8      	movs	r3, #200	; 0xc8
 8000310:	461a      	mov	r2, r3
 8000312:	f007 fdc7 	bl	8007ea4 <memcpy>

		 pxCnt = 0;
 8000316:	4b25      	ldr	r3, [pc, #148]	; (80003ac <main+0x1c4>)
 8000318:	2200      	movs	r2, #0
 800031a:	801a      	strh	r2, [r3, #0]
//	  		 if(line == 0){
//	  			 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_11);
//	  			 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_11);
//	  		 }

		 if(++line > ROWS-2){
 800031c:	4b25      	ldr	r3, [pc, #148]	; (80003b4 <main+0x1cc>)
 800031e:	881b      	ldrh	r3, [r3, #0]
 8000320:	b29b      	uxth	r3, r3
 8000322:	3301      	adds	r3, #1
 8000324:	b29b      	uxth	r3, r3
 8000326:	4a23      	ldr	r2, [pc, #140]	; (80003b4 <main+0x1cc>)
 8000328:	4619      	mov	r1, r3
 800032a:	8011      	strh	r1, [r2, #0]
 800032c:	2b30      	cmp	r3, #48	; 0x30
 800032e:	d811      	bhi.n	8000354 <main+0x16c>
			 break;
		 }

		 //HS low
		 while( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET);
 8000330:	bf00      	nop
 8000332:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000336:	481b      	ldr	r0, [pc, #108]	; (80003a4 <main+0x1bc>)
 8000338:	f000 feaa 	bl	8001090 <HAL_GPIO_ReadPin>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d0f7      	beq.n	8000332 <main+0x14a>
	  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_RESET ){
 8000342:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000346:	4817      	ldr	r0, [pc, #92]	; (80003a4 <main+0x1bc>)
 8000348:	f000 fea2 	bl	8001090 <HAL_GPIO_ReadPin>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d0be      	beq.n	80002d0 <main+0xe8>
 8000352:	e000      	b.n	8000356 <main+0x16e>
			 break;
 8000354:	bf00      	nop
//	  else
//		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);

	  }//end of VS

	  line = 0;
 8000356:	4b17      	ldr	r3, [pc, #92]	; (80003b4 <main+0x1cc>)
 8000358:	2200      	movs	r2, #0
 800035a:	801a      	strh	r2, [r3, #0]

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
 800035c:	2201      	movs	r2, #1
 800035e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000362:	4811      	ldr	r0, [pc, #68]	; (80003a8 <main+0x1c0>)
 8000364:	f000 feab 	bl	80010be <HAL_GPIO_WritePin>
	  for(uint8_t i = 0 ; i < ROWS-3; i++){
 8000368:	2300      	movs	r3, #0
 800036a:	70fb      	strb	r3, [r7, #3]
 800036c:	e00c      	b.n	8000388 <main+0x1a0>
		  CDC_Transmit_FS(pic[i], 200);
 800036e:	78fb      	ldrb	r3, [r7, #3]
 8000370:	22c8      	movs	r2, #200	; 0xc8
 8000372:	fb02 f303 	mul.w	r3, r2, r3
 8000376:	4a11      	ldr	r2, [pc, #68]	; (80003bc <main+0x1d4>)
 8000378:	4413      	add	r3, r2
 800037a:	21c8      	movs	r1, #200	; 0xc8
 800037c:	4618      	mov	r0, r3
 800037e:	f007 f98f 	bl	80076a0 <CDC_Transmit_FS>
	  for(uint8_t i = 0 ; i < ROWS-3; i++){
 8000382:	78fb      	ldrb	r3, [r7, #3]
 8000384:	3301      	adds	r3, #1
 8000386:	70fb      	strb	r3, [r7, #3]
 8000388:	78fb      	ldrb	r3, [r7, #3]
 800038a:	2b2e      	cmp	r3, #46	; 0x2e
 800038c:	d9ef      	bls.n	800036e <main+0x186>
	  }
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 800038e:	2200      	movs	r2, #0
 8000390:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000394:	4804      	ldr	r0, [pc, #16]	; (80003a8 <main+0x1c0>)
 8000396:	f000 fe92 	bl	80010be <HAL_GPIO_WritePin>
	  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_RESET );
 800039a:	e755      	b.n	8000248 <main+0x60>
 800039c:	20002bf4 	.word	0x20002bf4
 80003a0:	40011000 	.word	0x40011000
 80003a4:	40010c00 	.word	0x40010c00
 80003a8:	40010800 	.word	0x40010800
 80003ac:	20002ad0 	.word	0x20002ad0
 80003b0:	20002b2c 	.word	0x20002b2c
 80003b4:	20002b28 	.word	0x20002b28
 80003b8:	08007ee4 	.word	0x08007ee4
 80003bc:	200003c0 	.word	0x200003c0

080003c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b094      	sub	sp, #80	; 0x50
 80003c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003ca:	2228      	movs	r2, #40	; 0x28
 80003cc:	2100      	movs	r1, #0
 80003ce:	4618      	mov	r0, r3
 80003d0:	f007 fd73 	bl	8007eba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d4:	f107 0314 	add.w	r3, r7, #20
 80003d8:	2200      	movs	r2, #0
 80003da:	601a      	str	r2, [r3, #0]
 80003dc:	605a      	str	r2, [r3, #4]
 80003de:	609a      	str	r2, [r3, #8]
 80003e0:	60da      	str	r2, [r3, #12]
 80003e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003e4:	1d3b      	adds	r3, r7, #4
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	605a      	str	r2, [r3, #4]
 80003ec:	609a      	str	r2, [r3, #8]
 80003ee:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003f0:	2301      	movs	r3, #1
 80003f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003fa:	2300      	movs	r3, #0
 80003fc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003fe:	2301      	movs	r3, #1
 8000400:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000402:	2302      	movs	r3, #2
 8000404:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000406:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800040a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800040c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000410:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000412:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000416:	4618      	mov	r0, r3
 8000418:	f002 fa06 	bl	8002828 <HAL_RCC_OscConfig>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000422:	f000 f92d 	bl	8000680 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000426:	230f      	movs	r3, #15
 8000428:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800042a:	2302      	movs	r3, #2
 800042c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800042e:	2300      	movs	r3, #0
 8000430:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000432:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000436:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000438:	2300      	movs	r3, #0
 800043a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800043c:	f107 0314 	add.w	r3, r7, #20
 8000440:	2102      	movs	r1, #2
 8000442:	4618      	mov	r0, r3
 8000444:	f002 fc70 	bl	8002d28 <HAL_RCC_ClockConfig>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800044e:	f000 f917 	bl	8000680 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000452:	2310      	movs	r3, #16
 8000454:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000456:	2300      	movs	r3, #0
 8000458:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800045a:	1d3b      	adds	r3, r7, #4
 800045c:	4618      	mov	r0, r3
 800045e:	f002 fdd7 	bl	8003010 <HAL_RCCEx_PeriphCLKConfig>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000468:	f000 f90a 	bl	8000680 <Error_Handler>
  }
}
 800046c:	bf00      	nop
 800046e:	3750      	adds	r7, #80	; 0x50
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}

08000474 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b08e      	sub	sp, #56	; 0x38
 8000478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800047a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	605a      	str	r2, [r3, #4]
 8000484:	609a      	str	r2, [r3, #8]
 8000486:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000488:	f107 0320 	add.w	r3, r7, #32
 800048c:	2200      	movs	r2, #0
 800048e:	601a      	str	r2, [r3, #0]
 8000490:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	2200      	movs	r2, #0
 8000496:	601a      	str	r2, [r3, #0]
 8000498:	605a      	str	r2, [r3, #4]
 800049a:	609a      	str	r2, [r3, #8]
 800049c:	60da      	str	r2, [r3, #12]
 800049e:	611a      	str	r2, [r3, #16]
 80004a0:	615a      	str	r2, [r3, #20]
 80004a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004a4:	4b2c      	ldr	r3, [pc, #176]	; (8000558 <MX_TIM2_Init+0xe4>)
 80004a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6;
 80004ac:	4b2a      	ldr	r3, [pc, #168]	; (8000558 <MX_TIM2_Init+0xe4>)
 80004ae:	2206      	movs	r2, #6
 80004b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004b2:	4b29      	ldr	r3, [pc, #164]	; (8000558 <MX_TIM2_Init+0xe4>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 80004b8:	4b27      	ldr	r3, [pc, #156]	; (8000558 <MX_TIM2_Init+0xe4>)
 80004ba:	2201      	movs	r2, #1
 80004bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004be:	4b26      	ldr	r3, [pc, #152]	; (8000558 <MX_TIM2_Init+0xe4>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004c4:	4b24      	ldr	r3, [pc, #144]	; (8000558 <MX_TIM2_Init+0xe4>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004ca:	4823      	ldr	r0, [pc, #140]	; (8000558 <MX_TIM2_Init+0xe4>)
 80004cc:	f002 fe56 	bl	800317c <HAL_TIM_Base_Init>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80004d6:	f000 f8d3 	bl	8000680 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004de:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004e4:	4619      	mov	r1, r3
 80004e6:	481c      	ldr	r0, [pc, #112]	; (8000558 <MX_TIM2_Init+0xe4>)
 80004e8:	f003 f850 	bl	800358c <HAL_TIM_ConfigClockSource>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80004f2:	f000 f8c5 	bl	8000680 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80004f6:	4818      	ldr	r0, [pc, #96]	; (8000558 <MX_TIM2_Init+0xe4>)
 80004f8:	f002 fe8f 	bl	800321a <HAL_TIM_PWM_Init>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000502:	f000 f8bd 	bl	8000680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000506:	2300      	movs	r3, #0
 8000508:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800050a:	2300      	movs	r3, #0
 800050c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800050e:	f107 0320 	add.w	r3, r7, #32
 8000512:	4619      	mov	r1, r3
 8000514:	4810      	ldr	r0, [pc, #64]	; (8000558 <MX_TIM2_Init+0xe4>)
 8000516:	f003 fb95 	bl	8003c44 <HAL_TIMEx_MasterConfigSynchronization>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000520:	f000 f8ae 	bl	8000680 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000524:	2360      	movs	r3, #96	; 0x60
 8000526:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 8000528:	2301      	movs	r3, #1
 800052a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800052c:	2300      	movs	r3, #0
 800052e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000530:	2300      	movs	r3, #0
 8000532:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000534:	1d3b      	adds	r3, r7, #4
 8000536:	2200      	movs	r2, #0
 8000538:	4619      	mov	r1, r3
 800053a:	4807      	ldr	r0, [pc, #28]	; (8000558 <MX_TIM2_Init+0xe4>)
 800053c:	f002 ff68 	bl	8003410 <HAL_TIM_PWM_ConfigChannel>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000546:	f000 f89b 	bl	8000680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800054a:	4803      	ldr	r0, [pc, #12]	; (8000558 <MX_TIM2_Init+0xe4>)
 800054c:	f000 fa0e 	bl	800096c <HAL_TIM_MspPostInit>

}
 8000550:	bf00      	nop
 8000552:	3738      	adds	r7, #56	; 0x38
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20002bf4 	.word	0x20002bf4

0800055c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b088      	sub	sp, #32
 8000560:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000562:	f107 0310 	add.w	r3, r7, #16
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]
 800056e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000570:	4b3f      	ldr	r3, [pc, #252]	; (8000670 <MX_GPIO_Init+0x114>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	4a3e      	ldr	r2, [pc, #248]	; (8000670 <MX_GPIO_Init+0x114>)
 8000576:	f043 0310 	orr.w	r3, r3, #16
 800057a:	6193      	str	r3, [r2, #24]
 800057c:	4b3c      	ldr	r3, [pc, #240]	; (8000670 <MX_GPIO_Init+0x114>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	f003 0310 	and.w	r3, r3, #16
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000588:	4b39      	ldr	r3, [pc, #228]	; (8000670 <MX_GPIO_Init+0x114>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	4a38      	ldr	r2, [pc, #224]	; (8000670 <MX_GPIO_Init+0x114>)
 800058e:	f043 0320 	orr.w	r3, r3, #32
 8000592:	6193      	str	r3, [r2, #24]
 8000594:	4b36      	ldr	r3, [pc, #216]	; (8000670 <MX_GPIO_Init+0x114>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	f003 0320 	and.w	r3, r3, #32
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a0:	4b33      	ldr	r3, [pc, #204]	; (8000670 <MX_GPIO_Init+0x114>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	4a32      	ldr	r2, [pc, #200]	; (8000670 <MX_GPIO_Init+0x114>)
 80005a6:	f043 0304 	orr.w	r3, r3, #4
 80005aa:	6193      	str	r3, [r2, #24]
 80005ac:	4b30      	ldr	r3, [pc, #192]	; (8000670 <MX_GPIO_Init+0x114>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	f003 0304 	and.w	r3, r3, #4
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b8:	4b2d      	ldr	r3, [pc, #180]	; (8000670 <MX_GPIO_Init+0x114>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	4a2c      	ldr	r2, [pc, #176]	; (8000670 <MX_GPIO_Init+0x114>)
 80005be:	f043 0308 	orr.w	r3, r3, #8
 80005c2:	6193      	str	r3, [r2, #24]
 80005c4:	4b2a      	ldr	r3, [pc, #168]	; (8000670 <MX_GPIO_Init+0x114>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	f003 0308 	and.w	r3, r3, #8
 80005cc:	603b      	str	r3, [r7, #0]
 80005ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d6:	4827      	ldr	r0, [pc, #156]	; (8000674 <MX_GPIO_Init+0x118>)
 80005d8:	f000 fd71 	bl	80010be <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80005dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e2:	2301      	movs	r3, #1
 80005e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ea:	2303      	movs	r3, #3
 80005ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80005ee:	f107 0310 	add.w	r3, r7, #16
 80005f2:	4619      	mov	r1, r3
 80005f4:	481f      	ldr	r0, [pc, #124]	; (8000674 <MX_GPIO_Init+0x118>)
 80005f6:	f000 fbf1 	bl	8000ddc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000600:	2301      	movs	r3, #1
 8000602:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	2300      	movs	r3, #0
 8000606:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000608:	2303      	movs	r3, #3
 800060a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060c:	f107 0310 	add.w	r3, r7, #16
 8000610:	4619      	mov	r1, r3
 8000612:	4819      	ldr	r0, [pc, #100]	; (8000678 <MX_GPIO_Init+0x11c>)
 8000614:	f000 fbe2 	bl	8000ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_6;
 8000618:	23c0      	movs	r3, #192	; 0xc0
 800061a:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061c:	2301      	movs	r3, #1
 800061e:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000620:	2301      	movs	r3, #1
 8000622:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000624:	2303      	movs	r3, #3
 8000626:	61fb      	str	r3, [r7, #28]
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000628:	f107 0310 	add.w	r3, r7, #16
 800062c:	4619      	mov	r1, r3
 800062e:	4813      	ldr	r0, [pc, #76]	; (800067c <MX_GPIO_Init+0x120>)
 8000630:	f000 fbd4 	bl	8000ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000634:	23ff      	movs	r3, #255	; 0xff
 8000636:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800063c:	2302      	movs	r3, #2
 800063e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000640:	f107 0310 	add.w	r3, r7, #16
 8000644:	4619      	mov	r1, r3
 8000646:	480c      	ldr	r0, [pc, #48]	; (8000678 <MX_GPIO_Init+0x11c>)
 8000648:	f000 fbc8 	bl	8000ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800064c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000650:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000652:	2300      	movs	r3, #0
 8000654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000656:	2302      	movs	r3, #2
 8000658:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800065a:	f107 0310 	add.w	r3, r7, #16
 800065e:	4619      	mov	r1, r3
 8000660:	4806      	ldr	r0, [pc, #24]	; (800067c <MX_GPIO_Init+0x120>)
 8000662:	f000 fbbb 	bl	8000ddc <HAL_GPIO_Init>

}
 8000666:	bf00      	nop
 8000668:	3720      	adds	r7, #32
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40021000 	.word	0x40021000
 8000674:	40011000 	.word	0x40011000
 8000678:	40010800 	.word	0x40010800
 800067c:	40010c00 	.word	0x40010c00

08000680 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	bc80      	pop	{r7}
 800068a:	4770      	bx	lr

0800068c <delayUs>:

// B7 data ; B6 clk


__STATIC_INLINE void delayUs(volatile uint32_t microseconds)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 uint32_t clk_cycle_start = DWT->CYCCNT;
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <delayUs+0x3c>)
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	60fb      	str	r3, [r7, #12]
 /* Go to number of cycles for system */
 microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800069a:	f002 fc91 	bl	8002fc0 <HAL_RCC_GetHCLKFreq>
 800069e:	4602      	mov	r2, r0
 80006a0:	4b0a      	ldr	r3, [pc, #40]	; (80006cc <delayUs+0x40>)
 80006a2:	fba3 2302 	umull	r2, r3, r3, r2
 80006a6:	0c9b      	lsrs	r3, r3, #18
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	fb02 f303 	mul.w	r3, r2, r3
 80006ae:	607b      	str	r3, [r7, #4]
 /* Delay till end */
 while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80006b0:	bf00      	nop
 80006b2:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <delayUs+0x3c>)
 80006b4:	685a      	ldr	r2, [r3, #4]
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	1ad2      	subs	r2, r2, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	429a      	cmp	r2, r3
 80006be:	d3f8      	bcc.n	80006b2 <delayUs+0x26>
}
 80006c0:	bf00      	nop
 80006c2:	3710      	adds	r7, #16
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	e0001000 	.word	0xe0001000
 80006cc:	431bde83 	.word	0x431bde83

080006d0 <InitSCCB>:

void InitSCCB(void) //SCCB Initialization
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 80006d4:	2201      	movs	r2, #1
 80006d6:	2140      	movs	r1, #64	; 0x40
 80006d8:	4804      	ldr	r0, [pc, #16]	; (80006ec <InitSCCB+0x1c>)
 80006da:	f000 fcf0 	bl	80010be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, SET);
 80006de:	2201      	movs	r2, #1
 80006e0:	2180      	movs	r1, #128	; 0x80
 80006e2:	4802      	ldr	r0, [pc, #8]	; (80006ec <InitSCCB+0x1c>)
 80006e4:	f000 fceb 	bl	80010be <HAL_GPIO_WritePin>
}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40010c00 	.word	0x40010c00

080006f0 <StartSCCB>:

void StartSCCB(void) //SCCB Start
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, SET);
 80006f4:	2201      	movs	r2, #1
 80006f6:	2180      	movs	r1, #128	; 0x80
 80006f8:	480c      	ldr	r0, [pc, #48]	; (800072c <StartSCCB+0x3c>)
 80006fa:	f000 fce0 	bl	80010be <HAL_GPIO_WritePin>
//  delayUs(SIO_CLOCK_DELAY);

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 80006fe:	2201      	movs	r2, #1
 8000700:	2140      	movs	r1, #64	; 0x40
 8000702:	480a      	ldr	r0, [pc, #40]	; (800072c <StartSCCB+0x3c>)
 8000704:	f000 fcdb 	bl	80010be <HAL_GPIO_WritePin>
  delayUs(SIO_CLOCK_DELAY);
 8000708:	2002      	movs	r0, #2
 800070a:	f7ff ffbf 	bl	800068c <delayUs>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	2180      	movs	r1, #128	; 0x80
 8000712:	4806      	ldr	r0, [pc, #24]	; (800072c <StartSCCB+0x3c>)
 8000714:	f000 fcd3 	bl	80010be <HAL_GPIO_WritePin>
//  delayUs(SIO_CLOCK_DELAY);

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 8000718:	2200      	movs	r2, #0
 800071a:	2140      	movs	r1, #64	; 0x40
 800071c:	4803      	ldr	r0, [pc, #12]	; (800072c <StartSCCB+0x3c>)
 800071e:	f000 fcce 	bl	80010be <HAL_GPIO_WritePin>
  delayUs(SIO_CLOCK_DELAY);
 8000722:	2002      	movs	r0, #2
 8000724:	f7ff ffb2 	bl	800068c <delayUs>
}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40010c00 	.word	0x40010c00

08000730 <StopSCCB>:

void StopSCCB(void) //SCCB Stop
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  //Serial.println("StopSCCB");

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	2180      	movs	r1, #128	; 0x80
 8000738:	480a      	ldr	r0, [pc, #40]	; (8000764 <StopSCCB+0x34>)
 800073a:	f000 fcc0 	bl	80010be <HAL_GPIO_WritePin>
//  delayUs(SIO_CLOCK_DELAY);

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 800073e:	2201      	movs	r2, #1
 8000740:	2140      	movs	r1, #64	; 0x40
 8000742:	4808      	ldr	r0, [pc, #32]	; (8000764 <StopSCCB+0x34>)
 8000744:	f000 fcbb 	bl	80010be <HAL_GPIO_WritePin>
  delayUs(SIO_CLOCK_DELAY);
 8000748:	2002      	movs	r0, #2
 800074a:	f7ff ff9f 	bl	800068c <delayUs>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, SET);
 800074e:	2201      	movs	r2, #1
 8000750:	2180      	movs	r1, #128	; 0x80
 8000752:	4804      	ldr	r0, [pc, #16]	; (8000764 <StopSCCB+0x34>)
 8000754:	f000 fcb3 	bl	80010be <HAL_GPIO_WritePin>
  delayUs(SIO_CLOCK_DELAY);
 8000758:	2002      	movs	r0, #2
 800075a:	f7ff ff97 	bl	800068c <delayUs>
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40010c00 	.word	0x40010c00

08000768 <SCCBWrite>:

uint8_t SCCBWrite(uint8_t m_data)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
  unsigned char j;
  uint8_t success;

  for ( j = 0; j < 8; j++ ) //Loop transmit data 8 times
 8000772:	2300      	movs	r3, #0
 8000774:	77fb      	strb	r3, [r7, #31]
 8000776:	e025      	b.n	80007c4 <SCCBWrite+0x5c>
  {

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 8000778:	2200      	movs	r2, #0
 800077a:	2140      	movs	r1, #64	; 0x40
 800077c:	4839      	ldr	r0, [pc, #228]	; (8000864 <SCCBWrite+0xfc>)
 800077e:	f000 fc9e 	bl	80010be <HAL_GPIO_WritePin>

	if( (m_data<<j) & 0x80 )
 8000782:	79fa      	ldrb	r2, [r7, #7]
 8000784:	7ffb      	ldrb	r3, [r7, #31]
 8000786:	fa02 f303 	lsl.w	r3, r2, r3
 800078a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078e:	2b00      	cmp	r3, #0
 8000790:	d005      	beq.n	800079e <SCCBWrite+0x36>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, SET);
 8000792:	2201      	movs	r2, #1
 8000794:	2180      	movs	r1, #128	; 0x80
 8000796:	4833      	ldr	r0, [pc, #204]	; (8000864 <SCCBWrite+0xfc>)
 8000798:	f000 fc91 	bl	80010be <HAL_GPIO_WritePin>
 800079c:	e004      	b.n	80007a8 <SCCBWrite+0x40>
	else
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	2180      	movs	r1, #128	; 0x80
 80007a2:	4830      	ldr	r0, [pc, #192]	; (8000864 <SCCBWrite+0xfc>)
 80007a4:	f000 fc8b 	bl	80010be <HAL_GPIO_WritePin>

    delayUs(SIO_CLOCK_DELAY);
 80007a8:	2002      	movs	r0, #2
 80007aa:	f7ff ff6f 	bl	800068c <delayUs>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 80007ae:	2201      	movs	r2, #1
 80007b0:	2140      	movs	r1, #64	; 0x40
 80007b2:	482c      	ldr	r0, [pc, #176]	; (8000864 <SCCBWrite+0xfc>)
 80007b4:	f000 fc83 	bl	80010be <HAL_GPIO_WritePin>
    delayUs(SIO_CLOCK_DELAY);
 80007b8:	2002      	movs	r0, #2
 80007ba:	f7ff ff67 	bl	800068c <delayUs>
  for ( j = 0; j < 8; j++ ) //Loop transmit data 8 times
 80007be:	7ffb      	ldrb	r3, [r7, #31]
 80007c0:	3301      	adds	r3, #1
 80007c2:	77fb      	strb	r3, [r7, #31]
 80007c4:	7ffb      	ldrb	r3, [r7, #31]
 80007c6:	2b07      	cmp	r3, #7
 80007c8:	d9d6      	bls.n	8000778 <SCCBWrite+0x10>
  }

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2140      	movs	r1, #64	; 0x40
 80007ce:	4825      	ldr	r0, [pc, #148]	; (8000864 <SCCBWrite+0xfc>)
 80007d0:	f000 fc75 	bl	80010be <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2180      	movs	r1, #128	; 0x80
 80007d8:	4822      	ldr	r0, [pc, #136]	; (8000864 <SCCBWrite+0xfc>)
 80007da:	f000 fc70 	bl	80010be <HAL_GPIO_WritePin>

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007de:	f107 030c 	add.w	r3, r7, #12
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]

  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007ec:	2380      	movs	r3, #128	; 0x80
 80007ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f0:	2300      	movs	r3, #0
 80007f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007f4:	2301      	movs	r3, #1
 80007f6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f8:	f107 030c 	add.w	r3, r7, #12
 80007fc:	4619      	mov	r1, r3
 80007fe:	4819      	ldr	r0, [pc, #100]	; (8000864 <SCCBWrite+0xfc>)
 8000800:	f000 faec 	bl	8000ddc <HAL_GPIO_Init>

  delayUs(SIO_CLOCK_DELAY);
 8000804:	2002      	movs	r0, #2
 8000806:	f7ff ff41 	bl	800068c <delayUs>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 800080a:	2201      	movs	r2, #1
 800080c:	2140      	movs	r1, #64	; 0x40
 800080e:	4815      	ldr	r0, [pc, #84]	; (8000864 <SCCBWrite+0xfc>)
 8000810:	f000 fc55 	bl	80010be <HAL_GPIO_WritePin>
  delayUs(SIO_CLOCK_DELAY);
 8000814:	2002      	movs	r0, #2
 8000816:	f7ff ff39 	bl	800068c <delayUs>

  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))
 800081a:	2180      	movs	r1, #128	; 0x80
 800081c:	4811      	ldr	r0, [pc, #68]	; (8000864 <SCCBWrite+0xfc>)
 800081e:	f000 fc37 	bl	8001090 <HAL_GPIO_ReadPin>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d002      	beq.n	800082e <SCCBWrite+0xc6>
    success= 1;
 8000828:	2301      	movs	r3, #1
 800082a:	77bb      	strb	r3, [r7, #30]
 800082c:	e001      	b.n	8000832 <SCCBWrite+0xca>
  else
    success= 0;
 800082e:	2300      	movs	r3, #0
 8000830:	77bb      	strb	r3, [r7, #30]

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	2140      	movs	r1, #64	; 0x40
 8000836:	480b      	ldr	r0, [pc, #44]	; (8000864 <SCCBWrite+0xfc>)
 8000838:	f000 fc41 	bl	80010be <HAL_GPIO_WritePin>
//  delayUs(SIO_CLOCK_DELAY);

  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800083c:	2380      	movs	r3, #128	; 0x80
 800083e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000840:	2301      	movs	r3, #1
 8000842:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000848:	2303      	movs	r3, #3
 800084a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800084c:	f107 030c 	add.w	r3, r7, #12
 8000850:	4619      	mov	r1, r3
 8000852:	4804      	ldr	r0, [pc, #16]	; (8000864 <SCCBWrite+0xfc>)
 8000854:	f000 fac2 	bl	8000ddc <HAL_GPIO_Init>

  return success;
 8000858:	7fbb      	ldrb	r3, [r7, #30]
}
 800085a:	4618      	mov	r0, r3
 800085c:	3720      	adds	r7, #32
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40010c00 	.word	0x40010c00

08000868 <WriteOV7670>:

  return success;
}

uint8_t WriteOV7670(char regID, char regDat)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	460a      	mov	r2, r1
 8000872:	71fb      	strb	r3, [r7, #7]
 8000874:	4613      	mov	r3, r2
 8000876:	71bb      	strb	r3, [r7, #6]
	StartSCCB();
 8000878:	f7ff ff3a 	bl	80006f0 <StartSCCB>
	SCCBWrite(0x42);
 800087c:	2042      	movs	r0, #66	; 0x42
 800087e:	f7ff ff73 	bl	8000768 <SCCBWrite>
//	{
//  		StopSCCB();
//		return 0;
//	}

	delayUs(SIO_CLOCK_DELAY);
 8000882:	2002      	movs	r0, #2
 8000884:	f7ff ff02 	bl	800068c <delayUs>

	SCCBWrite(regID);
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff ff6c 	bl	8000768 <SCCBWrite>
//  	if( ! SCCBWrite(regID) )
//	{
//		StopSCCB();
//		return 0;
//	}
	delayUs(SIO_CLOCK_DELAY);
 8000890:	2002      	movs	r0, #2
 8000892:	f7ff fefb 	bl	800068c <delayUs>
	SCCBWrite(regDat);
 8000896:	79bb      	ldrb	r3, [r7, #6]
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff ff65 	bl	8000768 <SCCBWrite>
//	{
//		StopSCCB();
//		return 0;
//	}

  	StopSCCB();
 800089e:	f7ff ff47 	bl	8000730 <StopSCCB>

  	return 1;
 80008a2:	2301      	movs	r3, #1
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <InitOV7670>:
  	return 1;
}


uint8_t InitOV7670()
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
  char temp = 0x80;
 80008b2:	2380      	movs	r3, #128	; 0x80
 80008b4:	71fb      	strb	r3, [r7, #7]

  InitSCCB();
 80008b6:	f7ff ff0b 	bl	80006d0 <InitSCCB>

  WriteOV7670(0x12, temp);
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	4619      	mov	r1, r3
 80008be:	2012      	movs	r0, #18
 80008c0:	f7ff ffd2 	bl	8000868 <WriteOV7670>
//  ReadOV7670(0x11);
//  HAL_Delay(2);
//
//  ReadOV7670(0x16);

  return 1;
 80008c4:	2301      	movs	r3, #1
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <HAL_MspInit+0x5c>)
 80008d8:	699b      	ldr	r3, [r3, #24]
 80008da:	4a14      	ldr	r2, [pc, #80]	; (800092c <HAL_MspInit+0x5c>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6193      	str	r3, [r2, #24]
 80008e2:	4b12      	ldr	r3, [pc, #72]	; (800092c <HAL_MspInit+0x5c>)
 80008e4:	699b      	ldr	r3, [r3, #24]
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ee:	4b0f      	ldr	r3, [pc, #60]	; (800092c <HAL_MspInit+0x5c>)
 80008f0:	69db      	ldr	r3, [r3, #28]
 80008f2:	4a0e      	ldr	r2, [pc, #56]	; (800092c <HAL_MspInit+0x5c>)
 80008f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f8:	61d3      	str	r3, [r2, #28]
 80008fa:	4b0c      	ldr	r3, [pc, #48]	; (800092c <HAL_MspInit+0x5c>)
 80008fc:	69db      	ldr	r3, [r3, #28]
 80008fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000906:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <HAL_MspInit+0x60>)
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	4a04      	ldr	r2, [pc, #16]	; (8000930 <HAL_MspInit+0x60>)
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000922:	bf00      	nop
 8000924:	3714      	adds	r7, #20
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr
 800092c:	40021000 	.word	0x40021000
 8000930:	40010000 	.word	0x40010000

08000934 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000934:	b480      	push	{r7}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000944:	d10b      	bne.n	800095e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <HAL_TIM_Base_MspInit+0x34>)
 8000948:	69db      	ldr	r3, [r3, #28]
 800094a:	4a07      	ldr	r2, [pc, #28]	; (8000968 <HAL_TIM_Base_MspInit+0x34>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	61d3      	str	r3, [r2, #28]
 8000952:	4b05      	ldr	r3, [pc, #20]	; (8000968 <HAL_TIM_Base_MspInit+0x34>)
 8000954:	69db      	ldr	r3, [r3, #28]
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800095e:	bf00      	nop
 8000960:	3714      	adds	r7, #20
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr
 8000968:	40021000 	.word	0x40021000

0800096c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b088      	sub	sp, #32
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	f107 030c 	add.w	r3, r7, #12
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800098a:	d12a      	bne.n	80009e2 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098c:	4b17      	ldr	r3, [pc, #92]	; (80009ec <HAL_TIM_MspPostInit+0x80>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	4a16      	ldr	r2, [pc, #88]	; (80009ec <HAL_TIM_MspPostInit+0x80>)
 8000992:	f043 0304 	orr.w	r3, r3, #4
 8000996:	6193      	str	r3, [r2, #24]
 8000998:	4b14      	ldr	r3, [pc, #80]	; (80009ec <HAL_TIM_MspPostInit+0x80>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	f003 0304 	and.w	r3, r3, #4
 80009a0:	60bb      	str	r3, [r7, #8]
 80009a2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80009a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009a8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009aa:	2302      	movs	r3, #2
 80009ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2302      	movs	r3, #2
 80009b0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b2:	f107 030c 	add.w	r3, r7, #12
 80009b6:	4619      	mov	r1, r3
 80009b8:	480d      	ldr	r0, [pc, #52]	; (80009f0 <HAL_TIM_MspPostInit+0x84>)
 80009ba:	f000 fa0f 	bl	8000ddc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80009be:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <HAL_TIM_MspPostInit+0x88>)
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	61fb      	str	r3, [r7, #28]
 80009c4:	69fb      	ldr	r3, [r7, #28]
 80009c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80009ca:	61fb      	str	r3, [r7, #28]
 80009cc:	69fb      	ldr	r3, [r7, #28]
 80009ce:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80009d2:	61fb      	str	r3, [r7, #28]
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009da:	61fb      	str	r3, [r7, #28]
 80009dc:	4a05      	ldr	r2, [pc, #20]	; (80009f4 <HAL_TIM_MspPostInit+0x88>)
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80009e2:	bf00      	nop
 80009e4:	3720      	adds	r7, #32
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40021000 	.word	0x40021000
 80009f0:	40010800 	.word	0x40010800
 80009f4:	40010000 	.word	0x40010000

080009f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr

08000a04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <HardFault_Handler+0x4>

08000a0a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a0e:	e7fe      	b.n	8000a0e <MemManage_Handler+0x4>

08000a10 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <BusFault_Handler+0x4>

08000a16 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a1a:	e7fe      	b.n	8000a1a <UsageFault_Handler+0x4>

08000a1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr

08000a28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr

08000a34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr

08000a40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a44:	f000 f87e 	bl	8000b44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a50:	4802      	ldr	r0, [pc, #8]	; (8000a5c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000a52:	f000 fc96 	bl	8001382 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200038d4 	.word	0x200038d4

08000a60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr

08000a6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000a6c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000a6e:	e003      	b.n	8000a78 <LoopCopyDataInit>

08000a70 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000a70:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000a72:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000a74:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000a76:	3104      	adds	r1, #4

08000a78 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000a78:	480a      	ldr	r0, [pc, #40]	; (8000aa4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000a7c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000a7e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000a80:	d3f6      	bcc.n	8000a70 <CopyDataInit>
  ldr r2, =_sbss
 8000a82:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000a84:	e002      	b.n	8000a8c <LoopFillZerobss>

08000a86 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000a88:	f842 3b04 	str.w	r3, [r2], #4

08000a8c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000a8e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000a90:	d3f9      	bcc.n	8000a86 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a92:	f7ff ffe5 	bl	8000a60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a96:	f007 f9e1 	bl	8007e5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a9a:	f7ff fba5 	bl	80001e8 <main>
  bx lr
 8000a9e:	4770      	bx	lr
  ldr r3, =_sidata
 8000aa0:	08007f9c 	.word	0x08007f9c
  ldr r0, =_sdata
 8000aa4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000aa8:	2000017c 	.word	0x2000017c
  ldr r2, =_sbss
 8000aac:	2000017c 	.word	0x2000017c
  ldr r3, = _ebss
 8000ab0:	20003bc0 	.word	0x20003bc0

08000ab4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ab4:	e7fe      	b.n	8000ab4 <ADC1_2_IRQHandler>
	...

08000ab8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000abc:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <HAL_Init+0x28>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a07      	ldr	r2, [pc, #28]	; (8000ae0 <HAL_Init+0x28>)
 8000ac2:	f043 0310 	orr.w	r3, r3, #16
 8000ac6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac8:	2003      	movs	r0, #3
 8000aca:	f000 f945 	bl	8000d58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ace:	2000      	movs	r0, #0
 8000ad0:	f000 f808 	bl	8000ae4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad4:	f7ff fefc 	bl	80008d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40022000 	.word	0x40022000

08000ae4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <HAL_InitTick+0x54>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <HAL_InitTick+0x58>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	4619      	mov	r1, r3
 8000af6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000afa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 f95d 	bl	8000dc2 <HAL_SYSTICK_Config>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e00e      	b.n	8000b30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2b0f      	cmp	r3, #15
 8000b16:	d80a      	bhi.n	8000b2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	6879      	ldr	r1, [r7, #4]
 8000b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b20:	f000 f925 	bl	8000d6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b24:	4a06      	ldr	r2, [pc, #24]	; (8000b40 <HAL_InitTick+0x5c>)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e000      	b.n	8000b30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000000 	.word	0x20000000
 8000b3c:	20000008 	.word	0x20000008
 8000b40:	20000004 	.word	0x20000004

08000b44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b48:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <HAL_IncTick+0x1c>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <HAL_IncTick+0x20>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4413      	add	r3, r2
 8000b54:	4a03      	ldr	r2, [pc, #12]	; (8000b64 <HAL_IncTick+0x20>)
 8000b56:	6013      	str	r3, [r2, #0]
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr
 8000b60:	20000008 	.word	0x20000008
 8000b64:	20002c3c 	.word	0x20002c3c

08000b68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b6c:	4b02      	ldr	r3, [pc, #8]	; (8000b78 <HAL_GetTick+0x10>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr
 8000b78:	20002c3c 	.word	0x20002c3c

08000b7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b84:	f7ff fff0 	bl	8000b68 <HAL_GetTick>
 8000b88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b94:	d005      	beq.n	8000ba2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b96:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <HAL_Delay+0x40>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ba2:	bf00      	nop
 8000ba4:	f7ff ffe0 	bl	8000b68 <HAL_GetTick>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	68fa      	ldr	r2, [r7, #12]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d8f7      	bhi.n	8000ba4 <HAL_Delay+0x28>
  {
  }
}
 8000bb4:	bf00      	nop
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000008 	.word	0x20000008

08000bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	f003 0307 	and.w	r3, r3, #7
 8000bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bd6:	68ba      	ldr	r2, [r7, #8]
 8000bd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bdc:	4013      	ands	r3, r2
 8000bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bf2:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	60d3      	str	r3, [r2, #12]
}
 8000bf8:	bf00      	nop
 8000bfa:	3714      	adds	r7, #20
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c0c:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <__NVIC_GetPriorityGrouping+0x18>)
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	0a1b      	lsrs	r3, r3, #8
 8000c12:	f003 0307 	and.w	r3, r3, #7
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	db0b      	blt.n	8000c4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	f003 021f 	and.w	r2, r3, #31
 8000c3c:	4906      	ldr	r1, [pc, #24]	; (8000c58 <__NVIC_EnableIRQ+0x34>)
 8000c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c42:	095b      	lsrs	r3, r3, #5
 8000c44:	2001      	movs	r0, #1
 8000c46:	fa00 f202 	lsl.w	r2, r0, r2
 8000c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c4e:	bf00      	nop
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc80      	pop	{r7}
 8000c56:	4770      	bx	lr
 8000c58:	e000e100 	.word	0xe000e100

08000c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	6039      	str	r1, [r7, #0]
 8000c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	db0a      	blt.n	8000c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	490c      	ldr	r1, [pc, #48]	; (8000ca8 <__NVIC_SetPriority+0x4c>)
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	0112      	lsls	r2, r2, #4
 8000c7c:	b2d2      	uxtb	r2, r2
 8000c7e:	440b      	add	r3, r1
 8000c80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c84:	e00a      	b.n	8000c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	4908      	ldr	r1, [pc, #32]	; (8000cac <__NVIC_SetPriority+0x50>)
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	f003 030f 	and.w	r3, r3, #15
 8000c92:	3b04      	subs	r3, #4
 8000c94:	0112      	lsls	r2, r2, #4
 8000c96:	b2d2      	uxtb	r2, r2
 8000c98:	440b      	add	r3, r1
 8000c9a:	761a      	strb	r2, [r3, #24]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bc80      	pop	{r7}
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000e100 	.word	0xe000e100
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b089      	sub	sp, #36	; 0x24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	f1c3 0307 	rsb	r3, r3, #7
 8000cca:	2b04      	cmp	r3, #4
 8000ccc:	bf28      	it	cs
 8000cce:	2304      	movcs	r3, #4
 8000cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3304      	adds	r3, #4
 8000cd6:	2b06      	cmp	r3, #6
 8000cd8:	d902      	bls.n	8000ce0 <NVIC_EncodePriority+0x30>
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	3b03      	subs	r3, #3
 8000cde:	e000      	b.n	8000ce2 <NVIC_EncodePriority+0x32>
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	43da      	mvns	r2, r3
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	401a      	ands	r2, r3
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000d02:	43d9      	mvns	r1, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d08:	4313      	orrs	r3, r2
         );
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3724      	adds	r7, #36	; 0x24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr

08000d14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d24:	d301      	bcc.n	8000d2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d26:	2301      	movs	r3, #1
 8000d28:	e00f      	b.n	8000d4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <SysTick_Config+0x40>)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d32:	210f      	movs	r1, #15
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295
 8000d38:	f7ff ff90 	bl	8000c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d3c:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <SysTick_Config+0x40>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d42:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <SysTick_Config+0x40>)
 8000d44:	2207      	movs	r2, #7
 8000d46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	e000e010 	.word	0xe000e010

08000d58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f7ff ff2d 	bl	8000bc0 <__NVIC_SetPriorityGrouping>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b086      	sub	sp, #24
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	4603      	mov	r3, r0
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
 8000d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d80:	f7ff ff42 	bl	8000c08 <__NVIC_GetPriorityGrouping>
 8000d84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	68b9      	ldr	r1, [r7, #8]
 8000d8a:	6978      	ldr	r0, [r7, #20]
 8000d8c:	f7ff ff90 	bl	8000cb0 <NVIC_EncodePriority>
 8000d90:	4602      	mov	r2, r0
 8000d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d96:	4611      	mov	r1, r2
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff5f 	bl	8000c5c <__NVIC_SetPriority>
}
 8000d9e:	bf00      	nop
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	4603      	mov	r3, r0
 8000dae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ff35 	bl	8000c24 <__NVIC_EnableIRQ>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f7ff ffa2 	bl	8000d14 <SysTick_Config>
 8000dd0:	4603      	mov	r3, r0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b08b      	sub	sp, #44	; 0x2c
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000de6:	2300      	movs	r3, #0
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000dea:	2300      	movs	r3, #0
 8000dec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dee:	e127      	b.n	8001040 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000df0:	2201      	movs	r2, #1
 8000df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	69fa      	ldr	r2, [r7, #28]
 8000e00:	4013      	ands	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	f040 8116 	bne.w	800103a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	2b12      	cmp	r3, #18
 8000e14:	d034      	beq.n	8000e80 <HAL_GPIO_Init+0xa4>
 8000e16:	2b12      	cmp	r3, #18
 8000e18:	d80d      	bhi.n	8000e36 <HAL_GPIO_Init+0x5a>
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d02b      	beq.n	8000e76 <HAL_GPIO_Init+0x9a>
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d804      	bhi.n	8000e2c <HAL_GPIO_Init+0x50>
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d031      	beq.n	8000e8a <HAL_GPIO_Init+0xae>
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d01c      	beq.n	8000e64 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e2a:	e048      	b.n	8000ebe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e2c:	2b03      	cmp	r3, #3
 8000e2e:	d043      	beq.n	8000eb8 <HAL_GPIO_Init+0xdc>
 8000e30:	2b11      	cmp	r3, #17
 8000e32:	d01b      	beq.n	8000e6c <HAL_GPIO_Init+0x90>
          break;
 8000e34:	e043      	b.n	8000ebe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e36:	4a89      	ldr	r2, [pc, #548]	; (800105c <HAL_GPIO_Init+0x280>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d026      	beq.n	8000e8a <HAL_GPIO_Init+0xae>
 8000e3c:	4a87      	ldr	r2, [pc, #540]	; (800105c <HAL_GPIO_Init+0x280>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d806      	bhi.n	8000e50 <HAL_GPIO_Init+0x74>
 8000e42:	4a87      	ldr	r2, [pc, #540]	; (8001060 <HAL_GPIO_Init+0x284>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d020      	beq.n	8000e8a <HAL_GPIO_Init+0xae>
 8000e48:	4a86      	ldr	r2, [pc, #536]	; (8001064 <HAL_GPIO_Init+0x288>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d01d      	beq.n	8000e8a <HAL_GPIO_Init+0xae>
          break;
 8000e4e:	e036      	b.n	8000ebe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e50:	4a85      	ldr	r2, [pc, #532]	; (8001068 <HAL_GPIO_Init+0x28c>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d019      	beq.n	8000e8a <HAL_GPIO_Init+0xae>
 8000e56:	4a85      	ldr	r2, [pc, #532]	; (800106c <HAL_GPIO_Init+0x290>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d016      	beq.n	8000e8a <HAL_GPIO_Init+0xae>
 8000e5c:	4a84      	ldr	r2, [pc, #528]	; (8001070 <HAL_GPIO_Init+0x294>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d013      	beq.n	8000e8a <HAL_GPIO_Init+0xae>
          break;
 8000e62:	e02c      	b.n	8000ebe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	623b      	str	r3, [r7, #32]
          break;
 8000e6a:	e028      	b.n	8000ebe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	3304      	adds	r3, #4
 8000e72:	623b      	str	r3, [r7, #32]
          break;
 8000e74:	e023      	b.n	8000ebe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	68db      	ldr	r3, [r3, #12]
 8000e7a:	3308      	adds	r3, #8
 8000e7c:	623b      	str	r3, [r7, #32]
          break;
 8000e7e:	e01e      	b.n	8000ebe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	330c      	adds	r3, #12
 8000e86:	623b      	str	r3, [r7, #32]
          break;
 8000e88:	e019      	b.n	8000ebe <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d102      	bne.n	8000e98 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e92:	2304      	movs	r3, #4
 8000e94:	623b      	str	r3, [r7, #32]
          break;
 8000e96:	e012      	b.n	8000ebe <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d105      	bne.n	8000eac <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ea0:	2308      	movs	r3, #8
 8000ea2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	69fa      	ldr	r2, [r7, #28]
 8000ea8:	611a      	str	r2, [r3, #16]
          break;
 8000eaa:	e008      	b.n	8000ebe <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000eac:	2308      	movs	r3, #8
 8000eae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	69fa      	ldr	r2, [r7, #28]
 8000eb4:	615a      	str	r2, [r3, #20]
          break;
 8000eb6:	e002      	b.n	8000ebe <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	623b      	str	r3, [r7, #32]
          break;
 8000ebc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	2bff      	cmp	r3, #255	; 0xff
 8000ec2:	d801      	bhi.n	8000ec8 <HAL_GPIO_Init+0xec>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	e001      	b.n	8000ecc <HAL_GPIO_Init+0xf0>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3304      	adds	r3, #4
 8000ecc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	2bff      	cmp	r3, #255	; 0xff
 8000ed2:	d802      	bhi.n	8000eda <HAL_GPIO_Init+0xfe>
 8000ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	e002      	b.n	8000ee0 <HAL_GPIO_Init+0x104>
 8000eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000edc:	3b08      	subs	r3, #8
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	210f      	movs	r1, #15
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	fa01 f303 	lsl.w	r3, r1, r3
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	401a      	ands	r2, r3
 8000ef2:	6a39      	ldr	r1, [r7, #32]
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8000efa:	431a      	orrs	r2, r3
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	f000 8096 	beq.w	800103a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f0e:	4b59      	ldr	r3, [pc, #356]	; (8001074 <HAL_GPIO_Init+0x298>)
 8000f10:	699b      	ldr	r3, [r3, #24]
 8000f12:	4a58      	ldr	r2, [pc, #352]	; (8001074 <HAL_GPIO_Init+0x298>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	6193      	str	r3, [r2, #24]
 8000f1a:	4b56      	ldr	r3, [pc, #344]	; (8001074 <HAL_GPIO_Init+0x298>)
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f26:	4a54      	ldr	r2, [pc, #336]	; (8001078 <HAL_GPIO_Init+0x29c>)
 8000f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2a:	089b      	lsrs	r3, r3, #2
 8000f2c:	3302      	adds	r3, #2
 8000f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f32:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f36:	f003 0303 	and.w	r3, r3, #3
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	220f      	movs	r2, #15
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43db      	mvns	r3, r3
 8000f44:	68fa      	ldr	r2, [r7, #12]
 8000f46:	4013      	ands	r3, r2
 8000f48:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a4b      	ldr	r2, [pc, #300]	; (800107c <HAL_GPIO_Init+0x2a0>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d013      	beq.n	8000f7a <HAL_GPIO_Init+0x19e>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a4a      	ldr	r2, [pc, #296]	; (8001080 <HAL_GPIO_Init+0x2a4>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d00d      	beq.n	8000f76 <HAL_GPIO_Init+0x19a>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a49      	ldr	r2, [pc, #292]	; (8001084 <HAL_GPIO_Init+0x2a8>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d007      	beq.n	8000f72 <HAL_GPIO_Init+0x196>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a48      	ldr	r2, [pc, #288]	; (8001088 <HAL_GPIO_Init+0x2ac>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d101      	bne.n	8000f6e <HAL_GPIO_Init+0x192>
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e006      	b.n	8000f7c <HAL_GPIO_Init+0x1a0>
 8000f6e:	2304      	movs	r3, #4
 8000f70:	e004      	b.n	8000f7c <HAL_GPIO_Init+0x1a0>
 8000f72:	2302      	movs	r3, #2
 8000f74:	e002      	b.n	8000f7c <HAL_GPIO_Init+0x1a0>
 8000f76:	2301      	movs	r3, #1
 8000f78:	e000      	b.n	8000f7c <HAL_GPIO_Init+0x1a0>
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f7e:	f002 0203 	and.w	r2, r2, #3
 8000f82:	0092      	lsls	r2, r2, #2
 8000f84:	4093      	lsls	r3, r2
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f8c:	493a      	ldr	r1, [pc, #232]	; (8001078 <HAL_GPIO_Init+0x29c>)
 8000f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f90:	089b      	lsrs	r3, r3, #2
 8000f92:	3302      	adds	r3, #2
 8000f94:	68fa      	ldr	r2, [r7, #12]
 8000f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d006      	beq.n	8000fb4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fa6:	4b39      	ldr	r3, [pc, #228]	; (800108c <HAL_GPIO_Init+0x2b0>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	4938      	ldr	r1, [pc, #224]	; (800108c <HAL_GPIO_Init+0x2b0>)
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	600b      	str	r3, [r1, #0]
 8000fb2:	e006      	b.n	8000fc2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fb4:	4b35      	ldr	r3, [pc, #212]	; (800108c <HAL_GPIO_Init+0x2b0>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	4933      	ldr	r1, [pc, #204]	; (800108c <HAL_GPIO_Init+0x2b0>)
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d006      	beq.n	8000fdc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fce:	4b2f      	ldr	r3, [pc, #188]	; (800108c <HAL_GPIO_Init+0x2b0>)
 8000fd0:	685a      	ldr	r2, [r3, #4]
 8000fd2:	492e      	ldr	r1, [pc, #184]	; (800108c <HAL_GPIO_Init+0x2b0>)
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	604b      	str	r3, [r1, #4]
 8000fda:	e006      	b.n	8000fea <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fdc:	4b2b      	ldr	r3, [pc, #172]	; (800108c <HAL_GPIO_Init+0x2b0>)
 8000fde:	685a      	ldr	r2, [r3, #4]
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	4929      	ldr	r1, [pc, #164]	; (800108c <HAL_GPIO_Init+0x2b0>)
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d006      	beq.n	8001004 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ff6:	4b25      	ldr	r3, [pc, #148]	; (800108c <HAL_GPIO_Init+0x2b0>)
 8000ff8:	689a      	ldr	r2, [r3, #8]
 8000ffa:	4924      	ldr	r1, [pc, #144]	; (800108c <HAL_GPIO_Init+0x2b0>)
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	608b      	str	r3, [r1, #8]
 8001002:	e006      	b.n	8001012 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001004:	4b21      	ldr	r3, [pc, #132]	; (800108c <HAL_GPIO_Init+0x2b0>)
 8001006:	689a      	ldr	r2, [r3, #8]
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	43db      	mvns	r3, r3
 800100c:	491f      	ldr	r1, [pc, #124]	; (800108c <HAL_GPIO_Init+0x2b0>)
 800100e:	4013      	ands	r3, r2
 8001010:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d006      	beq.n	800102c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800101e:	4b1b      	ldr	r3, [pc, #108]	; (800108c <HAL_GPIO_Init+0x2b0>)
 8001020:	68da      	ldr	r2, [r3, #12]
 8001022:	491a      	ldr	r1, [pc, #104]	; (800108c <HAL_GPIO_Init+0x2b0>)
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	4313      	orrs	r3, r2
 8001028:	60cb      	str	r3, [r1, #12]
 800102a:	e006      	b.n	800103a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800102c:	4b17      	ldr	r3, [pc, #92]	; (800108c <HAL_GPIO_Init+0x2b0>)
 800102e:	68da      	ldr	r2, [r3, #12]
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	43db      	mvns	r3, r3
 8001034:	4915      	ldr	r1, [pc, #84]	; (800108c <HAL_GPIO_Init+0x2b0>)
 8001036:	4013      	ands	r3, r2
 8001038:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800103a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103c:	3301      	adds	r3, #1
 800103e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001046:	fa22 f303 	lsr.w	r3, r2, r3
 800104a:	2b00      	cmp	r3, #0
 800104c:	f47f aed0 	bne.w	8000df0 <HAL_GPIO_Init+0x14>
  }
}
 8001050:	bf00      	nop
 8001052:	372c      	adds	r7, #44	; 0x2c
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	10210000 	.word	0x10210000
 8001060:	10110000 	.word	0x10110000
 8001064:	10120000 	.word	0x10120000
 8001068:	10310000 	.word	0x10310000
 800106c:	10320000 	.word	0x10320000
 8001070:	10220000 	.word	0x10220000
 8001074:	40021000 	.word	0x40021000
 8001078:	40010000 	.word	0x40010000
 800107c:	40010800 	.word	0x40010800
 8001080:	40010c00 	.word	0x40010c00
 8001084:	40011000 	.word	0x40011000
 8001088:	40011400 	.word	0x40011400
 800108c:	40010400 	.word	0x40010400

08001090 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	689a      	ldr	r2, [r3, #8]
 80010a0:	887b      	ldrh	r3, [r7, #2]
 80010a2:	4013      	ands	r3, r2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d002      	beq.n	80010ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010a8:	2301      	movs	r3, #1
 80010aa:	73fb      	strb	r3, [r7, #15]
 80010ac:	e001      	b.n	80010b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010ae:	2300      	movs	r3, #0
 80010b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr

080010be <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010be:	b480      	push	{r7}
 80010c0:	b083      	sub	sp, #12
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
 80010c6:	460b      	mov	r3, r1
 80010c8:	807b      	strh	r3, [r7, #2]
 80010ca:	4613      	mov	r3, r2
 80010cc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010ce:	787b      	ldrb	r3, [r7, #1]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d003      	beq.n	80010dc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010d4:	887a      	ldrh	r2, [r7, #2]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80010da:	e003      	b.n	80010e4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010dc:	887b      	ldrh	r3, [r7, #2]
 80010de:	041a      	lsls	r2, r3, #16
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	611a      	str	r2, [r3, #16]
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr

080010ee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010ee:	b480      	push	{r7}
 80010f0:	b085      	sub	sp, #20
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
 80010f6:	460b      	mov	r3, r1
 80010f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001100:	887a      	ldrh	r2, [r7, #2]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	4013      	ands	r3, r2
 8001106:	041a      	lsls	r2, r3, #16
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	43d9      	mvns	r1, r3
 800110c:	887b      	ldrh	r3, [r7, #2]
 800110e:	400b      	ands	r3, r1
 8001110:	431a      	orrs	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	611a      	str	r2, [r3, #16]
}
 8001116:	bf00      	nop
 8001118:	3714      	adds	r7, #20
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr

08001120 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001122:	b08b      	sub	sp, #44	; 0x2c
 8001124:	af06      	add	r7, sp, #24
 8001126:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d101      	bne.n	8001132 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e0fd      	b.n	800132e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b00      	cmp	r3, #0
 800113c:	d106      	bne.n	800114c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f006 fbde 	bl	8007908 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2203      	movs	r2, #3
 8001150:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f002 fdf7 	bl	8003d4c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	603b      	str	r3, [r7, #0]
 8001164:	687e      	ldr	r6, [r7, #4]
 8001166:	466d      	mov	r5, sp
 8001168:	f106 0410 	add.w	r4, r6, #16
 800116c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800116e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001170:	6823      	ldr	r3, [r4, #0]
 8001172:	602b      	str	r3, [r5, #0]
 8001174:	1d33      	adds	r3, r6, #4
 8001176:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001178:	6838      	ldr	r0, [r7, #0]
 800117a:	f002 fdc1 	bl	8003d00 <USB_CoreInit>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d005      	beq.n	8001190 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2202      	movs	r2, #2
 8001188:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e0ce      	b.n	800132e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f002 fdf2 	bl	8003d80 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800119c:	2300      	movs	r3, #0
 800119e:	73fb      	strb	r3, [r7, #15]
 80011a0:	e04c      	b.n	800123c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	1c5a      	adds	r2, r3, #1
 80011a8:	4613      	mov	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	440b      	add	r3, r1
 80011b2:	3301      	adds	r3, #1
 80011b4:	2201      	movs	r2, #1
 80011b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
 80011ba:	6879      	ldr	r1, [r7, #4]
 80011bc:	1c5a      	adds	r2, r3, #1
 80011be:	4613      	mov	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	4413      	add	r3, r2
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	440b      	add	r3, r1
 80011c8:	7bfa      	ldrb	r2, [r7, #15]
 80011ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80011cc:	7bfa      	ldrb	r2, [r7, #15]
 80011ce:	7bfb      	ldrb	r3, [r7, #15]
 80011d0:	b298      	uxth	r0, r3
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	4613      	mov	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	4413      	add	r3, r2
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	440b      	add	r3, r1
 80011de:	3336      	adds	r3, #54	; 0x36
 80011e0:	4602      	mov	r2, r0
 80011e2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	1c5a      	adds	r2, r3, #1
 80011ea:	4613      	mov	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4413      	add	r3, r2
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	440b      	add	r3, r1
 80011f4:	3303      	adds	r3, #3
 80011f6:	2200      	movs	r2, #0
 80011f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011fa:	7bfa      	ldrb	r2, [r7, #15]
 80011fc:	6879      	ldr	r1, [r7, #4]
 80011fe:	4613      	mov	r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	4413      	add	r3, r2
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	440b      	add	r3, r1
 8001208:	3338      	adds	r3, #56	; 0x38
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800120e:	7bfa      	ldrb	r2, [r7, #15]
 8001210:	6879      	ldr	r1, [r7, #4]
 8001212:	4613      	mov	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	4413      	add	r3, r2
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	440b      	add	r3, r1
 800121c:	333c      	adds	r3, #60	; 0x3c
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001222:	7bfa      	ldrb	r2, [r7, #15]
 8001224:	6879      	ldr	r1, [r7, #4]
 8001226:	4613      	mov	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	4413      	add	r3, r2
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	440b      	add	r3, r1
 8001230:	3340      	adds	r3, #64	; 0x40
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001236:	7bfb      	ldrb	r3, [r7, #15]
 8001238:	3301      	adds	r3, #1
 800123a:	73fb      	strb	r3, [r7, #15]
 800123c:	7bfa      	ldrb	r2, [r7, #15]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	429a      	cmp	r2, r3
 8001244:	d3ad      	bcc.n	80011a2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001246:	2300      	movs	r3, #0
 8001248:	73fb      	strb	r3, [r7, #15]
 800124a:	e044      	b.n	80012d6 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800124c:	7bfa      	ldrb	r2, [r7, #15]
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	4613      	mov	r3, r2
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	4413      	add	r3, r2
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	440b      	add	r3, r1
 800125a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800125e:	2200      	movs	r2, #0
 8001260:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001262:	7bfa      	ldrb	r2, [r7, #15]
 8001264:	6879      	ldr	r1, [r7, #4]
 8001266:	4613      	mov	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	4413      	add	r3, r2
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	440b      	add	r3, r1
 8001270:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001274:	7bfa      	ldrb	r2, [r7, #15]
 8001276:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001278:	7bfa      	ldrb	r2, [r7, #15]
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	4613      	mov	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	440b      	add	r3, r1
 8001286:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800128a:	2200      	movs	r2, #0
 800128c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800128e:	7bfa      	ldrb	r2, [r7, #15]
 8001290:	6879      	ldr	r1, [r7, #4]
 8001292:	4613      	mov	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4413      	add	r3, r2
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	440b      	add	r3, r1
 800129c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80012a4:	7bfa      	ldrb	r2, [r7, #15]
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	4613      	mov	r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4413      	add	r3, r2
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	440b      	add	r3, r1
 80012b2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80012ba:	7bfa      	ldrb	r2, [r7, #15]
 80012bc:	6879      	ldr	r1, [r7, #4]
 80012be:	4613      	mov	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	4413      	add	r3, r2
 80012c4:	00db      	lsls	r3, r3, #3
 80012c6:	440b      	add	r3, r1
 80012c8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
 80012d2:	3301      	adds	r3, #1
 80012d4:	73fb      	strb	r3, [r7, #15]
 80012d6:	7bfa      	ldrb	r2, [r7, #15]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d3b5      	bcc.n	800124c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	603b      	str	r3, [r7, #0]
 80012e6:	687e      	ldr	r6, [r7, #4]
 80012e8:	466d      	mov	r5, sp
 80012ea:	f106 0410 	add.w	r4, r6, #16
 80012ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012f2:	6823      	ldr	r3, [r4, #0]
 80012f4:	602b      	str	r3, [r5, #0]
 80012f6:	1d33      	adds	r3, r6, #4
 80012f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012fa:	6838      	ldr	r0, [r7, #0]
 80012fc:	f002 fd4c 	bl	8003d98 <USB_DevInit>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d005      	beq.n	8001312 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2202      	movs	r2, #2
 800130a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e00d      	b.n	800132e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2201      	movs	r2, #1
 800131e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f004 fce6 	bl	8005cf8 <USB_DevDisconnect>

  return HAL_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001336 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001344:	2b01      	cmp	r3, #1
 8001346:	d101      	bne.n	800134c <HAL_PCD_Start+0x16>
 8001348:	2302      	movs	r3, #2
 800134a:	e016      	b.n	800137a <HAL_PCD_Start+0x44>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2201      	movs	r2, #1
 8001350:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f002 fce1 	bl	8003d20 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800135e:	2101      	movs	r1, #1
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f006 fd44 	bl	8007dee <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f004 fcba 	bl	8005ce4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b088      	sub	sp, #32
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4618      	mov	r0, r3
 8001390:	f004 fcbc 	bl	8005d0c <USB_ReadInterrupts>
 8001394:	4603      	mov	r3, r0
 8001396:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800139a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800139e:	d102      	bne.n	80013a6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 fb61 	bl	8001a68 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f004 fcae 	bl	8005d0c <USB_ReadInterrupts>
 80013b0:	4603      	mov	r3, r0
 80013b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ba:	d112      	bne.n	80013e2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013ce:	b292      	uxth	r2, r2
 80013d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f006 fb12 	bl	80079fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80013da:	2100      	movs	r1, #0
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 f925 	bl	800162c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f004 fc90 	bl	8005d0c <USB_ReadInterrupts>
 80013ec:	4603      	mov	r3, r0
 80013ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80013f6:	d10b      	bne.n	8001410 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001400:	b29a      	uxth	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800140a:	b292      	uxth	r2, r2
 800140c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f004 fc79 	bl	8005d0c <USB_ReadInterrupts>
 800141a:	4603      	mov	r3, r0
 800141c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001420:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001424:	d10b      	bne.n	800143e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800142e:	b29a      	uxth	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001438:	b292      	uxth	r2, r2
 800143a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f004 fc62 	bl	8005d0c <USB_ReadInterrupts>
 8001448:	4603      	mov	r3, r0
 800144a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800144e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001452:	d126      	bne.n	80014a2 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800145c:	b29a      	uxth	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f022 0204 	bic.w	r2, r2, #4
 8001466:	b292      	uxth	r2, r2
 8001468:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001474:	b29a      	uxth	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f022 0208 	bic.w	r2, r2, #8
 800147e:	b292      	uxth	r2, r2
 8001480:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f006 faf3 	bl	8007a70 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001492:	b29a      	uxth	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800149c:	b292      	uxth	r2, r2
 800149e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f004 fc30 	bl	8005d0c <USB_ReadInterrupts>
 80014ac:	4603      	mov	r3, r0
 80014ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80014b6:	f040 8084 	bne.w	80015c2 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80014ba:	2300      	movs	r3, #0
 80014bc:	77fb      	strb	r3, [r7, #31]
 80014be:	e011      	b.n	80014e4 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	461a      	mov	r2, r3
 80014c6:	7ffb      	ldrb	r3, [r7, #31]
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	441a      	add	r2, r3
 80014cc:	7ffb      	ldrb	r3, [r7, #31]
 80014ce:	8812      	ldrh	r2, [r2, #0]
 80014d0:	b292      	uxth	r2, r2
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	f107 0120 	add.w	r1, r7, #32
 80014d8:	440b      	add	r3, r1
 80014da:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80014de:	7ffb      	ldrb	r3, [r7, #31]
 80014e0:	3301      	adds	r3, #1
 80014e2:	77fb      	strb	r3, [r7, #31]
 80014e4:	7ffb      	ldrb	r3, [r7, #31]
 80014e6:	2b07      	cmp	r3, #7
 80014e8:	d9ea      	bls.n	80014c0 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f042 0201 	orr.w	r2, r2, #1
 80014fc:	b292      	uxth	r2, r2
 80014fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800150a:	b29a      	uxth	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 0201 	bic.w	r2, r2, #1
 8001514:	b292      	uxth	r2, r2
 8001516:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800151a:	bf00      	nop
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001524:	b29b      	uxth	r3, r3
 8001526:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0f6      	beq.n	800151c <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001536:	b29a      	uxth	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001540:	b292      	uxth	r2, r2
 8001542:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001546:	2300      	movs	r3, #0
 8001548:	77fb      	strb	r3, [r7, #31]
 800154a:	e010      	b.n	800156e <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800154c:	7ffb      	ldrb	r3, [r7, #31]
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	6812      	ldr	r2, [r2, #0]
 8001552:	4611      	mov	r1, r2
 8001554:	7ffa      	ldrb	r2, [r7, #31]
 8001556:	0092      	lsls	r2, r2, #2
 8001558:	440a      	add	r2, r1
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	f107 0120 	add.w	r1, r7, #32
 8001560:	440b      	add	r3, r1
 8001562:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001566:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001568:	7ffb      	ldrb	r3, [r7, #31]
 800156a:	3301      	adds	r3, #1
 800156c:	77fb      	strb	r3, [r7, #31]
 800156e:	7ffb      	ldrb	r3, [r7, #31]
 8001570:	2b07      	cmp	r3, #7
 8001572:	d9eb      	bls.n	800154c <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800157c:	b29a      	uxth	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f042 0208 	orr.w	r2, r2, #8
 8001586:	b292      	uxth	r2, r2
 8001588:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001594:	b29a      	uxth	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800159e:	b292      	uxth	r2, r2
 80015a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f042 0204 	orr.w	r2, r2, #4
 80015b6:	b292      	uxth	r2, r2
 80015b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f006 fa3d 	bl	8007a3c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f004 fba0 	bl	8005d0c <USB_ReadInterrupts>
 80015cc:	4603      	mov	r3, r0
 80015ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015d6:	d10e      	bne.n	80015f6 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015ea:	b292      	uxth	r2, r2
 80015ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f006 f9f6 	bl	80079e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f004 fb86 	bl	8005d0c <USB_ReadInterrupts>
 8001600:	4603      	mov	r3, r0
 8001602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800160a:	d10b      	bne.n	8001624 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001614:	b29a      	uxth	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800161e:	b292      	uxth	r2, r2
 8001620:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001624:	bf00      	nop
 8001626:	3720      	adds	r7, #32
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	460b      	mov	r3, r1
 8001636:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800163e:	2b01      	cmp	r3, #1
 8001640:	d101      	bne.n	8001646 <HAL_PCD_SetAddress+0x1a>
 8001642:	2302      	movs	r3, #2
 8001644:	e013      	b.n	800166e <HAL_PCD_SetAddress+0x42>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2201      	movs	r2, #1
 800164a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	78fa      	ldrb	r2, [r7, #3]
 8001652:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	78fa      	ldrb	r2, [r7, #3]
 800165c:	4611      	mov	r1, r2
 800165e:	4618      	mov	r0, r3
 8001660:	f004 fb2d 	bl	8005cbe <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b084      	sub	sp, #16
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
 800167e:	4608      	mov	r0, r1
 8001680:	4611      	mov	r1, r2
 8001682:	461a      	mov	r2, r3
 8001684:	4603      	mov	r3, r0
 8001686:	70fb      	strb	r3, [r7, #3]
 8001688:	460b      	mov	r3, r1
 800168a:	803b      	strh	r3, [r7, #0]
 800168c:	4613      	mov	r3, r2
 800168e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001690:	2300      	movs	r3, #0
 8001692:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001694:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001698:	2b00      	cmp	r3, #0
 800169a:	da0e      	bge.n	80016ba <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800169c:	78fb      	ldrb	r3, [r7, #3]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	1c5a      	adds	r2, r3, #1
 80016a4:	4613      	mov	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	4413      	add	r3, r2
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	4413      	add	r3, r2
 80016b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2201      	movs	r2, #1
 80016b6:	705a      	strb	r2, [r3, #1]
 80016b8:	e00e      	b.n	80016d8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016ba:	78fb      	ldrb	r3, [r7, #3]
 80016bc:	f003 0207 	and.w	r2, r3, #7
 80016c0:	4613      	mov	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	4413      	add	r3, r2
 80016d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2200      	movs	r2, #0
 80016d6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80016d8:	78fb      	ldrb	r3, [r7, #3]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80016e4:	883a      	ldrh	r2, [r7, #0]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	78ba      	ldrb	r2, [r7, #2]
 80016ee:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	785b      	ldrb	r3, [r3, #1]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d004      	beq.n	8001702 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001702:	78bb      	ldrb	r3, [r7, #2]
 8001704:	2b02      	cmp	r3, #2
 8001706:	d102      	bne.n	800170e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2200      	movs	r2, #0
 800170c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001714:	2b01      	cmp	r3, #1
 8001716:	d101      	bne.n	800171c <HAL_PCD_EP_Open+0xa6>
 8001718:	2302      	movs	r3, #2
 800171a:	e00e      	b.n	800173a <HAL_PCD_EP_Open+0xc4>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2201      	movs	r2, #1
 8001720:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	68f9      	ldr	r1, [r7, #12]
 800172a:	4618      	mov	r0, r3
 800172c:	f002 fb54 	bl	8003dd8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001738:	7afb      	ldrb	r3, [r7, #11]
}
 800173a:	4618      	mov	r0, r3
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b084      	sub	sp, #16
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
 800174a:	460b      	mov	r3, r1
 800174c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800174e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001752:	2b00      	cmp	r3, #0
 8001754:	da0e      	bge.n	8001774 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001756:	78fb      	ldrb	r3, [r7, #3]
 8001758:	f003 0307 	and.w	r3, r3, #7
 800175c:	1c5a      	adds	r2, r3, #1
 800175e:	4613      	mov	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	4413      	add	r3, r2
 800176a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2201      	movs	r2, #1
 8001770:	705a      	strb	r2, [r3, #1]
 8001772:	e00e      	b.n	8001792 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001774:	78fb      	ldrb	r3, [r7, #3]
 8001776:	f003 0207 	and.w	r2, r3, #7
 800177a:	4613      	mov	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	4413      	add	r3, r2
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2200      	movs	r2, #0
 8001790:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001792:	78fb      	ldrb	r3, [r7, #3]
 8001794:	f003 0307 	and.w	r3, r3, #7
 8001798:	b2da      	uxtb	r2, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d101      	bne.n	80017ac <HAL_PCD_EP_Close+0x6a>
 80017a8:	2302      	movs	r3, #2
 80017aa:	e00e      	b.n	80017ca <HAL_PCD_EP_Close+0x88>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	68f9      	ldr	r1, [r7, #12]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f002 fe76 	bl	80044ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b086      	sub	sp, #24
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	60f8      	str	r0, [r7, #12]
 80017da:	607a      	str	r2, [r7, #4]
 80017dc:	603b      	str	r3, [r7, #0]
 80017de:	460b      	mov	r3, r1
 80017e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017e2:	7afb      	ldrb	r3, [r7, #11]
 80017e4:	f003 0207 	and.w	r2, r3, #7
 80017e8:	4613      	mov	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	4413      	add	r3, r2
 80017f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	2200      	movs	r2, #0
 800180a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	2200      	movs	r2, #0
 8001810:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001812:	7afb      	ldrb	r3, [r7, #11]
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	b2da      	uxtb	r2, r3
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800181e:	7afb      	ldrb	r3, [r7, #11]
 8001820:	f003 0307 	and.w	r3, r3, #7
 8001824:	2b00      	cmp	r3, #0
 8001826:	d106      	bne.n	8001836 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6979      	ldr	r1, [r7, #20]
 800182e:	4618      	mov	r0, r3
 8001830:	f003 f828 	bl	8004884 <USB_EPStartXfer>
 8001834:	e005      	b.n	8001842 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6979      	ldr	r1, [r7, #20]
 800183c:	4618      	mov	r0, r3
 800183e:	f003 f821 	bl	8004884 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	460b      	mov	r3, r1
 8001856:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001858:	78fb      	ldrb	r3, [r7, #3]
 800185a:	f003 0207 	and.w	r2, r3, #7
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	4613      	mov	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	440b      	add	r3, r1
 800186a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800186e:	681b      	ldr	r3, [r3, #0]
}
 8001870:	4618      	mov	r0, r3
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr

0800187a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b086      	sub	sp, #24
 800187e:	af00      	add	r7, sp, #0
 8001880:	60f8      	str	r0, [r7, #12]
 8001882:	607a      	str	r2, [r7, #4]
 8001884:	603b      	str	r3, [r7, #0]
 8001886:	460b      	mov	r3, r1
 8001888:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800188a:	7afb      	ldrb	r3, [r7, #11]
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	1c5a      	adds	r2, r3, #1
 8001892:	4613      	mov	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	4413      	add	r3, r2
 800189e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	2201      	movs	r2, #1
 80018b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	683a      	ldr	r2, [r7, #0]
 80018b8:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	2200      	movs	r2, #0
 80018be:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	2201      	movs	r2, #1
 80018c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018c6:	7afb      	ldrb	r3, [r7, #11]
 80018c8:	f003 0307 	and.w	r3, r3, #7
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80018d2:	7afb      	ldrb	r3, [r7, #11]
 80018d4:	f003 0307 	and.w	r3, r3, #7
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d106      	bne.n	80018ea <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6979      	ldr	r1, [r7, #20]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f002 ffce 	bl	8004884 <USB_EPStartXfer>
 80018e8:	e005      	b.n	80018f6 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6979      	ldr	r1, [r7, #20]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f002 ffc7 	bl	8004884 <USB_EPStartXfer>
  }

  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3718      	adds	r7, #24
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800190c:	78fb      	ldrb	r3, [r7, #3]
 800190e:	f003 0207 	and.w	r2, r3, #7
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	429a      	cmp	r2, r3
 8001918:	d901      	bls.n	800191e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e04c      	b.n	80019b8 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800191e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001922:	2b00      	cmp	r3, #0
 8001924:	da0e      	bge.n	8001944 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001926:	78fb      	ldrb	r3, [r7, #3]
 8001928:	f003 0307 	and.w	r3, r3, #7
 800192c:	1c5a      	adds	r2, r3, #1
 800192e:	4613      	mov	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2201      	movs	r2, #1
 8001940:	705a      	strb	r2, [r3, #1]
 8001942:	e00c      	b.n	800195e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001944:	78fa      	ldrb	r2, [r7, #3]
 8001946:	4613      	mov	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	4413      	add	r3, r2
 8001956:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2200      	movs	r2, #0
 800195c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2201      	movs	r2, #1
 8001962:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001964:	78fb      	ldrb	r3, [r7, #3]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	b2da      	uxtb	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001976:	2b01      	cmp	r3, #1
 8001978:	d101      	bne.n	800197e <HAL_PCD_EP_SetStall+0x7e>
 800197a:	2302      	movs	r3, #2
 800197c:	e01c      	b.n	80019b8 <HAL_PCD_EP_SetStall+0xb8>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2201      	movs	r2, #1
 8001982:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	68f9      	ldr	r1, [r7, #12]
 800198c:	4618      	mov	r0, r3
 800198e:	f004 f899 	bl	8005ac4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001992:	78fb      	ldrb	r3, [r7, #3]
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	2b00      	cmp	r3, #0
 800199a:	d108      	bne.n	80019ae <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80019a6:	4619      	mov	r1, r3
 80019a8:	4610      	mov	r0, r2
 80019aa:	f004 f9be 	bl	8005d2a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	460b      	mov	r3, r1
 80019ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80019cc:	78fb      	ldrb	r3, [r7, #3]
 80019ce:	f003 020f 	and.w	r2, r3, #15
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d901      	bls.n	80019de <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e040      	b.n	8001a60 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80019de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	da0e      	bge.n	8001a04 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019e6:	78fb      	ldrb	r3, [r7, #3]
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	1c5a      	adds	r2, r3, #1
 80019ee:	4613      	mov	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	4413      	add	r3, r2
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	4413      	add	r3, r2
 80019fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2201      	movs	r2, #1
 8001a00:	705a      	strb	r2, [r3, #1]
 8001a02:	e00e      	b.n	8001a22 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a04:	78fb      	ldrb	r3, [r7, #3]
 8001a06:	f003 0207 	and.w	r2, r3, #7
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	4413      	add	r3, r2
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	4413      	add	r3, r2
 8001a1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2200      	movs	r2, #0
 8001a26:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a28:	78fb      	ldrb	r3, [r7, #3]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d101      	bne.n	8001a42 <HAL_PCD_EP_ClrStall+0x82>
 8001a3e:	2302      	movs	r3, #2
 8001a40:	e00e      	b.n	8001a60 <HAL_PCD_EP_ClrStall+0xa0>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2201      	movs	r2, #1
 8001a46:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	68f9      	ldr	r1, [r7, #12]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f004 f887 	bl	8005b64 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08e      	sub	sp, #56	; 0x38
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001a70:	e2df      	b.n	8002032 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a7a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001a7c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	f003 030f 	and.w	r3, r3, #15
 8001a84:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001a88:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f040 8158 	bne.w	8001d42 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001a92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001a94:	f003 0310 	and.w	r3, r3, #16
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d152      	bne.n	8001b42 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	881b      	ldrh	r3, [r3, #0]
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001aac:	81fb      	strh	r3, [r7, #14]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	89fb      	ldrh	r3, [r7, #14]
 8001ab4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ab8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3328      	adds	r3, #40	; 0x28
 8001ac4:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	4413      	add	r3, r2
 8001ada:	3302      	adds	r3, #2
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	6812      	ldr	r2, [r2, #0]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ae8:	881b      	ldrh	r3, [r3, #0]
 8001aea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	695a      	ldr	r2, [r3, #20]
 8001af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	441a      	add	r2, r3
 8001afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afe:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001b00:	2100      	movs	r1, #0
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f005 ff53 	bl	80079ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f000 828e 	beq.w	8002032 <PCD_EP_ISR_Handler+0x5ca>
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f040 8289 	bne.w	8002032 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	b292      	uxth	r2, r2
 8001b34:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001b40:	e277      	b.n	8002032 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	881b      	ldrh	r3, [r3, #0]
 8001b50:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001b52:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001b54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d034      	beq.n	8001bc6 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	461a      	mov	r2, r3
 8001b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	4413      	add	r3, r2
 8001b70:	3306      	adds	r3, #6
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	6812      	ldr	r2, [r2, #0]
 8001b78:	4413      	add	r3, r2
 8001b7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b7e:	881b      	ldrh	r3, [r3, #0]
 8001b80:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6818      	ldr	r0, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	f004 f914 	bl	8005dc8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	881b      	ldrh	r3, [r3, #0]
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001bac:	4013      	ands	r3, r2
 8001bae:	823b      	strh	r3, [r7, #16]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	8a3a      	ldrh	r2, [r7, #16]
 8001bb6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bba:	b292      	uxth	r2, r2
 8001bbc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f005 fec8 	bl	8007954 <HAL_PCD_SetupStageCallback>
 8001bc4:	e235      	b.n	8002032 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001bc6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f280 8231 	bge.w	8002032 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001bdc:	4013      	ands	r3, r2
 8001bde:	83bb      	strh	r3, [r7, #28]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	8bba      	ldrh	r2, [r7, #28]
 8001be6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bea:	b292      	uxth	r2, r2
 8001bec:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	4413      	add	r3, r2
 8001c02:	3306      	adds	r3, #6
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	6812      	ldr	r2, [r2, #0]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c10:	881b      	ldrh	r3, [r3, #0]
 8001c12:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c18:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d019      	beq.n	8001c56 <PCD_EP_ISR_Handler+0x1ee>
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d015      	beq.n	8001c56 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6818      	ldr	r0, [r3, #0]
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	6959      	ldr	r1, [r3, #20]
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	f004 f8c4 	bl	8005dc8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c42:	695a      	ldr	r2, [r3, #20]
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c46:	69db      	ldr	r3, [r3, #28]
 8001c48:	441a      	add	r2, r3
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001c4e:	2100      	movs	r1, #0
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f005 fe91 	bl	8007978 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	61bb      	str	r3, [r7, #24]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	461a      	mov	r2, r3
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d112      	bne.n	8001ca4 <PCD_EP_ISR_Handler+0x23c>
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	881b      	ldrh	r3, [r3, #0]
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	801a      	strh	r2, [r3, #0]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	801a      	strh	r2, [r3, #0]
 8001ca2:	e02f      	b.n	8001d04 <PCD_EP_ISR_Handler+0x29c>
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	2b3e      	cmp	r3, #62	; 0x3e
 8001caa:	d813      	bhi.n	8001cd4 <PCD_EP_ISR_Handler+0x26c>
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	085b      	lsrs	r3, r3, #1
 8001cb2:	633b      	str	r3, [r7, #48]	; 0x30
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d002      	beq.n	8001cc6 <PCD_EP_ISR_Handler+0x25e>
 8001cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	633b      	str	r3, [r7, #48]	; 0x30
 8001cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	029b      	lsls	r3, r3, #10
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	801a      	strh	r2, [r3, #0]
 8001cd2:	e017      	b.n	8001d04 <PCD_EP_ISR_Handler+0x29c>
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	095b      	lsrs	r3, r3, #5
 8001cda:	633b      	str	r3, [r7, #48]	; 0x30
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	f003 031f 	and.w	r3, r3, #31
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d102      	bne.n	8001cee <PCD_EP_ISR_Handler+0x286>
 8001ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cea:	3b01      	subs	r3, #1
 8001cec:	633b      	str	r3, [r7, #48]	; 0x30
 8001cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	029b      	lsls	r3, r3, #10
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d14:	827b      	strh	r3, [r7, #18]
 8001d16:	8a7b      	ldrh	r3, [r7, #18]
 8001d18:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001d1c:	827b      	strh	r3, [r7, #18]
 8001d1e:	8a7b      	ldrh	r3, [r7, #18]
 8001d20:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001d24:	827b      	strh	r3, [r7, #18]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	8a7b      	ldrh	r3, [r7, #18]
 8001d2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	8013      	strh	r3, [r2, #0]
 8001d40:	e177      	b.n	8002032 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	461a      	mov	r2, r3
 8001d48:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	881b      	ldrh	r3, [r3, #0]
 8001d52:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001d54:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f280 80ea 	bge.w	8001f32 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	881b      	ldrh	r3, [r3, #0]
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001d74:	4013      	ands	r3, r2
 8001d76:	853b      	strh	r3, [r7, #40]	; 0x28
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	4413      	add	r3, r2
 8001d86:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001d88:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d8c:	b292      	uxth	r2, r2
 8001d8e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001d90:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001d94:	4613      	mov	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4413      	add	r3, r2
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	4413      	add	r3, r2
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	7b1b      	ldrb	r3, [r3, #12]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d122      	bne.n	8001df4 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	461a      	mov	r2, r3
 8001dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	4413      	add	r3, r2
 8001dc2:	3306      	adds	r3, #6
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	6812      	ldr	r2, [r2, #0]
 8001dca:	4413      	add	r3, r2
 8001dcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dd6:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001dd8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 8087 	beq.w	8001eee <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6818      	ldr	r0, [r3, #0]
 8001de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de6:	6959      	ldr	r1, [r3, #20]
 8001de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dea:	88da      	ldrh	r2, [r3, #6]
 8001dec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001dee:	f003 ffeb 	bl	8005dc8 <USB_ReadPMA>
 8001df2:	e07c      	b.n	8001eee <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df6:	78db      	ldrb	r3, [r3, #3]
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d108      	bne.n	8001e0e <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001dfc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001dfe:	461a      	mov	r2, r3
 8001e00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f923 	bl	800204e <HAL_PCD_EP_DB_Receive>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001e0c:	e06f      	b.n	8001eee <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	461a      	mov	r2, r3
 8001e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4413      	add	r3, r2
 8001e1c:	881b      	ldrh	r3, [r3, #0]
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e28:	847b      	strh	r3, [r7, #34]	; 0x22
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	441a      	add	r2, r3
 8001e38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001e3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	461a      	mov	r2, r3
 8001e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	881b      	ldrh	r3, [r3, #0]
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d021      	beq.n	8001eac <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	461a      	mov	r2, r3
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	4413      	add	r3, r2
 8001e7c:	3302      	adds	r3, #2
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	6812      	ldr	r2, [r2, #0]
 8001e84:	4413      	add	r3, r2
 8001e86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e8a:	881b      	ldrh	r3, [r3, #0]
 8001e8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e90:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001e92:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d02a      	beq.n	8001eee <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6818      	ldr	r0, [r3, #0]
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	6959      	ldr	r1, [r3, #20]
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea2:	891a      	ldrh	r2, [r3, #8]
 8001ea4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ea6:	f003 ff8f 	bl	8005dc8 <USB_ReadPMA>
 8001eaa:	e020      	b.n	8001eee <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	4413      	add	r3, r2
 8001ec0:	3306      	adds	r3, #6
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	6812      	ldr	r2, [r2, #0]
 8001ec8:	4413      	add	r3, r2
 8001eca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ece:	881b      	ldrh	r3, [r3, #0]
 8001ed0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ed4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001ed6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d008      	beq.n	8001eee <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6818      	ldr	r0, [r3, #0]
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee2:	6959      	ldr	r1, [r3, #20]
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee6:	895a      	ldrh	r2, [r3, #10]
 8001ee8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001eea:	f003 ff6d 	bl	8005dc8 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef0:	69da      	ldr	r2, [r3, #28]
 8001ef2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ef4:	441a      	add	r2, r3
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	695a      	ldr	r2, [r3, #20]
 8001efe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f00:	441a      	add	r2, r3
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d004      	beq.n	8001f18 <PCD_EP_ISR_Handler+0x4b0>
 8001f0e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d206      	bcs.n	8001f26 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f005 fd2a 	bl	8007978 <HAL_PCD_DataOutStageCallback>
 8001f24:	e005      	b.n	8001f32 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f002 fca9 	bl	8004884 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001f32:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d07a      	beq.n	8002032 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8001f3c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f40:	1c5a      	adds	r2, r3, #1
 8001f42:	4613      	mov	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	4413      	add	r3, r2
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	461a      	mov	r2, r3
 8001f56:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4413      	add	r3, r2
 8001f5e:	881b      	ldrh	r3, [r3, #0]
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f6a:	843b      	strh	r3, [r7, #32]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	461a      	mov	r2, r3
 8001f72:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	441a      	add	r2, r3
 8001f7a:	8c3b      	ldrh	r3, [r7, #32]
 8001f7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	78db      	ldrb	r3, [r3, #3]
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d108      	bne.n	8001fa2 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f92:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d146      	bne.n	8002026 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001f98:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d141      	bne.n	8002026 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	461a      	mov	r2, r3
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	4413      	add	r3, r2
 8001fb6:	3302      	adds	r3, #2
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	6812      	ldr	r2, [r2, #0]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fc4:	881b      	ldrh	r3, [r3, #0]
 8001fc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fca:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	699a      	ldr	r2, [r3, #24]
 8001fd0:	8bfb      	ldrh	r3, [r7, #30]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d906      	bls.n	8001fe4 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	699a      	ldr	r2, [r3, #24]
 8001fda:	8bfb      	ldrh	r3, [r7, #30]
 8001fdc:	1ad2      	subs	r2, r2, r3
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	619a      	str	r2, [r3, #24]
 8001fe2:	e002      	b.n	8001fea <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d106      	bne.n	8002000 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f005 fcd8 	bl	80079ae <HAL_PCD_DataInStageCallback>
 8001ffe:	e018      	b.n	8002032 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	695a      	ldr	r2, [r3, #20]
 8002004:	8bfb      	ldrh	r3, [r7, #30]
 8002006:	441a      	add	r2, r3
 8002008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200a:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200e:	69da      	ldr	r2, [r3, #28]
 8002010:	8bfb      	ldrh	r3, [r7, #30]
 8002012:	441a      	add	r2, r3
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800201e:	4618      	mov	r0, r3
 8002020:	f002 fc30 	bl	8004884 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002024:	e005      	b.n	8002032 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002026:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002028:	461a      	mov	r2, r3
 800202a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 f91b 	bl	8002268 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800203a:	b29b      	uxth	r3, r3
 800203c:	b21b      	sxth	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	f6ff ad17 	blt.w	8001a72 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3738      	adds	r7, #56	; 0x38
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b088      	sub	sp, #32
 8002052:	af00      	add	r7, sp, #0
 8002054:	60f8      	str	r0, [r7, #12]
 8002056:	60b9      	str	r1, [r7, #8]
 8002058:	4613      	mov	r3, r2
 800205a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800205c:	88fb      	ldrh	r3, [r7, #6]
 800205e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d07e      	beq.n	8002164 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800206e:	b29b      	uxth	r3, r3
 8002070:	461a      	mov	r2, r3
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	4413      	add	r3, r2
 800207a:	3302      	adds	r3, #2
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	6812      	ldr	r2, [r2, #0]
 8002082:	4413      	add	r3, r2
 8002084:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002088:	881b      	ldrh	r3, [r3, #0]
 800208a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800208e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	699a      	ldr	r2, [r3, #24]
 8002094:	8b7b      	ldrh	r3, [r7, #26]
 8002096:	429a      	cmp	r2, r3
 8002098:	d306      	bcc.n	80020a8 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	699a      	ldr	r2, [r3, #24]
 800209e:	8b7b      	ldrh	r3, [r7, #26]
 80020a0:	1ad2      	subs	r2, r2, r3
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	619a      	str	r2, [r3, #24]
 80020a6:	e002      	b.n	80020ae <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	2200      	movs	r2, #0
 80020ac:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d123      	bne.n	80020fe <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	461a      	mov	r2, r3
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	881b      	ldrh	r3, [r3, #0]
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020d0:	833b      	strh	r3, [r7, #24]
 80020d2:	8b3b      	ldrh	r3, [r7, #24]
 80020d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80020d8:	833b      	strh	r3, [r7, #24]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	461a      	mov	r2, r3
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	441a      	add	r2, r3
 80020e8:	8b3b      	ldrh	r3, [r7, #24]
 80020ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80020fe:	88fb      	ldrh	r3, [r7, #6]
 8002100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002104:	2b00      	cmp	r3, #0
 8002106:	d01f      	beq.n	8002148 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	461a      	mov	r2, r3
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	881b      	ldrh	r3, [r3, #0]
 8002118:	b29b      	uxth	r3, r3
 800211a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800211e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002122:	82fb      	strh	r3, [r7, #22]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	461a      	mov	r2, r3
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	441a      	add	r2, r3
 8002132:	8afb      	ldrh	r3, [r7, #22]
 8002134:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002138:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800213c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002140:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002144:	b29b      	uxth	r3, r3
 8002146:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002148:	8b7b      	ldrh	r3, [r7, #26]
 800214a:	2b00      	cmp	r3, #0
 800214c:	f000 8087 	beq.w	800225e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6818      	ldr	r0, [r3, #0]
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	6959      	ldr	r1, [r3, #20]
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	891a      	ldrh	r2, [r3, #8]
 800215c:	8b7b      	ldrh	r3, [r7, #26]
 800215e:	f003 fe33 	bl	8005dc8 <USB_ReadPMA>
 8002162:	e07c      	b.n	800225e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800216c:	b29b      	uxth	r3, r3
 800216e:	461a      	mov	r2, r3
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	4413      	add	r3, r2
 8002178:	3306      	adds	r3, #6
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	6812      	ldr	r2, [r2, #0]
 8002180:	4413      	add	r3, r2
 8002182:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002186:	881b      	ldrh	r3, [r3, #0]
 8002188:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800218c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	699a      	ldr	r2, [r3, #24]
 8002192:	8b7b      	ldrh	r3, [r7, #26]
 8002194:	429a      	cmp	r2, r3
 8002196:	d306      	bcc.n	80021a6 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	699a      	ldr	r2, [r3, #24]
 800219c:	8b7b      	ldrh	r3, [r7, #26]
 800219e:	1ad2      	subs	r2, r2, r3
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	619a      	str	r2, [r3, #24]
 80021a4:	e002      	b.n	80021ac <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	2200      	movs	r2, #0
 80021aa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d123      	bne.n	80021fc <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	461a      	mov	r2, r3
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	881b      	ldrh	r3, [r3, #0]
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ce:	83fb      	strh	r3, [r7, #30]
 80021d0:	8bfb      	ldrh	r3, [r7, #30]
 80021d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80021d6:	83fb      	strh	r3, [r7, #30]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	461a      	mov	r2, r3
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	441a      	add	r2, r3
 80021e6:	8bfb      	ldrh	r3, [r7, #30]
 80021e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80021fc:	88fb      	ldrh	r3, [r7, #6]
 80021fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002202:	2b00      	cmp	r3, #0
 8002204:	d11f      	bne.n	8002246 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	461a      	mov	r2, r3
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4413      	add	r3, r2
 8002214:	881b      	ldrh	r3, [r3, #0]
 8002216:	b29b      	uxth	r3, r3
 8002218:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800221c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002220:	83bb      	strh	r3, [r7, #28]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	461a      	mov	r2, r3
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	441a      	add	r2, r3
 8002230:	8bbb      	ldrh	r3, [r7, #28]
 8002232:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002236:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800223a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800223e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002242:	b29b      	uxth	r3, r3
 8002244:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002246:	8b7b      	ldrh	r3, [r7, #26]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d008      	beq.n	800225e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6818      	ldr	r0, [r3, #0]
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	6959      	ldr	r1, [r3, #20]
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	895a      	ldrh	r2, [r3, #10]
 8002258:	8b7b      	ldrh	r3, [r7, #26]
 800225a:	f003 fdb5 	bl	8005dc8 <USB_ReadPMA>
    }
  }

  return count;
 800225e:	8b7b      	ldrh	r3, [r7, #26]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3720      	adds	r7, #32
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b092      	sub	sp, #72	; 0x48
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	4613      	mov	r3, r2
 8002274:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002276:	88fb      	ldrh	r3, [r7, #6]
 8002278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 8132 	beq.w	80024e6 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800228a:	b29b      	uxth	r3, r3
 800228c:	461a      	mov	r2, r3
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	4413      	add	r3, r2
 8002296:	3302      	adds	r3, #2
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	6812      	ldr	r2, [r2, #0]
 800229e:	4413      	add	r3, r2
 80022a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022a4:	881b      	ldrh	r3, [r3, #0]
 80022a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022aa:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	699a      	ldr	r2, [r3, #24]
 80022b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d906      	bls.n	80022c4 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	699a      	ldr	r2, [r3, #24]
 80022ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80022bc:	1ad2      	subs	r2, r2, r3
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	619a      	str	r2, [r3, #24]
 80022c2:	e002      	b.n	80022ca <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	2200      	movs	r2, #0
 80022c8:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d12c      	bne.n	800232c <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	4619      	mov	r1, r3
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f005 fb68 	bl	80079ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022de:	88fb      	ldrh	r3, [r7, #6]
 80022e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 822f 	beq.w	8002748 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	461a      	mov	r2, r3
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	881b      	ldrh	r3, [r3, #0]
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002300:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002304:	827b      	strh	r3, [r7, #18]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	461a      	mov	r2, r3
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	441a      	add	r2, r3
 8002314:	8a7b      	ldrh	r3, [r7, #18]
 8002316:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800231a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800231e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002326:	b29b      	uxth	r3, r3
 8002328:	8013      	strh	r3, [r2, #0]
 800232a:	e20d      	b.n	8002748 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800232c:	88fb      	ldrh	r3, [r7, #6]
 800232e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d01f      	beq.n	8002376 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	461a      	mov	r2, r3
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4413      	add	r3, r2
 8002344:	881b      	ldrh	r3, [r3, #0]
 8002346:	b29b      	uxth	r3, r3
 8002348:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800234c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002350:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	461a      	mov	r2, r3
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	441a      	add	r2, r3
 8002360:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002362:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002366:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800236a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800236e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002372:	b29b      	uxth	r3, r3
 8002374:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800237c:	2b01      	cmp	r3, #1
 800237e:	f040 81e3 	bne.w	8002748 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	695a      	ldr	r2, [r3, #20]
 8002386:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002388:	441a      	add	r2, r3
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	69da      	ldr	r2, [r3, #28]
 8002392:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002394:	441a      	add	r2, r3
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	6a1a      	ldr	r2, [r3, #32]
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d309      	bcc.n	80023ba <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	6a1a      	ldr	r2, [r3, #32]
 80023b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b2:	1ad2      	subs	r2, r2, r3
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	621a      	str	r2, [r3, #32]
 80023b8:	e014      	b.n	80023e4 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d106      	bne.n	80023d0 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 80023c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80023c4:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80023ce:	e009      	b.n	80023e4 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	2200      	movs	r2, #0
 80023e2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	785b      	ldrb	r3, [r3, #1]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d155      	bne.n	8002498 <HAL_PCD_EP_DB_Transmit+0x230>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	61bb      	str	r3, [r7, #24]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	461a      	mov	r2, r3
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	4413      	add	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	011a      	lsls	r2, r3, #4
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	4413      	add	r3, r2
 800240e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002412:	617b      	str	r3, [r7, #20]
 8002414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002416:	2b00      	cmp	r3, #0
 8002418:	d112      	bne.n	8002440 <HAL_PCD_EP_DB_Transmit+0x1d8>
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	881b      	ldrh	r3, [r3, #0]
 800241e:	b29b      	uxth	r3, r3
 8002420:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002424:	b29a      	uxth	r2, r3
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	801a      	strh	r2, [r3, #0]
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	881b      	ldrh	r3, [r3, #0]
 800242e:	b29b      	uxth	r3, r3
 8002430:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002434:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002438:	b29a      	uxth	r2, r3
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	801a      	strh	r2, [r3, #0]
 800243e:	e047      	b.n	80024d0 <HAL_PCD_EP_DB_Transmit+0x268>
 8002440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002442:	2b3e      	cmp	r3, #62	; 0x3e
 8002444:	d811      	bhi.n	800246a <HAL_PCD_EP_DB_Transmit+0x202>
 8002446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002448:	085b      	lsrs	r3, r3, #1
 800244a:	62bb      	str	r3, [r7, #40]	; 0x28
 800244c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d002      	beq.n	800245c <HAL_PCD_EP_DB_Transmit+0x1f4>
 8002456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002458:	3301      	adds	r3, #1
 800245a:	62bb      	str	r3, [r7, #40]	; 0x28
 800245c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245e:	b29b      	uxth	r3, r3
 8002460:	029b      	lsls	r3, r3, #10
 8002462:	b29a      	uxth	r2, r3
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	801a      	strh	r2, [r3, #0]
 8002468:	e032      	b.n	80024d0 <HAL_PCD_EP_DB_Transmit+0x268>
 800246a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800246c:	095b      	lsrs	r3, r3, #5
 800246e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002472:	f003 031f 	and.w	r3, r3, #31
 8002476:	2b00      	cmp	r3, #0
 8002478:	d102      	bne.n	8002480 <HAL_PCD_EP_DB_Transmit+0x218>
 800247a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800247c:	3b01      	subs	r3, #1
 800247e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002482:	b29b      	uxth	r3, r3
 8002484:	029b      	lsls	r3, r3, #10
 8002486:	b29b      	uxth	r3, r3
 8002488:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800248c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002490:	b29a      	uxth	r2, r3
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	801a      	strh	r2, [r3, #0]
 8002496:	e01b      	b.n	80024d0 <HAL_PCD_EP_DB_Transmit+0x268>
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	785b      	ldrb	r3, [r3, #1]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d117      	bne.n	80024d0 <HAL_PCD_EP_DB_Transmit+0x268>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	623b      	str	r3, [r7, #32]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	461a      	mov	r2, r3
 80024b2:	6a3b      	ldr	r3, [r7, #32]
 80024b4:	4413      	add	r3, r2
 80024b6:	623b      	str	r3, [r7, #32]
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	011a      	lsls	r2, r3, #4
 80024be:	6a3b      	ldr	r3, [r7, #32]
 80024c0:	4413      	add	r3, r2
 80024c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80024c6:	61fb      	str	r3, [r7, #28]
 80024c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6818      	ldr	r0, [r3, #0]
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	6959      	ldr	r1, [r3, #20]
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	891a      	ldrh	r2, [r3, #8]
 80024dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024de:	b29b      	uxth	r3, r3
 80024e0:	f003 fc2e 	bl	8005d40 <USB_WritePMA>
 80024e4:	e130      	b.n	8002748 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	461a      	mov	r2, r3
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	4413      	add	r3, r2
 80024fa:	3306      	adds	r3, #6
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	6812      	ldr	r2, [r2, #0]
 8002502:	4413      	add	r3, r2
 8002504:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002508:	881b      	ldrh	r3, [r3, #0]
 800250a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800250e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	699a      	ldr	r2, [r3, #24]
 8002514:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002516:	429a      	cmp	r2, r3
 8002518:	d306      	bcc.n	8002528 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	699a      	ldr	r2, [r3, #24]
 800251e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002520:	1ad2      	subs	r2, r2, r3
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	619a      	str	r2, [r3, #24]
 8002526:	e002      	b.n	800252e <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	2200      	movs	r2, #0
 800252c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d12c      	bne.n	8002590 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	4619      	mov	r1, r3
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f005 fa36 	bl	80079ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002542:	88fb      	ldrh	r3, [r7, #6]
 8002544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002548:	2b00      	cmp	r3, #0
 800254a:	f040 80fd 	bne.w	8002748 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	461a      	mov	r2, r3
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	881b      	ldrh	r3, [r3, #0]
 800255e:	b29b      	uxth	r3, r3
 8002560:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002568:	84fb      	strh	r3, [r7, #38]	; 0x26
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	461a      	mov	r2, r3
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	441a      	add	r2, r3
 8002578:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800257a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800257e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002582:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800258a:	b29b      	uxth	r3, r3
 800258c:	8013      	strh	r3, [r2, #0]
 800258e:	e0db      	b.n	8002748 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002590:	88fb      	ldrh	r3, [r7, #6]
 8002592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d11f      	bne.n	80025da <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	461a      	mov	r2, r3
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4413      	add	r3, r2
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025b4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	461a      	mov	r2, r3
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	441a      	add	r2, r3
 80025c4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80025c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	f040 80b1 	bne.w	8002748 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	695a      	ldr	r2, [r3, #20]
 80025ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80025ec:	441a      	add	r2, r3
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	69da      	ldr	r2, [r3, #28]
 80025f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80025f8:	441a      	add	r2, r3
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	6a1a      	ldr	r2, [r3, #32]
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	429a      	cmp	r2, r3
 8002608:	d309      	bcc.n	800261e <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	6a1a      	ldr	r2, [r3, #32]
 8002614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002616:	1ad2      	subs	r2, r2, r3
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	621a      	str	r2, [r3, #32]
 800261c:	e014      	b.n	8002648 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d106      	bne.n	8002634 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8002626:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002628:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002632:	e009      	b.n	8002648 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	2200      	movs	r2, #0
 800263e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	637b      	str	r3, [r7, #52]	; 0x34
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	785b      	ldrb	r3, [r3, #1]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d155      	bne.n	8002702 <HAL_PCD_EP_DB_Transmit+0x49a>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	647b      	str	r3, [r7, #68]	; 0x44
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002664:	b29b      	uxth	r3, r3
 8002666:	461a      	mov	r2, r3
 8002668:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800266a:	4413      	add	r3, r2
 800266c:	647b      	str	r3, [r7, #68]	; 0x44
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	011a      	lsls	r2, r3, #4
 8002674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002676:	4413      	add	r3, r2
 8002678:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800267c:	643b      	str	r3, [r7, #64]	; 0x40
 800267e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002680:	2b00      	cmp	r3, #0
 8002682:	d112      	bne.n	80026aa <HAL_PCD_EP_DB_Transmit+0x442>
 8002684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	b29b      	uxth	r3, r3
 800268a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800268e:	b29a      	uxth	r2, r3
 8002690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002692:	801a      	strh	r2, [r3, #0]
 8002694:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002696:	881b      	ldrh	r3, [r3, #0]
 8002698:	b29b      	uxth	r3, r3
 800269a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800269e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026a6:	801a      	strh	r2, [r3, #0]
 80026a8:	e044      	b.n	8002734 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80026aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ac:	2b3e      	cmp	r3, #62	; 0x3e
 80026ae:	d811      	bhi.n	80026d4 <HAL_PCD_EP_DB_Transmit+0x46c>
 80026b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b2:	085b      	lsrs	r3, r3, #1
 80026b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d002      	beq.n	80026c6 <HAL_PCD_EP_DB_Transmit+0x45e>
 80026c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026c2:	3301      	adds	r3, #1
 80026c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	029b      	lsls	r3, r3, #10
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026d0:	801a      	strh	r2, [r3, #0]
 80026d2:	e02f      	b.n	8002734 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80026d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d6:	095b      	lsrs	r3, r3, #5
 80026d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026dc:	f003 031f 	and.w	r3, r3, #31
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d102      	bne.n	80026ea <HAL_PCD_EP_DB_Transmit+0x482>
 80026e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026e6:	3b01      	subs	r3, #1
 80026e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	029b      	lsls	r3, r3, #10
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026fe:	801a      	strh	r2, [r3, #0]
 8002700:	e018      	b.n	8002734 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	785b      	ldrb	r3, [r3, #1]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d114      	bne.n	8002734 <HAL_PCD_EP_DB_Transmit+0x4cc>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002712:	b29b      	uxth	r3, r3
 8002714:	461a      	mov	r2, r3
 8002716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002718:	4413      	add	r3, r2
 800271a:	637b      	str	r3, [r7, #52]	; 0x34
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	011a      	lsls	r2, r3, #4
 8002722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002724:	4413      	add	r3, r2
 8002726:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800272a:	633b      	str	r3, [r7, #48]	; 0x30
 800272c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800272e:	b29a      	uxth	r2, r3
 8002730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002732:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6818      	ldr	r0, [r3, #0]
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	6959      	ldr	r1, [r3, #20]
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	895a      	ldrh	r2, [r3, #10]
 8002740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002742:	b29b      	uxth	r3, r3
 8002744:	f003 fafc 	bl	8005d40 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	461a      	mov	r2, r3
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	881b      	ldrh	r3, [r3, #0]
 8002758:	b29b      	uxth	r3, r3
 800275a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800275e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002762:	823b      	strh	r3, [r7, #16]
 8002764:	8a3b      	ldrh	r3, [r7, #16]
 8002766:	f083 0310 	eor.w	r3, r3, #16
 800276a:	823b      	strh	r3, [r7, #16]
 800276c:	8a3b      	ldrh	r3, [r7, #16]
 800276e:	f083 0320 	eor.w	r3, r3, #32
 8002772:	823b      	strh	r3, [r7, #16]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	461a      	mov	r2, r3
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	441a      	add	r2, r3
 8002782:	8a3b      	ldrh	r3, [r7, #16]
 8002784:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002788:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800278c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002794:	b29b      	uxth	r3, r3
 8002796:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3748      	adds	r7, #72	; 0x48
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b087      	sub	sp, #28
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	60f8      	str	r0, [r7, #12]
 80027aa:	607b      	str	r3, [r7, #4]
 80027ac:	460b      	mov	r3, r1
 80027ae:	817b      	strh	r3, [r7, #10]
 80027b0:	4613      	mov	r3, r2
 80027b2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80027b4:	897b      	ldrh	r3, [r7, #10]
 80027b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00b      	beq.n	80027d8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027c0:	897b      	ldrh	r3, [r7, #10]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	1c5a      	adds	r2, r3, #1
 80027c8:	4613      	mov	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	4413      	add	r3, r2
 80027d4:	617b      	str	r3, [r7, #20]
 80027d6:	e009      	b.n	80027ec <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80027d8:	897a      	ldrh	r2, [r7, #10]
 80027da:	4613      	mov	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	4413      	add	r3, r2
 80027ea:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80027ec:	893b      	ldrh	r3, [r7, #8]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d107      	bne.n	8002802 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	2200      	movs	r2, #0
 80027f6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	80da      	strh	r2, [r3, #6]
 8002800:	e00b      	b.n	800281a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	2201      	movs	r2, #1
 8002806:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	b29a      	uxth	r2, r3
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	0c1b      	lsrs	r3, r3, #16
 8002814:	b29a      	uxth	r2, r3
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	371c      	adds	r7, #28
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr
	...

08002828 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e26c      	b.n	8002d14 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 8087 	beq.w	8002956 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002848:	4b92      	ldr	r3, [pc, #584]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f003 030c 	and.w	r3, r3, #12
 8002850:	2b04      	cmp	r3, #4
 8002852:	d00c      	beq.n	800286e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002854:	4b8f      	ldr	r3, [pc, #572]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 030c 	and.w	r3, r3, #12
 800285c:	2b08      	cmp	r3, #8
 800285e:	d112      	bne.n	8002886 <HAL_RCC_OscConfig+0x5e>
 8002860:	4b8c      	ldr	r3, [pc, #560]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800286c:	d10b      	bne.n	8002886 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800286e:	4b89      	ldr	r3, [pc, #548]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d06c      	beq.n	8002954 <HAL_RCC_OscConfig+0x12c>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d168      	bne.n	8002954 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e246      	b.n	8002d14 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800288e:	d106      	bne.n	800289e <HAL_RCC_OscConfig+0x76>
 8002890:	4b80      	ldr	r3, [pc, #512]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a7f      	ldr	r2, [pc, #508]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 8002896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800289a:	6013      	str	r3, [r2, #0]
 800289c:	e02e      	b.n	80028fc <HAL_RCC_OscConfig+0xd4>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10c      	bne.n	80028c0 <HAL_RCC_OscConfig+0x98>
 80028a6:	4b7b      	ldr	r3, [pc, #492]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a7a      	ldr	r2, [pc, #488]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80028ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	4b78      	ldr	r3, [pc, #480]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a77      	ldr	r2, [pc, #476]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80028b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	e01d      	b.n	80028fc <HAL_RCC_OscConfig+0xd4>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028c8:	d10c      	bne.n	80028e4 <HAL_RCC_OscConfig+0xbc>
 80028ca:	4b72      	ldr	r3, [pc, #456]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a71      	ldr	r2, [pc, #452]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80028d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028d4:	6013      	str	r3, [r2, #0]
 80028d6:	4b6f      	ldr	r3, [pc, #444]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a6e      	ldr	r2, [pc, #440]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80028dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e0:	6013      	str	r3, [r2, #0]
 80028e2:	e00b      	b.n	80028fc <HAL_RCC_OscConfig+0xd4>
 80028e4:	4b6b      	ldr	r3, [pc, #428]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a6a      	ldr	r2, [pc, #424]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80028ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ee:	6013      	str	r3, [r2, #0]
 80028f0:	4b68      	ldr	r3, [pc, #416]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a67      	ldr	r2, [pc, #412]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80028f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d013      	beq.n	800292c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002904:	f7fe f930 	bl	8000b68 <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800290c:	f7fe f92c 	bl	8000b68 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b64      	cmp	r3, #100	; 0x64
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e1fa      	b.n	8002d14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291e:	4b5d      	ldr	r3, [pc, #372]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d0f0      	beq.n	800290c <HAL_RCC_OscConfig+0xe4>
 800292a:	e014      	b.n	8002956 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292c:	f7fe f91c 	bl	8000b68 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002934:	f7fe f918 	bl	8000b68 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b64      	cmp	r3, #100	; 0x64
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e1e6      	b.n	8002d14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002946:	4b53      	ldr	r3, [pc, #332]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f0      	bne.n	8002934 <HAL_RCC_OscConfig+0x10c>
 8002952:	e000      	b.n	8002956 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d063      	beq.n	8002a2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002962:	4b4c      	ldr	r3, [pc, #304]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f003 030c 	and.w	r3, r3, #12
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00b      	beq.n	8002986 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800296e:	4b49      	ldr	r3, [pc, #292]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f003 030c 	and.w	r3, r3, #12
 8002976:	2b08      	cmp	r3, #8
 8002978:	d11c      	bne.n	80029b4 <HAL_RCC_OscConfig+0x18c>
 800297a:	4b46      	ldr	r3, [pc, #280]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d116      	bne.n	80029b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002986:	4b43      	ldr	r3, [pc, #268]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d005      	beq.n	800299e <HAL_RCC_OscConfig+0x176>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d001      	beq.n	800299e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e1ba      	b.n	8002d14 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299e:	4b3d      	ldr	r3, [pc, #244]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	4939      	ldr	r1, [pc, #228]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029b2:	e03a      	b.n	8002a2a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d020      	beq.n	80029fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029bc:	4b36      	ldr	r3, [pc, #216]	; (8002a98 <HAL_RCC_OscConfig+0x270>)
 80029be:	2201      	movs	r2, #1
 80029c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c2:	f7fe f8d1 	bl	8000b68 <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c8:	e008      	b.n	80029dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ca:	f7fe f8cd 	bl	8000b68 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e19b      	b.n	8002d14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029dc:	4b2d      	ldr	r3, [pc, #180]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0f0      	beq.n	80029ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e8:	4b2a      	ldr	r3, [pc, #168]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	4927      	ldr	r1, [pc, #156]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	600b      	str	r3, [r1, #0]
 80029fc:	e015      	b.n	8002a2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029fe:	4b26      	ldr	r3, [pc, #152]	; (8002a98 <HAL_RCC_OscConfig+0x270>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a04:	f7fe f8b0 	bl	8000b68 <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a0c:	f7fe f8ac 	bl	8000b68 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e17a      	b.n	8002d14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a1e:	4b1d      	ldr	r3, [pc, #116]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1f0      	bne.n	8002a0c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d03a      	beq.n	8002aac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d019      	beq.n	8002a72 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a3e:	4b17      	ldr	r3, [pc, #92]	; (8002a9c <HAL_RCC_OscConfig+0x274>)
 8002a40:	2201      	movs	r2, #1
 8002a42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a44:	f7fe f890 	bl	8000b68 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a4c:	f7fe f88c 	bl	8000b68 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e15a      	b.n	8002d14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a5e:	4b0d      	ldr	r3, [pc, #52]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0f0      	beq.n	8002a4c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a6a:	2001      	movs	r0, #1
 8002a6c:	f000 fab2 	bl	8002fd4 <RCC_Delay>
 8002a70:	e01c      	b.n	8002aac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a72:	4b0a      	ldr	r3, [pc, #40]	; (8002a9c <HAL_RCC_OscConfig+0x274>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a78:	f7fe f876 	bl	8000b68 <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a7e:	e00f      	b.n	8002aa0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a80:	f7fe f872 	bl	8000b68 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d908      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e140      	b.n	8002d14 <HAL_RCC_OscConfig+0x4ec>
 8002a92:	bf00      	nop
 8002a94:	40021000 	.word	0x40021000
 8002a98:	42420000 	.word	0x42420000
 8002a9c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa0:	4b9e      	ldr	r3, [pc, #632]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1e9      	bne.n	8002a80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 80a6 	beq.w	8002c06 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aba:	2300      	movs	r3, #0
 8002abc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002abe:	4b97      	ldr	r3, [pc, #604]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10d      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aca:	4b94      	ldr	r3, [pc, #592]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	4a93      	ldr	r2, [pc, #588]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ad4:	61d3      	str	r3, [r2, #28]
 8002ad6:	4b91      	ldr	r3, [pc, #580]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ade:	60bb      	str	r3, [r7, #8]
 8002ae0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae6:	4b8e      	ldr	r3, [pc, #568]	; (8002d20 <HAL_RCC_OscConfig+0x4f8>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d118      	bne.n	8002b24 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002af2:	4b8b      	ldr	r3, [pc, #556]	; (8002d20 <HAL_RCC_OscConfig+0x4f8>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a8a      	ldr	r2, [pc, #552]	; (8002d20 <HAL_RCC_OscConfig+0x4f8>)
 8002af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002afc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002afe:	f7fe f833 	bl	8000b68 <HAL_GetTick>
 8002b02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b04:	e008      	b.n	8002b18 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b06:	f7fe f82f 	bl	8000b68 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b64      	cmp	r3, #100	; 0x64
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e0fd      	b.n	8002d14 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b18:	4b81      	ldr	r3, [pc, #516]	; (8002d20 <HAL_RCC_OscConfig+0x4f8>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d0f0      	beq.n	8002b06 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d106      	bne.n	8002b3a <HAL_RCC_OscConfig+0x312>
 8002b2c:	4b7b      	ldr	r3, [pc, #492]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	4a7a      	ldr	r2, [pc, #488]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002b32:	f043 0301 	orr.w	r3, r3, #1
 8002b36:	6213      	str	r3, [r2, #32]
 8002b38:	e02d      	b.n	8002b96 <HAL_RCC_OscConfig+0x36e>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10c      	bne.n	8002b5c <HAL_RCC_OscConfig+0x334>
 8002b42:	4b76      	ldr	r3, [pc, #472]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	4a75      	ldr	r2, [pc, #468]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002b48:	f023 0301 	bic.w	r3, r3, #1
 8002b4c:	6213      	str	r3, [r2, #32]
 8002b4e:	4b73      	ldr	r3, [pc, #460]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	4a72      	ldr	r2, [pc, #456]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002b54:	f023 0304 	bic.w	r3, r3, #4
 8002b58:	6213      	str	r3, [r2, #32]
 8002b5a:	e01c      	b.n	8002b96 <HAL_RCC_OscConfig+0x36e>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	2b05      	cmp	r3, #5
 8002b62:	d10c      	bne.n	8002b7e <HAL_RCC_OscConfig+0x356>
 8002b64:	4b6d      	ldr	r3, [pc, #436]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	4a6c      	ldr	r2, [pc, #432]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002b6a:	f043 0304 	orr.w	r3, r3, #4
 8002b6e:	6213      	str	r3, [r2, #32]
 8002b70:	4b6a      	ldr	r3, [pc, #424]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	4a69      	ldr	r2, [pc, #420]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002b76:	f043 0301 	orr.w	r3, r3, #1
 8002b7a:	6213      	str	r3, [r2, #32]
 8002b7c:	e00b      	b.n	8002b96 <HAL_RCC_OscConfig+0x36e>
 8002b7e:	4b67      	ldr	r3, [pc, #412]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	4a66      	ldr	r2, [pc, #408]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002b84:	f023 0301 	bic.w	r3, r3, #1
 8002b88:	6213      	str	r3, [r2, #32]
 8002b8a:	4b64      	ldr	r3, [pc, #400]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	4a63      	ldr	r2, [pc, #396]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002b90:	f023 0304 	bic.w	r3, r3, #4
 8002b94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d015      	beq.n	8002bca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b9e:	f7fd ffe3 	bl	8000b68 <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba4:	e00a      	b.n	8002bbc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba6:	f7fd ffdf 	bl	8000b68 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e0ab      	b.n	8002d14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bbc:	4b57      	ldr	r3, [pc, #348]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0ee      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x37e>
 8002bc8:	e014      	b.n	8002bf4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bca:	f7fd ffcd 	bl	8000b68 <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd0:	e00a      	b.n	8002be8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bd2:	f7fd ffc9 	bl	8000b68 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e095      	b.n	8002d14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002be8:	4b4c      	ldr	r3, [pc, #304]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1ee      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bf4:	7dfb      	ldrb	r3, [r7, #23]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d105      	bne.n	8002c06 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bfa:	4b48      	ldr	r3, [pc, #288]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	4a47      	ldr	r2, [pc, #284]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002c00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c04:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 8081 	beq.w	8002d12 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c10:	4b42      	ldr	r3, [pc, #264]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f003 030c 	and.w	r3, r3, #12
 8002c18:	2b08      	cmp	r3, #8
 8002c1a:	d061      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	69db      	ldr	r3, [r3, #28]
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d146      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c24:	4b3f      	ldr	r3, [pc, #252]	; (8002d24 <HAL_RCC_OscConfig+0x4fc>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2a:	f7fd ff9d 	bl	8000b68 <HAL_GetTick>
 8002c2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c30:	e008      	b.n	8002c44 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c32:	f7fd ff99 	bl	8000b68 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e067      	b.n	8002d14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c44:	4b35      	ldr	r3, [pc, #212]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1f0      	bne.n	8002c32 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c58:	d108      	bne.n	8002c6c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c5a:	4b30      	ldr	r3, [pc, #192]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	492d      	ldr	r1, [pc, #180]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c6c:	4b2b      	ldr	r3, [pc, #172]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a19      	ldr	r1, [r3, #32]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	430b      	orrs	r3, r1
 8002c7e:	4927      	ldr	r1, [pc, #156]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c84:	4b27      	ldr	r3, [pc, #156]	; (8002d24 <HAL_RCC_OscConfig+0x4fc>)
 8002c86:	2201      	movs	r2, #1
 8002c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8a:	f7fd ff6d 	bl	8000b68 <HAL_GetTick>
 8002c8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c90:	e008      	b.n	8002ca4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c92:	f7fd ff69 	bl	8000b68 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e037      	b.n	8002d14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ca4:	4b1d      	ldr	r3, [pc, #116]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d0f0      	beq.n	8002c92 <HAL_RCC_OscConfig+0x46a>
 8002cb0:	e02f      	b.n	8002d12 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cb2:	4b1c      	ldr	r3, [pc, #112]	; (8002d24 <HAL_RCC_OscConfig+0x4fc>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb8:	f7fd ff56 	bl	8000b68 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc0:	f7fd ff52 	bl	8000b68 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e020      	b.n	8002d14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cd2:	4b12      	ldr	r3, [pc, #72]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1f0      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x498>
 8002cde:	e018      	b.n	8002d12 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d101      	bne.n	8002cec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e013      	b.n	8002d14 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cec:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d106      	bne.n	8002d0e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d001      	beq.n	8002d12 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3718      	adds	r7, #24
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	40007000 	.word	0x40007000
 8002d24:	42420060 	.word	0x42420060

08002d28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e0d0      	b.n	8002ede <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d3c:	4b6a      	ldr	r3, [pc, #424]	; (8002ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d910      	bls.n	8002d6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d4a:	4b67      	ldr	r3, [pc, #412]	; (8002ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f023 0207 	bic.w	r2, r3, #7
 8002d52:	4965      	ldr	r1, [pc, #404]	; (8002ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d5a:	4b63      	ldr	r3, [pc, #396]	; (8002ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0307 	and.w	r3, r3, #7
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d001      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e0b8      	b.n	8002ede <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d020      	beq.n	8002dba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d005      	beq.n	8002d90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d84:	4b59      	ldr	r3, [pc, #356]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	4a58      	ldr	r2, [pc, #352]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002d8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0308 	and.w	r3, r3, #8
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d005      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d9c:	4b53      	ldr	r3, [pc, #332]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	4a52      	ldr	r2, [pc, #328]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002da2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002da6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002da8:	4b50      	ldr	r3, [pc, #320]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	494d      	ldr	r1, [pc, #308]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d040      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d107      	bne.n	8002dde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dce:	4b47      	ldr	r3, [pc, #284]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d115      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e07f      	b.n	8002ede <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d107      	bne.n	8002df6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002de6:	4b41      	ldr	r3, [pc, #260]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d109      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e073      	b.n	8002ede <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df6:	4b3d      	ldr	r3, [pc, #244]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e06b      	b.n	8002ede <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e06:	4b39      	ldr	r3, [pc, #228]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f023 0203 	bic.w	r2, r3, #3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	4936      	ldr	r1, [pc, #216]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e18:	f7fd fea6 	bl	8000b68 <HAL_GetTick>
 8002e1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e1e:	e00a      	b.n	8002e36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e20:	f7fd fea2 	bl	8000b68 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e053      	b.n	8002ede <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e36:	4b2d      	ldr	r3, [pc, #180]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f003 020c 	and.w	r2, r3, #12
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d1eb      	bne.n	8002e20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e48:	4b27      	ldr	r3, [pc, #156]	; (8002ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0307 	and.w	r3, r3, #7
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d210      	bcs.n	8002e78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e56:	4b24      	ldr	r3, [pc, #144]	; (8002ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f023 0207 	bic.w	r2, r3, #7
 8002e5e:	4922      	ldr	r1, [pc, #136]	; (8002ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e66:	4b20      	ldr	r3, [pc, #128]	; (8002ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0307 	and.w	r3, r3, #7
 8002e6e:	683a      	ldr	r2, [r7, #0]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d001      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e032      	b.n	8002ede <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d008      	beq.n	8002e96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e84:	4b19      	ldr	r3, [pc, #100]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	4916      	ldr	r1, [pc, #88]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0308 	and.w	r3, r3, #8
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d009      	beq.n	8002eb6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ea2:	4b12      	ldr	r3, [pc, #72]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	490e      	ldr	r1, [pc, #56]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002eb6:	f000 f821 	bl	8002efc <HAL_RCC_GetSysClockFreq>
 8002eba:	4601      	mov	r1, r0
 8002ebc:	4b0b      	ldr	r3, [pc, #44]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	091b      	lsrs	r3, r3, #4
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	4a0a      	ldr	r2, [pc, #40]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ec8:	5cd3      	ldrb	r3, [r2, r3]
 8002eca:	fa21 f303 	lsr.w	r3, r1, r3
 8002ece:	4a09      	ldr	r2, [pc, #36]	; (8002ef4 <HAL_RCC_ClockConfig+0x1cc>)
 8002ed0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ed2:	4b09      	ldr	r3, [pc, #36]	; (8002ef8 <HAL_RCC_ClockConfig+0x1d0>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fd fe04 	bl	8000ae4 <HAL_InitTick>

  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40022000 	.word	0x40022000
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	08007f84 	.word	0x08007f84
 8002ef4:	20000000 	.word	0x20000000
 8002ef8:	20000004 	.word	0x20000004

08002efc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002efc:	b490      	push	{r4, r7}
 8002efe:	b08a      	sub	sp, #40	; 0x28
 8002f00:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002f02:	4b2a      	ldr	r3, [pc, #168]	; (8002fac <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f04:	1d3c      	adds	r4, r7, #4
 8002f06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002f0c:	4b28      	ldr	r3, [pc, #160]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f0e:	881b      	ldrh	r3, [r3, #0]
 8002f10:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f12:	2300      	movs	r3, #0
 8002f14:	61fb      	str	r3, [r7, #28]
 8002f16:	2300      	movs	r3, #0
 8002f18:	61bb      	str	r3, [r7, #24]
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f1e:	2300      	movs	r3, #0
 8002f20:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f26:	4b23      	ldr	r3, [pc, #140]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	f003 030c 	and.w	r3, r3, #12
 8002f32:	2b04      	cmp	r3, #4
 8002f34:	d002      	beq.n	8002f3c <HAL_RCC_GetSysClockFreq+0x40>
 8002f36:	2b08      	cmp	r3, #8
 8002f38:	d003      	beq.n	8002f42 <HAL_RCC_GetSysClockFreq+0x46>
 8002f3a:	e02d      	b.n	8002f98 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f3c:	4b1e      	ldr	r3, [pc, #120]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f3e:	623b      	str	r3, [r7, #32]
      break;
 8002f40:	e02d      	b.n	8002f9e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	0c9b      	lsrs	r3, r3, #18
 8002f46:	f003 030f 	and.w	r3, r3, #15
 8002f4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f4e:	4413      	add	r3, r2
 8002f50:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002f54:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d013      	beq.n	8002f88 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f60:	4b14      	ldr	r3, [pc, #80]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	0c5b      	lsrs	r3, r3, #17
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f6e:	4413      	add	r3, r2
 8002f70:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002f74:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	4a0f      	ldr	r2, [pc, #60]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f7a:	fb02 f203 	mul.w	r2, r2, r3
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f84:	627b      	str	r3, [r7, #36]	; 0x24
 8002f86:	e004      	b.n	8002f92 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	4a0c      	ldr	r2, [pc, #48]	; (8002fbc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f8c:	fb02 f303 	mul.w	r3, r2, r3
 8002f90:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f94:	623b      	str	r3, [r7, #32]
      break;
 8002f96:	e002      	b.n	8002f9e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f98:	4b07      	ldr	r3, [pc, #28]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f9a:	623b      	str	r3, [r7, #32]
      break;
 8002f9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f9e:	6a3b      	ldr	r3, [r7, #32]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3728      	adds	r7, #40	; 0x28
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bc90      	pop	{r4, r7}
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	08007ee8 	.word	0x08007ee8
 8002fb0:	08007ef8 	.word	0x08007ef8
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	007a1200 	.word	0x007a1200
 8002fbc:	003d0900 	.word	0x003d0900

08002fc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fc4:	4b02      	ldr	r3, [pc, #8]	; (8002fd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr
 8002fd0:	20000000 	.word	0x20000000

08002fd4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002fdc:	4b0a      	ldr	r3, [pc, #40]	; (8003008 <RCC_Delay+0x34>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a0a      	ldr	r2, [pc, #40]	; (800300c <RCC_Delay+0x38>)
 8002fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe6:	0a5b      	lsrs	r3, r3, #9
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	fb02 f303 	mul.w	r3, r2, r3
 8002fee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ff0:	bf00      	nop
  }
  while (Delay --);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	1e5a      	subs	r2, r3, #1
 8002ff6:	60fa      	str	r2, [r7, #12]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1f9      	bne.n	8002ff0 <RCC_Delay+0x1c>
}
 8002ffc:	bf00      	nop
 8002ffe:	3714      	adds	r7, #20
 8003000:	46bd      	mov	sp, r7
 8003002:	bc80      	pop	{r7}
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	20000000 	.word	0x20000000
 800300c:	10624dd3 	.word	0x10624dd3

08003010 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003018:	2300      	movs	r3, #0
 800301a:	613b      	str	r3, [r7, #16]
 800301c:	2300      	movs	r3, #0
 800301e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b00      	cmp	r3, #0
 800302a:	d07d      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800302c:	2300      	movs	r3, #0
 800302e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003030:	4b4f      	ldr	r3, [pc, #316]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003032:	69db      	ldr	r3, [r3, #28]
 8003034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d10d      	bne.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800303c:	4b4c      	ldr	r3, [pc, #304]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	4a4b      	ldr	r2, [pc, #300]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003042:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003046:	61d3      	str	r3, [r2, #28]
 8003048:	4b49      	ldr	r3, [pc, #292]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800304a:	69db      	ldr	r3, [r3, #28]
 800304c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003050:	60bb      	str	r3, [r7, #8]
 8003052:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003054:	2301      	movs	r3, #1
 8003056:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003058:	4b46      	ldr	r3, [pc, #280]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003060:	2b00      	cmp	r3, #0
 8003062:	d118      	bne.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003064:	4b43      	ldr	r3, [pc, #268]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a42      	ldr	r2, [pc, #264]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800306a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800306e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003070:	f7fd fd7a 	bl	8000b68 <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003076:	e008      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003078:	f7fd fd76 	bl	8000b68 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b64      	cmp	r3, #100	; 0x64
 8003084:	d901      	bls.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e06d      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800308a:	4b3a      	ldr	r3, [pc, #232]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003092:	2b00      	cmp	r3, #0
 8003094:	d0f0      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003096:	4b36      	ldr	r3, [pc, #216]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800309e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d02e      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d027      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030b4:	4b2e      	ldr	r3, [pc, #184]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030bc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030be:	4b2e      	ldr	r3, [pc, #184]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80030c0:	2201      	movs	r2, #1
 80030c2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030c4:	4b2c      	ldr	r3, [pc, #176]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80030ca:	4a29      	ldr	r2, [pc, #164]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d014      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030da:	f7fd fd45 	bl	8000b68 <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e0:	e00a      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030e2:	f7fd fd41 	bl	8000b68 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e036      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030f8:	4b1d      	ldr	r3, [pc, #116]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d0ee      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003104:	4b1a      	ldr	r3, [pc, #104]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	4917      	ldr	r1, [pc, #92]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003112:	4313      	orrs	r3, r2
 8003114:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003116:	7dfb      	ldrb	r3, [r7, #23]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d105      	bne.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800311c:	4b14      	ldr	r3, [pc, #80]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	4a13      	ldr	r2, [pc, #76]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003122:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003126:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d008      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003134:	4b0e      	ldr	r3, [pc, #56]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	490b      	ldr	r1, [pc, #44]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003142:	4313      	orrs	r3, r2
 8003144:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0310 	and.w	r3, r3, #16
 800314e:	2b00      	cmp	r3, #0
 8003150:	d008      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003152:	4b07      	ldr	r3, [pc, #28]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	4904      	ldr	r1, [pc, #16]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003160:	4313      	orrs	r3, r2
 8003162:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3718      	adds	r7, #24
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	40021000 	.word	0x40021000
 8003174:	40007000 	.word	0x40007000
 8003178:	42420440 	.word	0x42420440

0800317c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e041      	b.n	8003212 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d106      	bne.n	80031a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f7fd fbc6 	bl	8000934 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2202      	movs	r2, #2
 80031ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3304      	adds	r3, #4
 80031b8:	4619      	mov	r1, r3
 80031ba:	4610      	mov	r0, r2
 80031bc:	f000 fa9e 	bl	80036fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b082      	sub	sp, #8
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e041      	b.n	80032b0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b00      	cmp	r3, #0
 8003236:	d106      	bne.n	8003246 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 f839 	bl	80032b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2202      	movs	r2, #2
 800324a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	3304      	adds	r3, #4
 8003256:	4619      	mov	r1, r3
 8003258:	4610      	mov	r0, r2
 800325a:	f000 fa4f 	bl	80036fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3708      	adds	r7, #8
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bc80      	pop	{r7}
 80032c8:	4770      	bx	lr
	...

080032cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d109      	bne.n	80032f0 <HAL_TIM_PWM_Start+0x24>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	bf14      	ite	ne
 80032e8:	2301      	movne	r3, #1
 80032ea:	2300      	moveq	r3, #0
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	e022      	b.n	8003336 <HAL_TIM_PWM_Start+0x6a>
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d109      	bne.n	800330a <HAL_TIM_PWM_Start+0x3e>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b01      	cmp	r3, #1
 8003300:	bf14      	ite	ne
 8003302:	2301      	movne	r3, #1
 8003304:	2300      	moveq	r3, #0
 8003306:	b2db      	uxtb	r3, r3
 8003308:	e015      	b.n	8003336 <HAL_TIM_PWM_Start+0x6a>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	2b08      	cmp	r3, #8
 800330e:	d109      	bne.n	8003324 <HAL_TIM_PWM_Start+0x58>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b01      	cmp	r3, #1
 800331a:	bf14      	ite	ne
 800331c:	2301      	movne	r3, #1
 800331e:	2300      	moveq	r3, #0
 8003320:	b2db      	uxtb	r3, r3
 8003322:	e008      	b.n	8003336 <HAL_TIM_PWM_Start+0x6a>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b01      	cmp	r3, #1
 800332e:	bf14      	ite	ne
 8003330:	2301      	movne	r3, #1
 8003332:	2300      	moveq	r3, #0
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e05e      	b.n	80033fc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d104      	bne.n	800334e <HAL_TIM_PWM_Start+0x82>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2202      	movs	r2, #2
 8003348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800334c:	e013      	b.n	8003376 <HAL_TIM_PWM_Start+0xaa>
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	2b04      	cmp	r3, #4
 8003352:	d104      	bne.n	800335e <HAL_TIM_PWM_Start+0x92>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2202      	movs	r2, #2
 8003358:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800335c:	e00b      	b.n	8003376 <HAL_TIM_PWM_Start+0xaa>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b08      	cmp	r3, #8
 8003362:	d104      	bne.n	800336e <HAL_TIM_PWM_Start+0xa2>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2202      	movs	r2, #2
 8003368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800336c:	e003      	b.n	8003376 <HAL_TIM_PWM_Start+0xaa>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2202      	movs	r2, #2
 8003372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2201      	movs	r2, #1
 800337c:	6839      	ldr	r1, [r7, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f000 fc3c 	bl	8003bfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a1e      	ldr	r2, [pc, #120]	; (8003404 <HAL_TIM_PWM_Start+0x138>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d107      	bne.n	800339e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800339c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a18      	ldr	r2, [pc, #96]	; (8003404 <HAL_TIM_PWM_Start+0x138>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d00e      	beq.n	80033c6 <HAL_TIM_PWM_Start+0xfa>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033b0:	d009      	beq.n	80033c6 <HAL_TIM_PWM_Start+0xfa>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a14      	ldr	r2, [pc, #80]	; (8003408 <HAL_TIM_PWM_Start+0x13c>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d004      	beq.n	80033c6 <HAL_TIM_PWM_Start+0xfa>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a12      	ldr	r2, [pc, #72]	; (800340c <HAL_TIM_PWM_Start+0x140>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d111      	bne.n	80033ea <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2b06      	cmp	r3, #6
 80033d6:	d010      	beq.n	80033fa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f042 0201 	orr.w	r2, r2, #1
 80033e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033e8:	e007      	b.n	80033fa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f042 0201 	orr.w	r2, r2, #1
 80033f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40012c00 	.word	0x40012c00
 8003408:	40000400 	.word	0x40000400
 800340c:	40000800 	.word	0x40000800

08003410 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003422:	2b01      	cmp	r3, #1
 8003424:	d101      	bne.n	800342a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003426:	2302      	movs	r3, #2
 8003428:	e0ac      	b.n	8003584 <HAL_TIM_PWM_ConfigChannel+0x174>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b0c      	cmp	r3, #12
 8003436:	f200 809f 	bhi.w	8003578 <HAL_TIM_PWM_ConfigChannel+0x168>
 800343a:	a201      	add	r2, pc, #4	; (adr r2, 8003440 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800343c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003440:	08003475 	.word	0x08003475
 8003444:	08003579 	.word	0x08003579
 8003448:	08003579 	.word	0x08003579
 800344c:	08003579 	.word	0x08003579
 8003450:	080034b5 	.word	0x080034b5
 8003454:	08003579 	.word	0x08003579
 8003458:	08003579 	.word	0x08003579
 800345c:	08003579 	.word	0x08003579
 8003460:	080034f7 	.word	0x080034f7
 8003464:	08003579 	.word	0x08003579
 8003468:	08003579 	.word	0x08003579
 800346c:	08003579 	.word	0x08003579
 8003470:	08003537 	.word	0x08003537
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68b9      	ldr	r1, [r7, #8]
 800347a:	4618      	mov	r0, r3
 800347c:	f000 f9a0 	bl	80037c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	699a      	ldr	r2, [r3, #24]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f042 0208 	orr.w	r2, r2, #8
 800348e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	699a      	ldr	r2, [r3, #24]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 0204 	bic.w	r2, r2, #4
 800349e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6999      	ldr	r1, [r3, #24]
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	691a      	ldr	r2, [r3, #16]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	619a      	str	r2, [r3, #24]
      break;
 80034b2:	e062      	b.n	800357a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68b9      	ldr	r1, [r7, #8]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 f9e6 	bl	800388c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	699a      	ldr	r2, [r3, #24]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	699a      	ldr	r2, [r3, #24]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6999      	ldr	r1, [r3, #24]
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	021a      	lsls	r2, r3, #8
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	430a      	orrs	r2, r1
 80034f2:	619a      	str	r2, [r3, #24]
      break;
 80034f4:	e041      	b.n	800357a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68b9      	ldr	r1, [r7, #8]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f000 fa2f 	bl	8003960 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	69da      	ldr	r2, [r3, #28]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f042 0208 	orr.w	r2, r2, #8
 8003510:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	69da      	ldr	r2, [r3, #28]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0204 	bic.w	r2, r2, #4
 8003520:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	69d9      	ldr	r1, [r3, #28]
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	691a      	ldr	r2, [r3, #16]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	430a      	orrs	r2, r1
 8003532:	61da      	str	r2, [r3, #28]
      break;
 8003534:	e021      	b.n	800357a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68b9      	ldr	r1, [r7, #8]
 800353c:	4618      	mov	r0, r3
 800353e:	f000 fa79 	bl	8003a34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	69da      	ldr	r2, [r3, #28]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003550:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	69da      	ldr	r2, [r3, #28]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003560:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	69d9      	ldr	r1, [r3, #28]
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	021a      	lsls	r2, r3, #8
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	61da      	str	r2, [r3, #28]
      break;
 8003576:	e000      	b.n	800357a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003578:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800359c:	2b01      	cmp	r3, #1
 800359e:	d101      	bne.n	80035a4 <HAL_TIM_ConfigClockSource+0x18>
 80035a0:	2302      	movs	r3, #2
 80035a2:	e0a6      	b.n	80036f2 <HAL_TIM_ConfigClockSource+0x166>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2b40      	cmp	r3, #64	; 0x40
 80035da:	d067      	beq.n	80036ac <HAL_TIM_ConfigClockSource+0x120>
 80035dc:	2b40      	cmp	r3, #64	; 0x40
 80035de:	d80b      	bhi.n	80035f8 <HAL_TIM_ConfigClockSource+0x6c>
 80035e0:	2b10      	cmp	r3, #16
 80035e2:	d073      	beq.n	80036cc <HAL_TIM_ConfigClockSource+0x140>
 80035e4:	2b10      	cmp	r3, #16
 80035e6:	d802      	bhi.n	80035ee <HAL_TIM_ConfigClockSource+0x62>
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d06f      	beq.n	80036cc <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80035ec:	e078      	b.n	80036e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80035ee:	2b20      	cmp	r3, #32
 80035f0:	d06c      	beq.n	80036cc <HAL_TIM_ConfigClockSource+0x140>
 80035f2:	2b30      	cmp	r3, #48	; 0x30
 80035f4:	d06a      	beq.n	80036cc <HAL_TIM_ConfigClockSource+0x140>
      break;
 80035f6:	e073      	b.n	80036e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80035f8:	2b70      	cmp	r3, #112	; 0x70
 80035fa:	d00d      	beq.n	8003618 <HAL_TIM_ConfigClockSource+0x8c>
 80035fc:	2b70      	cmp	r3, #112	; 0x70
 80035fe:	d804      	bhi.n	800360a <HAL_TIM_ConfigClockSource+0x7e>
 8003600:	2b50      	cmp	r3, #80	; 0x50
 8003602:	d033      	beq.n	800366c <HAL_TIM_ConfigClockSource+0xe0>
 8003604:	2b60      	cmp	r3, #96	; 0x60
 8003606:	d041      	beq.n	800368c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003608:	e06a      	b.n	80036e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800360a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800360e:	d066      	beq.n	80036de <HAL_TIM_ConfigClockSource+0x152>
 8003610:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003614:	d017      	beq.n	8003646 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003616:	e063      	b.n	80036e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6818      	ldr	r0, [r3, #0]
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	6899      	ldr	r1, [r3, #8]
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	f000 fac9 	bl	8003bbe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800363a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	609a      	str	r2, [r3, #8]
      break;
 8003644:	e04c      	b.n	80036e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6818      	ldr	r0, [r3, #0]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	6899      	ldr	r1, [r3, #8]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	f000 fab2 	bl	8003bbe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003668:	609a      	str	r2, [r3, #8]
      break;
 800366a:	e039      	b.n	80036e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6818      	ldr	r0, [r3, #0]
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	6859      	ldr	r1, [r3, #4]
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	461a      	mov	r2, r3
 800367a:	f000 fa29 	bl	8003ad0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2150      	movs	r1, #80	; 0x50
 8003684:	4618      	mov	r0, r3
 8003686:	f000 fa80 	bl	8003b8a <TIM_ITRx_SetConfig>
      break;
 800368a:	e029      	b.n	80036e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6818      	ldr	r0, [r3, #0]
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	6859      	ldr	r1, [r3, #4]
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	461a      	mov	r2, r3
 800369a:	f000 fa47 	bl	8003b2c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2160      	movs	r1, #96	; 0x60
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 fa70 	bl	8003b8a <TIM_ITRx_SetConfig>
      break;
 80036aa:	e019      	b.n	80036e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6818      	ldr	r0, [r3, #0]
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	6859      	ldr	r1, [r3, #4]
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	461a      	mov	r2, r3
 80036ba:	f000 fa09 	bl	8003ad0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2140      	movs	r1, #64	; 0x40
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 fa60 	bl	8003b8a <TIM_ITRx_SetConfig>
      break;
 80036ca:	e009      	b.n	80036e0 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4619      	mov	r1, r3
 80036d6:	4610      	mov	r0, r2
 80036d8:	f000 fa57 	bl	8003b8a <TIM_ITRx_SetConfig>
        break;
 80036dc:	e000      	b.n	80036e0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80036de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
	...

080036fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a29      	ldr	r2, [pc, #164]	; (80037b4 <TIM_Base_SetConfig+0xb8>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d00b      	beq.n	800372c <TIM_Base_SetConfig+0x30>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800371a:	d007      	beq.n	800372c <TIM_Base_SetConfig+0x30>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a26      	ldr	r2, [pc, #152]	; (80037b8 <TIM_Base_SetConfig+0xbc>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d003      	beq.n	800372c <TIM_Base_SetConfig+0x30>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a25      	ldr	r2, [pc, #148]	; (80037bc <TIM_Base_SetConfig+0xc0>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d108      	bne.n	800373e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003732:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	4313      	orrs	r3, r2
 800373c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a1c      	ldr	r2, [pc, #112]	; (80037b4 <TIM_Base_SetConfig+0xb8>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d00b      	beq.n	800375e <TIM_Base_SetConfig+0x62>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800374c:	d007      	beq.n	800375e <TIM_Base_SetConfig+0x62>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a19      	ldr	r2, [pc, #100]	; (80037b8 <TIM_Base_SetConfig+0xbc>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d003      	beq.n	800375e <TIM_Base_SetConfig+0x62>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a18      	ldr	r2, [pc, #96]	; (80037bc <TIM_Base_SetConfig+0xc0>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d108      	bne.n	8003770 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003764:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	4313      	orrs	r3, r2
 800376e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	4313      	orrs	r3, r2
 800377c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a07      	ldr	r2, [pc, #28]	; (80037b4 <TIM_Base_SetConfig+0xb8>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d103      	bne.n	80037a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	691a      	ldr	r2, [r3, #16]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	615a      	str	r2, [r3, #20]
}
 80037aa:	bf00      	nop
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bc80      	pop	{r7}
 80037b2:	4770      	bx	lr
 80037b4:	40012c00 	.word	0x40012c00
 80037b8:	40000400 	.word	0x40000400
 80037bc:	40000800 	.word	0x40000800

080037c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b087      	sub	sp, #28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	f023 0201 	bic.w	r2, r3, #1
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f023 0303 	bic.w	r3, r3, #3
 80037f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	4313      	orrs	r3, r2
 8003800:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	f023 0302 	bic.w	r3, r3, #2
 8003808:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	4313      	orrs	r3, r2
 8003812:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a1c      	ldr	r2, [pc, #112]	; (8003888 <TIM_OC1_SetConfig+0xc8>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d10c      	bne.n	8003836 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	f023 0308 	bic.w	r3, r3, #8
 8003822:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	4313      	orrs	r3, r2
 800382c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f023 0304 	bic.w	r3, r3, #4
 8003834:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a13      	ldr	r2, [pc, #76]	; (8003888 <TIM_OC1_SetConfig+0xc8>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d111      	bne.n	8003862 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003844:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800384c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	4313      	orrs	r3, r2
 8003856:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	4313      	orrs	r3, r2
 8003860:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	621a      	str	r2, [r3, #32]
}
 800387c:	bf00      	nop
 800387e:	371c      	adds	r7, #28
 8003880:	46bd      	mov	sp, r7
 8003882:	bc80      	pop	{r7}
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	40012c00 	.word	0x40012c00

0800388c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800388c:	b480      	push	{r7}
 800388e:	b087      	sub	sp, #28
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	f023 0210 	bic.w	r2, r3, #16
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	021b      	lsls	r3, r3, #8
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	f023 0320 	bic.w	r3, r3, #32
 80038d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	011b      	lsls	r3, r3, #4
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a1d      	ldr	r2, [pc, #116]	; (800395c <TIM_OC2_SetConfig+0xd0>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d10d      	bne.n	8003908 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	011b      	lsls	r3, r3, #4
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003906:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a14      	ldr	r2, [pc, #80]	; (800395c <TIM_OC2_SetConfig+0xd0>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d113      	bne.n	8003938 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003916:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800391e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	4313      	orrs	r3, r2
 800392a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	4313      	orrs	r3, r2
 8003936:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685a      	ldr	r2, [r3, #4]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	621a      	str	r2, [r3, #32]
}
 8003952:	bf00      	nop
 8003954:	371c      	adds	r7, #28
 8003956:	46bd      	mov	sp, r7
 8003958:	bc80      	pop	{r7}
 800395a:	4770      	bx	lr
 800395c:	40012c00 	.word	0x40012c00

08003960 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003960:	b480      	push	{r7}
 8003962:	b087      	sub	sp, #28
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800398e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f023 0303 	bic.w	r3, r3, #3
 8003996:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	4313      	orrs	r3, r2
 80039a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	021b      	lsls	r3, r3, #8
 80039b0:	697a      	ldr	r2, [r7, #20]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a1d      	ldr	r2, [pc, #116]	; (8003a30 <TIM_OC3_SetConfig+0xd0>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d10d      	bne.n	80039da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	021b      	lsls	r3, r3, #8
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a14      	ldr	r2, [pc, #80]	; (8003a30 <TIM_OC3_SetConfig+0xd0>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d113      	bne.n	8003a0a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	011b      	lsls	r3, r3, #4
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	011b      	lsls	r3, r3, #4
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	621a      	str	r2, [r3, #32]
}
 8003a24:	bf00      	nop
 8003a26:	371c      	adds	r7, #28
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bc80      	pop	{r7}
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	40012c00 	.word	0x40012c00

08003a34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	021b      	lsls	r3, r3, #8
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	031b      	lsls	r3, r3, #12
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a0f      	ldr	r2, [pc, #60]	; (8003acc <TIM_OC4_SetConfig+0x98>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d109      	bne.n	8003aa8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	019b      	lsls	r3, r3, #6
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685a      	ldr	r2, [r3, #4]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	621a      	str	r2, [r3, #32]
}
 8003ac2:	bf00      	nop
 8003ac4:	371c      	adds	r7, #28
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bc80      	pop	{r7}
 8003aca:	4770      	bx	lr
 8003acc:	40012c00 	.word	0x40012c00

08003ad0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b087      	sub	sp, #28
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	f023 0201 	bic.w	r2, r3, #1
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003afa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	011b      	lsls	r3, r3, #4
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f023 030a 	bic.w	r3, r3, #10
 8003b0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	621a      	str	r2, [r3, #32]
}
 8003b22:	bf00      	nop
 8003b24:	371c      	adds	r7, #28
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr

08003b2c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b087      	sub	sp, #28
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	f023 0210 	bic.w	r2, r3, #16
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b56:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	031b      	lsls	r3, r3, #12
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b68:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	011b      	lsls	r3, r3, #4
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	621a      	str	r2, [r3, #32]
}
 8003b80:	bf00      	nop
 8003b82:	371c      	adds	r7, #28
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bc80      	pop	{r7}
 8003b88:	4770      	bx	lr

08003b8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b085      	sub	sp, #20
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
 8003b92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ba0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	f043 0307 	orr.w	r3, r3, #7
 8003bac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	609a      	str	r2, [r3, #8]
}
 8003bb4:	bf00      	nop
 8003bb6:	3714      	adds	r7, #20
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bc80      	pop	{r7}
 8003bbc:	4770      	bx	lr

08003bbe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b087      	sub	sp, #28
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	60f8      	str	r0, [r7, #12]
 8003bc6:	60b9      	str	r1, [r7, #8]
 8003bc8:	607a      	str	r2, [r7, #4]
 8003bca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bd8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	021a      	lsls	r2, r3, #8
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	431a      	orrs	r2, r3
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	609a      	str	r2, [r3, #8]
}
 8003bf2:	bf00      	nop
 8003bf4:	371c      	adds	r7, #28
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bc80      	pop	{r7}
 8003bfa:	4770      	bx	lr

08003bfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b087      	sub	sp, #28
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	f003 031f 	and.w	r3, r3, #31
 8003c0e:	2201      	movs	r2, #1
 8003c10:	fa02 f303 	lsl.w	r3, r2, r3
 8003c14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6a1a      	ldr	r2, [r3, #32]
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	401a      	ands	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6a1a      	ldr	r2, [r3, #32]
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	f003 031f 	and.w	r3, r3, #31
 8003c2e:	6879      	ldr	r1, [r7, #4]
 8003c30:	fa01 f303 	lsl.w	r3, r1, r3
 8003c34:	431a      	orrs	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	621a      	str	r2, [r3, #32]
}
 8003c3a:	bf00      	nop
 8003c3c:	371c      	adds	r7, #28
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bc80      	pop	{r7}
 8003c42:	4770      	bx	lr

08003c44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d101      	bne.n	8003c5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	e046      	b.n	8003cea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2202      	movs	r2, #2
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a16      	ldr	r2, [pc, #88]	; (8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d00e      	beq.n	8003cbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ca8:	d009      	beq.n	8003cbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a12      	ldr	r2, [pc, #72]	; (8003cf8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d004      	beq.n	8003cbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a10      	ldr	r2, [pc, #64]	; (8003cfc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d10c      	bne.n	8003cd8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3714      	adds	r7, #20
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bc80      	pop	{r7}
 8003cf2:	4770      	bx	lr
 8003cf4:	40012c00 	.word	0x40012c00
 8003cf8:	40000400 	.word	0x40000400
 8003cfc:	40000800 	.word	0x40000800

08003d00 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003d00:	b084      	sub	sp, #16
 8003d02:	b480      	push	{r7}
 8003d04:	b083      	sub	sp, #12
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
 8003d0a:	f107 0014 	add.w	r0, r7, #20
 8003d0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bc80      	pop	{r7}
 8003d1c:	b004      	add	sp, #16
 8003d1e:	4770      	bx	lr

08003d20 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003d30:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003d34:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bc80      	pop	{r7}
 8003d4a:	4770      	bx	lr

08003d4c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003d54:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003d58:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	43db      	mvns	r3, r3
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3714      	adds	r7, #20
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bc80      	pop	{r7}
 8003d7e:	4770      	bx	lr

08003d80 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	460b      	mov	r3, r1
 8003d8a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	370c      	adds	r7, #12
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bc80      	pop	{r7}
 8003d96:	4770      	bx	lr

08003d98 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003d98:	b084      	sub	sp, #16
 8003d9a:	b480      	push	{r7}
 8003d9c:	b083      	sub	sp, #12
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
 8003da2:	f107 0014 	add.w	r0, r7, #20
 8003da6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bc80      	pop	{r7}
 8003dd4:	b004      	add	sp, #16
 8003dd6:	4770      	bx	lr

08003dd8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b09b      	sub	sp, #108	; 0x6c
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003de2:	2300      	movs	r3, #0
 8003de4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	4413      	add	r3, r2
 8003df2:	881b      	ldrh	r3, [r3, #0]
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dfe:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	78db      	ldrb	r3, [r3, #3]
 8003e06:	2b03      	cmp	r3, #3
 8003e08:	d81f      	bhi.n	8003e4a <USB_ActivateEndpoint+0x72>
 8003e0a:	a201      	add	r2, pc, #4	; (adr r2, 8003e10 <USB_ActivateEndpoint+0x38>)
 8003e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e10:	08003e21 	.word	0x08003e21
 8003e14:	08003e3d 	.word	0x08003e3d
 8003e18:	08003e53 	.word	0x08003e53
 8003e1c:	08003e2f 	.word	0x08003e2f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003e20:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003e24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e28:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003e2c:	e012      	b.n	8003e54 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003e2e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003e32:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003e36:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003e3a:	e00b      	b.n	8003e54 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003e3c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003e40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e44:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003e48:	e004      	b.n	8003e54 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003e50:	e000      	b.n	8003e54 <USB_ActivateEndpoint+0x7c>
      break;
 8003e52:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	441a      	add	r2, r3
 8003e5e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003e62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4413      	add	r3, r2
 8003e80:	881b      	ldrh	r3, [r3, #0]
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	4313      	orrs	r3, r2
 8003e96:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	441a      	add	r2, r3
 8003ea4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003ea8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003eac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003eb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	7b1b      	ldrb	r3, [r3, #12]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f040 8149 	bne.w	8004158 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	785b      	ldrb	r3, [r3, #1]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f000 8084 	beq.w	8003fd8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	617b      	str	r3, [r7, #20]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	461a      	mov	r2, r3
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	617b      	str	r3, [r7, #20]
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	011a      	lsls	r2, r3, #4
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	4413      	add	r3, r2
 8003eee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ef2:	613b      	str	r3, [r7, #16]
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	88db      	ldrh	r3, [r3, #6]
 8003ef8:	085b      	lsrs	r3, r3, #1
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	4413      	add	r3, r2
 8003f0e:	881b      	ldrh	r3, [r3, #0]
 8003f10:	81fb      	strh	r3, [r7, #14]
 8003f12:	89fb      	ldrh	r3, [r7, #14]
 8003f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d01b      	beq.n	8003f54 <USB_ActivateEndpoint+0x17c>
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4413      	add	r3, r2
 8003f26:	881b      	ldrh	r3, [r3, #0]
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f32:	81bb      	strh	r3, [r7, #12]
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	441a      	add	r2, r3
 8003f3e:	89bb      	ldrh	r3, [r7, #12]
 8003f40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	78db      	ldrb	r3, [r3, #3]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d020      	beq.n	8003f9e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	881b      	ldrh	r3, [r3, #0]
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f72:	813b      	strh	r3, [r7, #8]
 8003f74:	893b      	ldrh	r3, [r7, #8]
 8003f76:	f083 0320 	eor.w	r3, r3, #32
 8003f7a:	813b      	strh	r3, [r7, #8]
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	441a      	add	r2, r3
 8003f86:	893b      	ldrh	r3, [r7, #8]
 8003f88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	8013      	strh	r3, [r2, #0]
 8003f9c:	e27f      	b.n	800449e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4413      	add	r3, r2
 8003fa8:	881b      	ldrh	r3, [r3, #0]
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fb4:	817b      	strh	r3, [r7, #10]
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	441a      	add	r2, r3
 8003fc0:	897b      	ldrh	r3, [r7, #10]
 8003fc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	8013      	strh	r3, [r2, #0]
 8003fd6:	e262      	b.n	800449e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe8:	4413      	add	r3, r2
 8003fea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	011a      	lsls	r2, r3, #4
 8003ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003ffa:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	88db      	ldrh	r3, [r3, #6]
 8004000:	085b      	lsrs	r3, r3, #1
 8004002:	b29b      	uxth	r3, r3
 8004004:	005b      	lsls	r3, r3, #1
 8004006:	b29a      	uxth	r2, r3
 8004008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	627b      	str	r3, [r7, #36]	; 0x24
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004016:	b29b      	uxth	r3, r3
 8004018:	461a      	mov	r2, r3
 800401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401c:	4413      	add	r3, r2
 800401e:	627b      	str	r3, [r7, #36]	; 0x24
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	011a      	lsls	r2, r3, #4
 8004026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004028:	4413      	add	r3, r2
 800402a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800402e:	623b      	str	r3, [r7, #32]
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d112      	bne.n	800405e <USB_ActivateEndpoint+0x286>
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	881b      	ldrh	r3, [r3, #0]
 800403c:	b29b      	uxth	r3, r3
 800403e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004042:	b29a      	uxth	r2, r3
 8004044:	6a3b      	ldr	r3, [r7, #32]
 8004046:	801a      	strh	r2, [r3, #0]
 8004048:	6a3b      	ldr	r3, [r7, #32]
 800404a:	881b      	ldrh	r3, [r3, #0]
 800404c:	b29b      	uxth	r3, r3
 800404e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004052:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004056:	b29a      	uxth	r2, r3
 8004058:	6a3b      	ldr	r3, [r7, #32]
 800405a:	801a      	strh	r2, [r3, #0]
 800405c:	e02f      	b.n	80040be <USB_ActivateEndpoint+0x2e6>
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	2b3e      	cmp	r3, #62	; 0x3e
 8004064:	d813      	bhi.n	800408e <USB_ActivateEndpoint+0x2b6>
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	085b      	lsrs	r3, r3, #1
 800406c:	663b      	str	r3, [r7, #96]	; 0x60
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b00      	cmp	r3, #0
 8004078:	d002      	beq.n	8004080 <USB_ActivateEndpoint+0x2a8>
 800407a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800407c:	3301      	adds	r3, #1
 800407e:	663b      	str	r3, [r7, #96]	; 0x60
 8004080:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004082:	b29b      	uxth	r3, r3
 8004084:	029b      	lsls	r3, r3, #10
 8004086:	b29a      	uxth	r2, r3
 8004088:	6a3b      	ldr	r3, [r7, #32]
 800408a:	801a      	strh	r2, [r3, #0]
 800408c:	e017      	b.n	80040be <USB_ActivateEndpoint+0x2e6>
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	095b      	lsrs	r3, r3, #5
 8004094:	663b      	str	r3, [r7, #96]	; 0x60
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	f003 031f 	and.w	r3, r3, #31
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d102      	bne.n	80040a8 <USB_ActivateEndpoint+0x2d0>
 80040a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040a4:	3b01      	subs	r3, #1
 80040a6:	663b      	str	r3, [r7, #96]	; 0x60
 80040a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	029b      	lsls	r3, r3, #10
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	6a3b      	ldr	r3, [r7, #32]
 80040bc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	4413      	add	r3, r2
 80040c8:	881b      	ldrh	r3, [r3, #0]
 80040ca:	83fb      	strh	r3, [r7, #30]
 80040cc:	8bfb      	ldrh	r3, [r7, #30]
 80040ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d01b      	beq.n	800410e <USB_ActivateEndpoint+0x336>
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	4413      	add	r3, r2
 80040e0:	881b      	ldrh	r3, [r3, #0]
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ec:	83bb      	strh	r3, [r7, #28]
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	441a      	add	r2, r3
 80040f8:	8bbb      	ldrh	r3, [r7, #28]
 80040fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004102:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004106:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800410a:	b29b      	uxth	r3, r3
 800410c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	4413      	add	r3, r2
 8004118:	881b      	ldrh	r3, [r3, #0]
 800411a:	b29b      	uxth	r3, r3
 800411c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004124:	837b      	strh	r3, [r7, #26]
 8004126:	8b7b      	ldrh	r3, [r7, #26]
 8004128:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800412c:	837b      	strh	r3, [r7, #26]
 800412e:	8b7b      	ldrh	r3, [r7, #26]
 8004130:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004134:	837b      	strh	r3, [r7, #26]
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	441a      	add	r2, r3
 8004140:	8b7b      	ldrh	r3, [r7, #26]
 8004142:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004146:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800414a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800414e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004152:	b29b      	uxth	r3, r3
 8004154:	8013      	strh	r3, [r2, #0]
 8004156:	e1a2      	b.n	800449e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	4413      	add	r3, r2
 8004162:	881b      	ldrh	r3, [r3, #0]
 8004164:	b29b      	uxth	r3, r3
 8004166:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800416a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800416e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	441a      	add	r2, r3
 800417c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004180:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004184:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004188:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800418c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004190:	b29b      	uxth	r3, r3
 8004192:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	65bb      	str	r3, [r7, #88]	; 0x58
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800419e:	b29b      	uxth	r3, r3
 80041a0:	461a      	mov	r2, r3
 80041a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041a4:	4413      	add	r3, r2
 80041a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	011a      	lsls	r2, r3, #4
 80041ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041b0:	4413      	add	r3, r2
 80041b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041b6:	657b      	str	r3, [r7, #84]	; 0x54
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	891b      	ldrh	r3, [r3, #8]
 80041bc:	085b      	lsrs	r3, r3, #1
 80041be:	b29b      	uxth	r3, r3
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041c6:	801a      	strh	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	653b      	str	r3, [r7, #80]	; 0x50
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	461a      	mov	r2, r3
 80041d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041d8:	4413      	add	r3, r2
 80041da:	653b      	str	r3, [r7, #80]	; 0x50
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	011a      	lsls	r2, r3, #4
 80041e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041e4:	4413      	add	r3, r2
 80041e6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80041ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	895b      	ldrh	r3, [r3, #10]
 80041f0:	085b      	lsrs	r3, r3, #1
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	005b      	lsls	r3, r3, #1
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041fa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	785b      	ldrb	r3, [r3, #1]
 8004200:	2b00      	cmp	r3, #0
 8004202:	f040 8091 	bne.w	8004328 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	4413      	add	r3, r2
 8004210:	881b      	ldrh	r3, [r3, #0]
 8004212:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004214:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d01b      	beq.n	8004256 <USB_ActivateEndpoint+0x47e>
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	4413      	add	r3, r2
 8004228:	881b      	ldrh	r3, [r3, #0]
 800422a:	b29b      	uxth	r3, r3
 800422c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004230:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004234:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	441a      	add	r2, r3
 8004240:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004242:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004246:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800424a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800424e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004252:	b29b      	uxth	r3, r3
 8004254:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	4413      	add	r3, r2
 8004260:	881b      	ldrh	r3, [r3, #0]
 8004262:	873b      	strh	r3, [r7, #56]	; 0x38
 8004264:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800426a:	2b00      	cmp	r3, #0
 800426c:	d01b      	beq.n	80042a6 <USB_ActivateEndpoint+0x4ce>
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	4413      	add	r3, r2
 8004278:	881b      	ldrh	r3, [r3, #0]
 800427a:	b29b      	uxth	r3, r3
 800427c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004284:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	441a      	add	r2, r3
 8004290:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004292:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004296:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800429a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800429e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4413      	add	r3, r2
 80042b0:	881b      	ldrh	r3, [r3, #0]
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042bc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80042be:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80042c0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80042c4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80042c6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80042c8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80042cc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	441a      	add	r2, r3
 80042d8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80042da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	4413      	add	r3, r2
 80042f8:	881b      	ldrh	r3, [r3, #0]
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004300:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004304:	867b      	strh	r3, [r7, #50]	; 0x32
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	441a      	add	r2, r3
 8004310:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004312:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004316:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800431a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800431e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004322:	b29b      	uxth	r3, r3
 8004324:	8013      	strh	r3, [r2, #0]
 8004326:	e0ba      	b.n	800449e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	4413      	add	r3, r2
 8004332:	881b      	ldrh	r3, [r3, #0]
 8004334:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004338:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800433c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d01d      	beq.n	8004380 <USB_ActivateEndpoint+0x5a8>
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	4413      	add	r3, r2
 800434e:	881b      	ldrh	r3, [r3, #0]
 8004350:	b29b      	uxth	r3, r3
 8004352:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800435a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	441a      	add	r2, r3
 8004368:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800436c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004370:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004374:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800437c:	b29b      	uxth	r3, r3
 800437e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4413      	add	r3, r2
 800438a:	881b      	ldrh	r3, [r3, #0]
 800438c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004390:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004398:	2b00      	cmp	r3, #0
 800439a:	d01d      	beq.n	80043d8 <USB_ActivateEndpoint+0x600>
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4413      	add	r3, r2
 80043a6:	881b      	ldrh	r3, [r3, #0]
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	441a      	add	r2, r3
 80043c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80043c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	78db      	ldrb	r3, [r3, #3]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d024      	beq.n	800442a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4413      	add	r3, r2
 80043ea:	881b      	ldrh	r3, [r3, #0]
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043f6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80043fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80043fe:	f083 0320 	eor.w	r3, r3, #32
 8004402:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	441a      	add	r2, r3
 8004410:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004414:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004418:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800441c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004424:	b29b      	uxth	r3, r3
 8004426:	8013      	strh	r3, [r2, #0]
 8004428:	e01d      	b.n	8004466 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4413      	add	r3, r2
 8004434:	881b      	ldrh	r3, [r3, #0]
 8004436:	b29b      	uxth	r3, r3
 8004438:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800443c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004440:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	441a      	add	r2, r3
 800444e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004452:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004456:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800445a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800445e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004462:	b29b      	uxth	r3, r3
 8004464:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	4413      	add	r3, r2
 8004470:	881b      	ldrh	r3, [r3, #0]
 8004472:	b29b      	uxth	r3, r3
 8004474:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800447c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	441a      	add	r2, r3
 8004488:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800448a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800448e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004492:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800449a:	b29b      	uxth	r3, r3
 800449c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800449e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	376c      	adds	r7, #108	; 0x6c
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bc80      	pop	{r7}
 80044aa:	4770      	bx	lr

080044ac <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b08d      	sub	sp, #52	; 0x34
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	7b1b      	ldrb	r3, [r3, #12]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f040 808e 	bne.w	80045dc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	785b      	ldrb	r3, [r3, #1]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d044      	beq.n	8004552 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4413      	add	r3, r2
 80044d2:	881b      	ldrh	r3, [r3, #0]
 80044d4:	81bb      	strh	r3, [r7, #12]
 80044d6:	89bb      	ldrh	r3, [r7, #12]
 80044d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d01b      	beq.n	8004518 <USB_DeactivateEndpoint+0x6c>
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4413      	add	r3, r2
 80044ea:	881b      	ldrh	r3, [r3, #0]
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f6:	817b      	strh	r3, [r7, #10]
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	441a      	add	r2, r3
 8004502:	897b      	ldrh	r3, [r7, #10]
 8004504:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004508:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800450c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004510:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004514:	b29b      	uxth	r3, r3
 8004516:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4413      	add	r3, r2
 8004522:	881b      	ldrh	r3, [r3, #0]
 8004524:	b29b      	uxth	r3, r3
 8004526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800452a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800452e:	813b      	strh	r3, [r7, #8]
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	441a      	add	r2, r3
 800453a:	893b      	ldrh	r3, [r7, #8]
 800453c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004540:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004544:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800454c:	b29b      	uxth	r3, r3
 800454e:	8013      	strh	r3, [r2, #0]
 8004550:	e192      	b.n	8004878 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4413      	add	r3, r2
 800455c:	881b      	ldrh	r3, [r3, #0]
 800455e:	827b      	strh	r3, [r7, #18]
 8004560:	8a7b      	ldrh	r3, [r7, #18]
 8004562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d01b      	beq.n	80045a2 <USB_DeactivateEndpoint+0xf6>
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	4413      	add	r3, r2
 8004574:	881b      	ldrh	r3, [r3, #0]
 8004576:	b29b      	uxth	r3, r3
 8004578:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800457c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004580:	823b      	strh	r3, [r7, #16]
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	441a      	add	r2, r3
 800458c:	8a3b      	ldrh	r3, [r7, #16]
 800458e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004592:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004596:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800459a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800459e:	b29b      	uxth	r3, r3
 80045a0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	4413      	add	r3, r2
 80045ac:	881b      	ldrh	r3, [r3, #0]
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045b8:	81fb      	strh	r3, [r7, #14]
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	441a      	add	r2, r3
 80045c4:	89fb      	ldrh	r3, [r7, #14]
 80045c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	8013      	strh	r3, [r2, #0]
 80045da:	e14d      	b.n	8004878 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	785b      	ldrb	r3, [r3, #1]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f040 80a5 	bne.w	8004730 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	4413      	add	r3, r2
 80045f0:	881b      	ldrh	r3, [r3, #0]
 80045f2:	843b      	strh	r3, [r7, #32]
 80045f4:	8c3b      	ldrh	r3, [r7, #32]
 80045f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d01b      	beq.n	8004636 <USB_DeactivateEndpoint+0x18a>
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	4413      	add	r3, r2
 8004608:	881b      	ldrh	r3, [r3, #0]
 800460a:	b29b      	uxth	r3, r3
 800460c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004610:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004614:	83fb      	strh	r3, [r7, #30]
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	441a      	add	r2, r3
 8004620:	8bfb      	ldrh	r3, [r7, #30]
 8004622:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004626:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800462a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800462e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004632:	b29b      	uxth	r3, r3
 8004634:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	4413      	add	r3, r2
 8004640:	881b      	ldrh	r3, [r3, #0]
 8004642:	83bb      	strh	r3, [r7, #28]
 8004644:	8bbb      	ldrh	r3, [r7, #28]
 8004646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464a:	2b00      	cmp	r3, #0
 800464c:	d01b      	beq.n	8004686 <USB_DeactivateEndpoint+0x1da>
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	4413      	add	r3, r2
 8004658:	881b      	ldrh	r3, [r3, #0]
 800465a:	b29b      	uxth	r3, r3
 800465c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004660:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004664:	837b      	strh	r3, [r7, #26]
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	441a      	add	r2, r3
 8004670:	8b7b      	ldrh	r3, [r7, #26]
 8004672:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004676:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800467a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800467e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004682:	b29b      	uxth	r3, r3
 8004684:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	4413      	add	r3, r2
 8004690:	881b      	ldrh	r3, [r3, #0]
 8004692:	b29b      	uxth	r3, r3
 8004694:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800469c:	833b      	strh	r3, [r7, #24]
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	441a      	add	r2, r3
 80046a8:	8b3b      	ldrh	r3, [r7, #24]
 80046aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	4413      	add	r3, r2
 80046c8:	881b      	ldrh	r3, [r3, #0]
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046d4:	82fb      	strh	r3, [r7, #22]
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	441a      	add	r2, r3
 80046e0:	8afb      	ldrh	r3, [r7, #22]
 80046e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	4413      	add	r3, r2
 8004700:	881b      	ldrh	r3, [r3, #0]
 8004702:	b29b      	uxth	r3, r3
 8004704:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004708:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800470c:	82bb      	strh	r3, [r7, #20]
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	441a      	add	r2, r3
 8004718:	8abb      	ldrh	r3, [r7, #20]
 800471a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800471e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800472a:	b29b      	uxth	r3, r3
 800472c:	8013      	strh	r3, [r2, #0]
 800472e:	e0a3      	b.n	8004878 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	4413      	add	r3, r2
 800473a:	881b      	ldrh	r3, [r3, #0]
 800473c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800473e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004740:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d01b      	beq.n	8004780 <USB_DeactivateEndpoint+0x2d4>
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	4413      	add	r3, r2
 8004752:	881b      	ldrh	r3, [r3, #0]
 8004754:	b29b      	uxth	r3, r3
 8004756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800475a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800475e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	441a      	add	r2, r3
 800476a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800476c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004770:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004774:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800477c:	b29b      	uxth	r3, r3
 800477e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	4413      	add	r3, r2
 800478a:	881b      	ldrh	r3, [r3, #0]
 800478c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800478e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004794:	2b00      	cmp	r3, #0
 8004796:	d01b      	beq.n	80047d0 <USB_DeactivateEndpoint+0x324>
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4413      	add	r3, r2
 80047a2:	881b      	ldrh	r3, [r3, #0]
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ae:	853b      	strh	r3, [r7, #40]	; 0x28
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	441a      	add	r2, r3
 80047ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80047bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4413      	add	r3, r2
 80047da:	881b      	ldrh	r3, [r3, #0]
 80047dc:	b29b      	uxth	r3, r3
 80047de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047e6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	441a      	add	r2, r3
 80047f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80047f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004804:	b29b      	uxth	r3, r3
 8004806:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	4413      	add	r3, r2
 8004812:	881b      	ldrh	r3, [r3, #0]
 8004814:	b29b      	uxth	r3, r3
 8004816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800481a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800481e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	441a      	add	r2, r3
 800482a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800482c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004830:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004834:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800483c:	b29b      	uxth	r3, r3
 800483e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4413      	add	r3, r2
 800484a:	881b      	ldrh	r3, [r3, #0]
 800484c:	b29b      	uxth	r3, r3
 800484e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004856:	847b      	strh	r3, [r7, #34]	; 0x22
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	441a      	add	r2, r3
 8004862:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004864:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004868:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800486c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004874:	b29b      	uxth	r3, r3
 8004876:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3734      	adds	r7, #52	; 0x34
 800487e:	46bd      	mov	sp, r7
 8004880:	bc80      	pop	{r7}
 8004882:	4770      	bx	lr

08004884 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b0c4      	sub	sp, #272	; 0x110
 8004888:	af00      	add	r7, sp, #0
 800488a:	1d3b      	adds	r3, r7, #4
 800488c:	6018      	str	r0, [r3, #0]
 800488e:	463b      	mov	r3, r7
 8004890:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004892:	463b      	mov	r3, r7
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	785b      	ldrb	r3, [r3, #1]
 8004898:	2b01      	cmp	r3, #1
 800489a:	f040 8557 	bne.w	800534c <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800489e:	463b      	mov	r3, r7
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	699a      	ldr	r2, [r3, #24]
 80048a4:	463b      	mov	r3, r7
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d905      	bls.n	80048ba <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80048ae:	463b      	mov	r3, r7
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80048b8:	e004      	b.n	80048c4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80048ba:	463b      	mov	r3, r7
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80048c4:	463b      	mov	r3, r7
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	7b1b      	ldrb	r3, [r3, #12]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d12c      	bne.n	8004928 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80048ce:	463b      	mov	r3, r7
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	6959      	ldr	r1, [r3, #20]
 80048d4:	463b      	mov	r3, r7
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	88da      	ldrh	r2, [r3, #6]
 80048da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048de:	b29b      	uxth	r3, r3
 80048e0:	1d38      	adds	r0, r7, #4
 80048e2:	6800      	ldr	r0, [r0, #0]
 80048e4:	f001 fa2c 	bl	8005d40 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80048e8:	1d3b      	adds	r3, r7, #4
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	617b      	str	r3, [r7, #20]
 80048ee:	1d3b      	adds	r3, r7, #4
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	461a      	mov	r2, r3
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	4413      	add	r3, r2
 80048fe:	617b      	str	r3, [r7, #20]
 8004900:	463b      	mov	r3, r7
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	011a      	lsls	r2, r3, #4
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	4413      	add	r3, r2
 800490c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004910:	f107 0310 	add.w	r3, r7, #16
 8004914:	601a      	str	r2, [r3, #0]
 8004916:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800491a:	b29a      	uxth	r2, r3
 800491c:	f107 0310 	add.w	r3, r7, #16
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	801a      	strh	r2, [r3, #0]
 8004924:	f000 bcdd 	b.w	80052e2 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004928:	463b      	mov	r3, r7
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	78db      	ldrb	r3, [r3, #3]
 800492e:	2b02      	cmp	r3, #2
 8004930:	f040 8347 	bne.w	8004fc2 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004934:	463b      	mov	r3, r7
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	6a1a      	ldr	r2, [r3, #32]
 800493a:	463b      	mov	r3, r7
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	429a      	cmp	r2, r3
 8004942:	f240 82eb 	bls.w	8004f1c <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004946:	1d3b      	adds	r3, r7, #4
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	463b      	mov	r3, r7
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4413      	add	r3, r2
 8004954:	881b      	ldrh	r3, [r3, #0]
 8004956:	b29b      	uxth	r3, r3
 8004958:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800495c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004960:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8004964:	1d3b      	adds	r3, r7, #4
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	463b      	mov	r3, r7
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	441a      	add	r2, r3
 8004972:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004976:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800497a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800497e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004986:	b29b      	uxth	r3, r3
 8004988:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800498a:	463b      	mov	r3, r7
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	6a1a      	ldr	r2, [r3, #32]
 8004990:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004994:	1ad2      	subs	r2, r2, r3
 8004996:	463b      	mov	r3, r7
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800499c:	1d3b      	adds	r3, r7, #4
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	463b      	mov	r3, r7
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4413      	add	r3, r2
 80049aa:	881b      	ldrh	r3, [r3, #0]
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	f000 8159 	beq.w	8004c6a <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80049b8:	1d3b      	adds	r3, r7, #4
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	637b      	str	r3, [r7, #52]	; 0x34
 80049be:	463b      	mov	r3, r7
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	785b      	ldrb	r3, [r3, #1]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d164      	bne.n	8004a92 <USB_EPStartXfer+0x20e>
 80049c8:	1d3b      	adds	r3, r7, #4
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049ce:	1d3b      	adds	r3, r7, #4
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	461a      	mov	r2, r3
 80049da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049dc:	4413      	add	r3, r2
 80049de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049e0:	463b      	mov	r3, r7
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	011a      	lsls	r2, r3, #4
 80049e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ea:	4413      	add	r3, r2
 80049ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80049f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d112      	bne.n	8004a20 <USB_EPStartXfer+0x19c>
 80049fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fc:	881b      	ldrh	r3, [r3, #0]
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a08:	801a      	strh	r2, [r3, #0]
 8004a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1c:	801a      	strh	r2, [r3, #0]
 8004a1e:	e054      	b.n	8004aca <USB_EPStartXfer+0x246>
 8004a20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a24:	2b3e      	cmp	r3, #62	; 0x3e
 8004a26:	d817      	bhi.n	8004a58 <USB_EPStartXfer+0x1d4>
 8004a28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a2c:	085b      	lsrs	r3, r3, #1
 8004a2e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004a32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d004      	beq.n	8004a48 <USB_EPStartXfer+0x1c4>
 8004a3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a42:	3301      	adds	r3, #1
 8004a44:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	029b      	lsls	r3, r3, #10
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a54:	801a      	strh	r2, [r3, #0]
 8004a56:	e038      	b.n	8004aca <USB_EPStartXfer+0x246>
 8004a58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a5c:	095b      	lsrs	r3, r3, #5
 8004a5e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004a62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a66:	f003 031f 	and.w	r3, r3, #31
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d104      	bne.n	8004a78 <USB_EPStartXfer+0x1f4>
 8004a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a72:	3b01      	subs	r3, #1
 8004a74:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	029b      	lsls	r3, r3, #10
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8e:	801a      	strh	r2, [r3, #0]
 8004a90:	e01b      	b.n	8004aca <USB_EPStartXfer+0x246>
 8004a92:	463b      	mov	r3, r7
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	785b      	ldrb	r3, [r3, #1]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d116      	bne.n	8004aca <USB_EPStartXfer+0x246>
 8004a9c:	1d3b      	adds	r3, r7, #4
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aaa:	4413      	add	r3, r2
 8004aac:	637b      	str	r3, [r7, #52]	; 0x34
 8004aae:	463b      	mov	r3, r7
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	011a      	lsls	r2, r3, #4
 8004ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab8:	4413      	add	r3, r2
 8004aba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004abe:	633b      	str	r3, [r7, #48]	; 0x30
 8004ac0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004aca:	463b      	mov	r3, r7
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	895b      	ldrh	r3, [r3, #10]
 8004ad0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ad4:	463b      	mov	r3, r7
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	6959      	ldr	r1, [r3, #20]
 8004ada:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004ae4:	1d38      	adds	r0, r7, #4
 8004ae6:	6800      	ldr	r0, [r0, #0]
 8004ae8:	f001 f92a 	bl	8005d40 <USB_WritePMA>
            ep->xfer_buff += len;
 8004aec:	463b      	mov	r3, r7
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	695a      	ldr	r2, [r3, #20]
 8004af2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004af6:	441a      	add	r2, r3
 8004af8:	463b      	mov	r3, r7
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004afe:	463b      	mov	r3, r7
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6a1a      	ldr	r2, [r3, #32]
 8004b04:	463b      	mov	r3, r7
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d909      	bls.n	8004b22 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8004b0e:	463b      	mov	r3, r7
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	6a1a      	ldr	r2, [r3, #32]
 8004b14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b18:	1ad2      	subs	r2, r2, r3
 8004b1a:	463b      	mov	r3, r7
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	621a      	str	r2, [r3, #32]
 8004b20:	e008      	b.n	8004b34 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8004b22:	463b      	mov	r3, r7
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004b2c:	463b      	mov	r3, r7
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2200      	movs	r2, #0
 8004b32:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004b34:	463b      	mov	r3, r7
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	785b      	ldrb	r3, [r3, #1]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d164      	bne.n	8004c08 <USB_EPStartXfer+0x384>
 8004b3e:	1d3b      	adds	r3, r7, #4
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	61fb      	str	r3, [r7, #28]
 8004b44:	1d3b      	adds	r3, r7, #4
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	461a      	mov	r2, r3
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	4413      	add	r3, r2
 8004b54:	61fb      	str	r3, [r7, #28]
 8004b56:	463b      	mov	r3, r7
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	011a      	lsls	r2, r3, #4
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	4413      	add	r3, r2
 8004b62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b66:	61bb      	str	r3, [r7, #24]
 8004b68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d112      	bne.n	8004b96 <USB_EPStartXfer+0x312>
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	881b      	ldrh	r3, [r3, #0]
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	801a      	strh	r2, [r3, #0]
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	881b      	ldrh	r3, [r3, #0]
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	801a      	strh	r2, [r3, #0]
 8004b94:	e057      	b.n	8004c46 <USB_EPStartXfer+0x3c2>
 8004b96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b9a:	2b3e      	cmp	r3, #62	; 0x3e
 8004b9c:	d817      	bhi.n	8004bce <USB_EPStartXfer+0x34a>
 8004b9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ba2:	085b      	lsrs	r3, r3, #1
 8004ba4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004ba8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bac:	f003 0301 	and.w	r3, r3, #1
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d004      	beq.n	8004bbe <USB_EPStartXfer+0x33a>
 8004bb4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004bb8:	3301      	adds	r3, #1
 8004bba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004bbe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	029b      	lsls	r3, r3, #10
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	801a      	strh	r2, [r3, #0]
 8004bcc:	e03b      	b.n	8004c46 <USB_EPStartXfer+0x3c2>
 8004bce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bd2:	095b      	lsrs	r3, r3, #5
 8004bd4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004bd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bdc:	f003 031f 	and.w	r3, r3, #31
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d104      	bne.n	8004bee <USB_EPStartXfer+0x36a>
 8004be4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004be8:	3b01      	subs	r3, #1
 8004bea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004bee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	029b      	lsls	r3, r3, #10
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	801a      	strh	r2, [r3, #0]
 8004c06:	e01e      	b.n	8004c46 <USB_EPStartXfer+0x3c2>
 8004c08:	463b      	mov	r3, r7
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	785b      	ldrb	r3, [r3, #1]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d119      	bne.n	8004c46 <USB_EPStartXfer+0x3c2>
 8004c12:	1d3b      	adds	r3, r7, #4
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	627b      	str	r3, [r7, #36]	; 0x24
 8004c18:	1d3b      	adds	r3, r7, #4
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	461a      	mov	r2, r3
 8004c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c26:	4413      	add	r3, r2
 8004c28:	627b      	str	r3, [r7, #36]	; 0x24
 8004c2a:	463b      	mov	r3, r7
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	011a      	lsls	r2, r3, #4
 8004c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c34:	4413      	add	r3, r2
 8004c36:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c3a:	623b      	str	r3, [r7, #32]
 8004c3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c40:	b29a      	uxth	r2, r3
 8004c42:	6a3b      	ldr	r3, [r7, #32]
 8004c44:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004c46:	463b      	mov	r3, r7
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	891b      	ldrh	r3, [r3, #8]
 8004c4c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c50:	463b      	mov	r3, r7
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6959      	ldr	r1, [r3, #20]
 8004c56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004c60:	1d38      	adds	r0, r7, #4
 8004c62:	6800      	ldr	r0, [r0, #0]
 8004c64:	f001 f86c 	bl	8005d40 <USB_WritePMA>
 8004c68:	e33b      	b.n	80052e2 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004c6a:	463b      	mov	r3, r7
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	785b      	ldrb	r3, [r3, #1]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d164      	bne.n	8004d3e <USB_EPStartXfer+0x4ba>
 8004c74:	1d3b      	adds	r3, r7, #4
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c7a:	1d3b      	adds	r3, r7, #4
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	461a      	mov	r2, r3
 8004c86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c88:	4413      	add	r3, r2
 8004c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c8c:	463b      	mov	r3, r7
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	011a      	lsls	r2, r3, #4
 8004c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c96:	4413      	add	r3, r2
 8004c98:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d112      	bne.n	8004ccc <USB_EPStartXfer+0x448>
 8004ca6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ca8:	881b      	ldrh	r3, [r3, #0]
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cb4:	801a      	strh	r2, [r3, #0]
 8004cb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cb8:	881b      	ldrh	r3, [r3, #0]
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cc8:	801a      	strh	r2, [r3, #0]
 8004cca:	e057      	b.n	8004d7c <USB_EPStartXfer+0x4f8>
 8004ccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cd0:	2b3e      	cmp	r3, #62	; 0x3e
 8004cd2:	d817      	bhi.n	8004d04 <USB_EPStartXfer+0x480>
 8004cd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cd8:	085b      	lsrs	r3, r3, #1
 8004cda:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004cde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d004      	beq.n	8004cf4 <USB_EPStartXfer+0x470>
 8004cea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cee:	3301      	adds	r3, #1
 8004cf0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004cf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	029b      	lsls	r3, r3, #10
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d00:	801a      	strh	r2, [r3, #0]
 8004d02:	e03b      	b.n	8004d7c <USB_EPStartXfer+0x4f8>
 8004d04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d08:	095b      	lsrs	r3, r3, #5
 8004d0a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004d0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d12:	f003 031f 	and.w	r3, r3, #31
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d104      	bne.n	8004d24 <USB_EPStartXfer+0x4a0>
 8004d1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004d24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	029b      	lsls	r3, r3, #10
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d3a:	801a      	strh	r2, [r3, #0]
 8004d3c:	e01e      	b.n	8004d7c <USB_EPStartXfer+0x4f8>
 8004d3e:	463b      	mov	r3, r7
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	785b      	ldrb	r3, [r3, #1]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d119      	bne.n	8004d7c <USB_EPStartXfer+0x4f8>
 8004d48:	1d3b      	adds	r3, r7, #4
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	657b      	str	r3, [r7, #84]	; 0x54
 8004d4e:	1d3b      	adds	r3, r7, #4
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	461a      	mov	r2, r3
 8004d5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d5c:	4413      	add	r3, r2
 8004d5e:	657b      	str	r3, [r7, #84]	; 0x54
 8004d60:	463b      	mov	r3, r7
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	011a      	lsls	r2, r3, #4
 8004d68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d70:	653b      	str	r3, [r7, #80]	; 0x50
 8004d72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d7a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004d7c:	463b      	mov	r3, r7
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	891b      	ldrh	r3, [r3, #8]
 8004d82:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d86:	463b      	mov	r3, r7
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	6959      	ldr	r1, [r3, #20]
 8004d8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004d96:	1d38      	adds	r0, r7, #4
 8004d98:	6800      	ldr	r0, [r0, #0]
 8004d9a:	f000 ffd1 	bl	8005d40 <USB_WritePMA>
            ep->xfer_buff += len;
 8004d9e:	463b      	mov	r3, r7
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	695a      	ldr	r2, [r3, #20]
 8004da4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004da8:	441a      	add	r2, r3
 8004daa:	463b      	mov	r3, r7
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004db0:	463b      	mov	r3, r7
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	6a1a      	ldr	r2, [r3, #32]
 8004db6:	463b      	mov	r3, r7
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d909      	bls.n	8004dd4 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8004dc0:	463b      	mov	r3, r7
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6a1a      	ldr	r2, [r3, #32]
 8004dc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dca:	1ad2      	subs	r2, r2, r3
 8004dcc:	463b      	mov	r3, r7
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	621a      	str	r2, [r3, #32]
 8004dd2:	e008      	b.n	8004de6 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8004dd4:	463b      	mov	r3, r7
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004dde:	463b      	mov	r3, r7
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2200      	movs	r2, #0
 8004de4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004de6:	1d3b      	adds	r3, r7, #4
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	647b      	str	r3, [r7, #68]	; 0x44
 8004dec:	463b      	mov	r3, r7
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	785b      	ldrb	r3, [r3, #1]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d164      	bne.n	8004ec0 <USB_EPStartXfer+0x63c>
 8004df6:	1d3b      	adds	r3, r7, #4
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dfc:	1d3b      	adds	r3, r7, #4
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	461a      	mov	r2, r3
 8004e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e0a:	4413      	add	r3, r2
 8004e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e0e:	463b      	mov	r3, r7
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	011a      	lsls	r2, r3, #4
 8004e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e18:	4413      	add	r3, r2
 8004e1a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d112      	bne.n	8004e4e <USB_EPStartXfer+0x5ca>
 8004e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e2a:	881b      	ldrh	r3, [r3, #0]
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e36:	801a      	strh	r2, [r3, #0]
 8004e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3a:	881b      	ldrh	r3, [r3, #0]
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4a:	801a      	strh	r2, [r3, #0]
 8004e4c:	e054      	b.n	8004ef8 <USB_EPStartXfer+0x674>
 8004e4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e52:	2b3e      	cmp	r3, #62	; 0x3e
 8004e54:	d817      	bhi.n	8004e86 <USB_EPStartXfer+0x602>
 8004e56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e5a:	085b      	lsrs	r3, r3, #1
 8004e5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004e60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d004      	beq.n	8004e76 <USB_EPStartXfer+0x5f2>
 8004e6c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e70:	3301      	adds	r3, #1
 8004e72:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004e76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	029b      	lsls	r3, r3, #10
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e82:	801a      	strh	r2, [r3, #0]
 8004e84:	e038      	b.n	8004ef8 <USB_EPStartXfer+0x674>
 8004e86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e8a:	095b      	lsrs	r3, r3, #5
 8004e8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004e90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e94:	f003 031f 	and.w	r3, r3, #31
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d104      	bne.n	8004ea6 <USB_EPStartXfer+0x622>
 8004e9c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004ea6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	029b      	lsls	r3, r3, #10
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ebc:	801a      	strh	r2, [r3, #0]
 8004ebe:	e01b      	b.n	8004ef8 <USB_EPStartXfer+0x674>
 8004ec0:	463b      	mov	r3, r7
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	785b      	ldrb	r3, [r3, #1]
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d116      	bne.n	8004ef8 <USB_EPStartXfer+0x674>
 8004eca:	1d3b      	adds	r3, r7, #4
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ed8:	4413      	add	r3, r2
 8004eda:	647b      	str	r3, [r7, #68]	; 0x44
 8004edc:	463b      	mov	r3, r7
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	011a      	lsls	r2, r3, #4
 8004ee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ee6:	4413      	add	r3, r2
 8004ee8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004eec:	643b      	str	r3, [r7, #64]	; 0x40
 8004eee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ef6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004ef8:	463b      	mov	r3, r7
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	895b      	ldrh	r3, [r3, #10]
 8004efe:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f02:	463b      	mov	r3, r7
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	6959      	ldr	r1, [r3, #20]
 8004f08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004f12:	1d38      	adds	r0, r7, #4
 8004f14:	6800      	ldr	r0, [r0, #0]
 8004f16:	f000 ff13 	bl	8005d40 <USB_WritePMA>
 8004f1a:	e1e2      	b.n	80052e2 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004f1c:	463b      	mov	r3, r7
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004f26:	1d3b      	adds	r3, r7, #4
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	463b      	mov	r3, r7
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4413      	add	r3, r2
 8004f34:	881b      	ldrh	r3, [r3, #0]
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f40:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004f44:	1d3b      	adds	r3, r7, #4
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	463b      	mov	r3, r7
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	441a      	add	r2, r3
 8004f52:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004f56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004f6a:	1d3b      	adds	r3, r7, #4
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	663b      	str	r3, [r7, #96]	; 0x60
 8004f70:	1d3b      	adds	r3, r7, #4
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f7e:	4413      	add	r3, r2
 8004f80:	663b      	str	r3, [r7, #96]	; 0x60
 8004f82:	463b      	mov	r3, r7
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	011a      	lsls	r2, r3, #4
 8004f8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f8c:	4413      	add	r3, r2
 8004f8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f9c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004f9e:	463b      	mov	r3, r7
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	891b      	ldrh	r3, [r3, #8]
 8004fa4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004fa8:	463b      	mov	r3, r7
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6959      	ldr	r1, [r3, #20]
 8004fae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004fb8:	1d38      	adds	r0, r7, #4
 8004fba:	6800      	ldr	r0, [r0, #0]
 8004fbc:	f000 fec0 	bl	8005d40 <USB_WritePMA>
 8004fc0:	e18f      	b.n	80052e2 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004fc2:	1d3b      	adds	r3, r7, #4
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	463b      	mov	r3, r7
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	4413      	add	r3, r2
 8004fd0:	881b      	ldrh	r3, [r3, #0]
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f000 808f 	beq.w	80050fc <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004fde:	1d3b      	adds	r3, r7, #4
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	67bb      	str	r3, [r7, #120]	; 0x78
 8004fe4:	463b      	mov	r3, r7
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	785b      	ldrb	r3, [r3, #1]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d164      	bne.n	80050b8 <USB_EPStartXfer+0x834>
 8004fee:	1d3b      	adds	r3, r7, #4
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	673b      	str	r3, [r7, #112]	; 0x70
 8004ff4:	1d3b      	adds	r3, r7, #4
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	461a      	mov	r2, r3
 8005000:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005002:	4413      	add	r3, r2
 8005004:	673b      	str	r3, [r7, #112]	; 0x70
 8005006:	463b      	mov	r3, r7
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	011a      	lsls	r2, r3, #4
 800500e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005010:	4413      	add	r3, r2
 8005012:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005016:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005018:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800501c:	2b00      	cmp	r3, #0
 800501e:	d112      	bne.n	8005046 <USB_EPStartXfer+0x7c2>
 8005020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005022:	881b      	ldrh	r3, [r3, #0]
 8005024:	b29b      	uxth	r3, r3
 8005026:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800502a:	b29a      	uxth	r2, r3
 800502c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800502e:	801a      	strh	r2, [r3, #0]
 8005030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005032:	881b      	ldrh	r3, [r3, #0]
 8005034:	b29b      	uxth	r3, r3
 8005036:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800503a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800503e:	b29a      	uxth	r2, r3
 8005040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005042:	801a      	strh	r2, [r3, #0]
 8005044:	e054      	b.n	80050f0 <USB_EPStartXfer+0x86c>
 8005046:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800504a:	2b3e      	cmp	r3, #62	; 0x3e
 800504c:	d817      	bhi.n	800507e <USB_EPStartXfer+0x7fa>
 800504e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005052:	085b      	lsrs	r3, r3, #1
 8005054:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005058:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	2b00      	cmp	r3, #0
 8005062:	d004      	beq.n	800506e <USB_EPStartXfer+0x7ea>
 8005064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005068:	3301      	adds	r3, #1
 800506a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800506e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005072:	b29b      	uxth	r3, r3
 8005074:	029b      	lsls	r3, r3, #10
 8005076:	b29a      	uxth	r2, r3
 8005078:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800507a:	801a      	strh	r2, [r3, #0]
 800507c:	e038      	b.n	80050f0 <USB_EPStartXfer+0x86c>
 800507e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005082:	095b      	lsrs	r3, r3, #5
 8005084:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005088:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800508c:	f003 031f 	and.w	r3, r3, #31
 8005090:	2b00      	cmp	r3, #0
 8005092:	d104      	bne.n	800509e <USB_EPStartXfer+0x81a>
 8005094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005098:	3b01      	subs	r3, #1
 800509a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800509e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	029b      	lsls	r3, r3, #10
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050b0:	b29a      	uxth	r2, r3
 80050b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b4:	801a      	strh	r2, [r3, #0]
 80050b6:	e01b      	b.n	80050f0 <USB_EPStartXfer+0x86c>
 80050b8:	463b      	mov	r3, r7
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	785b      	ldrb	r3, [r3, #1]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d116      	bne.n	80050f0 <USB_EPStartXfer+0x86c>
 80050c2:	1d3b      	adds	r3, r7, #4
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	461a      	mov	r2, r3
 80050ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050d0:	4413      	add	r3, r2
 80050d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80050d4:	463b      	mov	r3, r7
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	011a      	lsls	r2, r3, #4
 80050dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050de:	4413      	add	r3, r2
 80050e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80050e4:	677b      	str	r3, [r7, #116]	; 0x74
 80050e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050ea:	b29a      	uxth	r2, r3
 80050ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050ee:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80050f0:	463b      	mov	r3, r7
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	895b      	ldrh	r3, [r3, #10]
 80050f6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 80050fa:	e097      	b.n	800522c <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80050fc:	463b      	mov	r3, r7
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	785b      	ldrb	r3, [r3, #1]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d168      	bne.n	80051d8 <USB_EPStartXfer+0x954>
 8005106:	1d3b      	adds	r3, r7, #4
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800510e:	1d3b      	adds	r3, r7, #4
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005116:	b29b      	uxth	r3, r3
 8005118:	461a      	mov	r2, r3
 800511a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800511e:	4413      	add	r3, r2
 8005120:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005124:	463b      	mov	r3, r7
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	011a      	lsls	r2, r3, #4
 800512c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005130:	4413      	add	r3, r2
 8005132:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005136:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005138:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800513c:	2b00      	cmp	r3, #0
 800513e:	d112      	bne.n	8005166 <USB_EPStartXfer+0x8e2>
 8005140:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005142:	881b      	ldrh	r3, [r3, #0]
 8005144:	b29b      	uxth	r3, r3
 8005146:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800514a:	b29a      	uxth	r2, r3
 800514c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800514e:	801a      	strh	r2, [r3, #0]
 8005150:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005152:	881b      	ldrh	r3, [r3, #0]
 8005154:	b29b      	uxth	r3, r3
 8005156:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800515a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800515e:	b29a      	uxth	r2, r3
 8005160:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005162:	801a      	strh	r2, [r3, #0]
 8005164:	e05d      	b.n	8005222 <USB_EPStartXfer+0x99e>
 8005166:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800516a:	2b3e      	cmp	r3, #62	; 0x3e
 800516c:	d817      	bhi.n	800519e <USB_EPStartXfer+0x91a>
 800516e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005172:	085b      	lsrs	r3, r3, #1
 8005174:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005178:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800517c:	f003 0301 	and.w	r3, r3, #1
 8005180:	2b00      	cmp	r3, #0
 8005182:	d004      	beq.n	800518e <USB_EPStartXfer+0x90a>
 8005184:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005188:	3301      	adds	r3, #1
 800518a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800518e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005192:	b29b      	uxth	r3, r3
 8005194:	029b      	lsls	r3, r3, #10
 8005196:	b29a      	uxth	r2, r3
 8005198:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800519a:	801a      	strh	r2, [r3, #0]
 800519c:	e041      	b.n	8005222 <USB_EPStartXfer+0x99e>
 800519e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051a2:	095b      	lsrs	r3, r3, #5
 80051a4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80051a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051ac:	f003 031f 	and.w	r3, r3, #31
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d104      	bne.n	80051be <USB_EPStartXfer+0x93a>
 80051b4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80051b8:	3b01      	subs	r3, #1
 80051ba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80051be:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	029b      	lsls	r3, r3, #10
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80051d4:	801a      	strh	r2, [r3, #0]
 80051d6:	e024      	b.n	8005222 <USB_EPStartXfer+0x99e>
 80051d8:	463b      	mov	r3, r7
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	785b      	ldrb	r3, [r3, #1]
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d11f      	bne.n	8005222 <USB_EPStartXfer+0x99e>
 80051e2:	1d3b      	adds	r3, r7, #4
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80051ea:	1d3b      	adds	r3, r7, #4
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	461a      	mov	r2, r3
 80051f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051fa:	4413      	add	r3, r2
 80051fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005200:	463b      	mov	r3, r7
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	011a      	lsls	r2, r3, #4
 8005208:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800520c:	4413      	add	r3, r2
 800520e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005212:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005216:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800521a:	b29a      	uxth	r2, r3
 800521c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005220:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005222:	463b      	mov	r3, r7
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	891b      	ldrh	r3, [r3, #8]
 8005228:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800522c:	463b      	mov	r3, r7
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6959      	ldr	r1, [r3, #20]
 8005232:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005236:	b29b      	uxth	r3, r3
 8005238:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800523c:	1d38      	adds	r0, r7, #4
 800523e:	6800      	ldr	r0, [r0, #0]
 8005240:	f000 fd7e 	bl	8005d40 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005244:	463b      	mov	r3, r7
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	785b      	ldrb	r3, [r3, #1]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d122      	bne.n	8005294 <USB_EPStartXfer+0xa10>
 800524e:	1d3b      	adds	r3, r7, #4
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	463b      	mov	r3, r7
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	4413      	add	r3, r2
 800525c:	881b      	ldrh	r3, [r3, #0]
 800525e:	b29b      	uxth	r3, r3
 8005260:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005268:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800526c:	1d3b      	adds	r3, r7, #4
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	463b      	mov	r3, r7
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	441a      	add	r2, r3
 800527a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800527e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005282:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005286:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800528a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800528e:	b29b      	uxth	r3, r3
 8005290:	8013      	strh	r3, [r2, #0]
 8005292:	e026      	b.n	80052e2 <USB_EPStartXfer+0xa5e>
 8005294:	463b      	mov	r3, r7
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	785b      	ldrb	r3, [r3, #1]
 800529a:	2b01      	cmp	r3, #1
 800529c:	d121      	bne.n	80052e2 <USB_EPStartXfer+0xa5e>
 800529e:	1d3b      	adds	r3, r7, #4
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	463b      	mov	r3, r7
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	4413      	add	r3, r2
 80052ac:	881b      	ldrh	r3, [r3, #0]
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052b8:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80052bc:	1d3b      	adds	r3, r7, #4
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	463b      	mov	r3, r7
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	441a      	add	r2, r3
 80052ca:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80052ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052de:	b29b      	uxth	r3, r3
 80052e0:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80052e2:	1d3b      	adds	r3, r7, #4
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	463b      	mov	r3, r7
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4413      	add	r3, r2
 80052f0:	881b      	ldrh	r3, [r3, #0]
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	f107 020e 	add.w	r2, r7, #14
 80052f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005300:	8013      	strh	r3, [r2, #0]
 8005302:	f107 030e 	add.w	r3, r7, #14
 8005306:	f107 020e 	add.w	r2, r7, #14
 800530a:	8812      	ldrh	r2, [r2, #0]
 800530c:	f082 0210 	eor.w	r2, r2, #16
 8005310:	801a      	strh	r2, [r3, #0]
 8005312:	f107 030e 	add.w	r3, r7, #14
 8005316:	f107 020e 	add.w	r2, r7, #14
 800531a:	8812      	ldrh	r2, [r2, #0]
 800531c:	f082 0220 	eor.w	r2, r2, #32
 8005320:	801a      	strh	r2, [r3, #0]
 8005322:	1d3b      	adds	r3, r7, #4
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	463b      	mov	r3, r7
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	441a      	add	r2, r3
 8005330:	f107 030e 	add.w	r3, r7, #14
 8005334:	881b      	ldrh	r3, [r3, #0]
 8005336:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800533a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800533e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005346:	b29b      	uxth	r3, r3
 8005348:	8013      	strh	r3, [r2, #0]
 800534a:	e3b5      	b.n	8005ab8 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800534c:	463b      	mov	r3, r7
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	7b1b      	ldrb	r3, [r3, #12]
 8005352:	2b00      	cmp	r3, #0
 8005354:	f040 8090 	bne.w	8005478 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005358:	463b      	mov	r3, r7
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	699a      	ldr	r2, [r3, #24]
 800535e:	463b      	mov	r3, r7
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	429a      	cmp	r2, r3
 8005366:	d90e      	bls.n	8005386 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8005368:	463b      	mov	r3, r7
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8005372:	463b      	mov	r3, r7
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	699a      	ldr	r2, [r3, #24]
 8005378:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800537c:	1ad2      	subs	r2, r2, r3
 800537e:	463b      	mov	r3, r7
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	619a      	str	r2, [r3, #24]
 8005384:	e008      	b.n	8005398 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8005386:	463b      	mov	r3, r7
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8005390:	463b      	mov	r3, r7
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2200      	movs	r2, #0
 8005396:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005398:	1d3b      	adds	r3, r7, #4
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80053a0:	1d3b      	adds	r3, r7, #4
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	461a      	mov	r2, r3
 80053ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80053b0:	4413      	add	r3, r2
 80053b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80053b6:	463b      	mov	r3, r7
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	011a      	lsls	r2, r3, #4
 80053be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80053c2:	4413      	add	r3, r2
 80053c4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80053cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d116      	bne.n	8005402 <USB_EPStartXfer+0xb7e>
 80053d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80053d8:	881b      	ldrh	r3, [r3, #0]
 80053da:	b29b      	uxth	r3, r3
 80053dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80053e6:	801a      	strh	r2, [r3, #0]
 80053e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80053ec:	881b      	ldrh	r3, [r3, #0]
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80053fe:	801a      	strh	r2, [r3, #0]
 8005400:	e32c      	b.n	8005a5c <USB_EPStartXfer+0x11d8>
 8005402:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005406:	2b3e      	cmp	r3, #62	; 0x3e
 8005408:	d818      	bhi.n	800543c <USB_EPStartXfer+0xbb8>
 800540a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800540e:	085b      	lsrs	r3, r3, #1
 8005410:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005414:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005418:	f003 0301 	and.w	r3, r3, #1
 800541c:	2b00      	cmp	r3, #0
 800541e:	d004      	beq.n	800542a <USB_EPStartXfer+0xba6>
 8005420:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005424:	3301      	adds	r3, #1
 8005426:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800542a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800542e:	b29b      	uxth	r3, r3
 8005430:	029b      	lsls	r3, r3, #10
 8005432:	b29a      	uxth	r2, r3
 8005434:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005438:	801a      	strh	r2, [r3, #0]
 800543a:	e30f      	b.n	8005a5c <USB_EPStartXfer+0x11d8>
 800543c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005440:	095b      	lsrs	r3, r3, #5
 8005442:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005446:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800544a:	f003 031f 	and.w	r3, r3, #31
 800544e:	2b00      	cmp	r3, #0
 8005450:	d104      	bne.n	800545c <USB_EPStartXfer+0xbd8>
 8005452:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005456:	3b01      	subs	r3, #1
 8005458:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800545c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005460:	b29b      	uxth	r3, r3
 8005462:	029b      	lsls	r3, r3, #10
 8005464:	b29b      	uxth	r3, r3
 8005466:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800546a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800546e:	b29a      	uxth	r2, r3
 8005470:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005474:	801a      	strh	r2, [r3, #0]
 8005476:	e2f1      	b.n	8005a5c <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005478:	463b      	mov	r3, r7
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	78db      	ldrb	r3, [r3, #3]
 800547e:	2b02      	cmp	r3, #2
 8005480:	f040 818f 	bne.w	80057a2 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005484:	463b      	mov	r3, r7
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	785b      	ldrb	r3, [r3, #1]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d175      	bne.n	800557a <USB_EPStartXfer+0xcf6>
 800548e:	1d3b      	adds	r3, r7, #4
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005496:	1d3b      	adds	r3, r7, #4
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800549e:	b29b      	uxth	r3, r3
 80054a0:	461a      	mov	r2, r3
 80054a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80054a6:	4413      	add	r3, r2
 80054a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054ac:	463b      	mov	r3, r7
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	011a      	lsls	r2, r3, #4
 80054b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80054b8:	4413      	add	r3, r2
 80054ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80054c2:	463b      	mov	r3, r7
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d116      	bne.n	80054fa <USB_EPStartXfer+0xc76>
 80054cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054d0:	881b      	ldrh	r3, [r3, #0]
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054d8:	b29a      	uxth	r2, r3
 80054da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054de:	801a      	strh	r2, [r3, #0]
 80054e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054e4:	881b      	ldrh	r3, [r3, #0]
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054f6:	801a      	strh	r2, [r3, #0]
 80054f8:	e065      	b.n	80055c6 <USB_EPStartXfer+0xd42>
 80054fa:	463b      	mov	r3, r7
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	2b3e      	cmp	r3, #62	; 0x3e
 8005502:	d81a      	bhi.n	800553a <USB_EPStartXfer+0xcb6>
 8005504:	463b      	mov	r3, r7
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	085b      	lsrs	r3, r3, #1
 800550c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005510:	463b      	mov	r3, r7
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	2b00      	cmp	r3, #0
 800551c:	d004      	beq.n	8005528 <USB_EPStartXfer+0xca4>
 800551e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005522:	3301      	adds	r3, #1
 8005524:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005528:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800552c:	b29b      	uxth	r3, r3
 800552e:	029b      	lsls	r3, r3, #10
 8005530:	b29a      	uxth	r2, r3
 8005532:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005536:	801a      	strh	r2, [r3, #0]
 8005538:	e045      	b.n	80055c6 <USB_EPStartXfer+0xd42>
 800553a:	463b      	mov	r3, r7
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	095b      	lsrs	r3, r3, #5
 8005542:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005546:	463b      	mov	r3, r7
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	f003 031f 	and.w	r3, r3, #31
 8005550:	2b00      	cmp	r3, #0
 8005552:	d104      	bne.n	800555e <USB_EPStartXfer+0xcda>
 8005554:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005558:	3b01      	subs	r3, #1
 800555a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800555e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005562:	b29b      	uxth	r3, r3
 8005564:	029b      	lsls	r3, r3, #10
 8005566:	b29b      	uxth	r3, r3
 8005568:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800556c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005570:	b29a      	uxth	r2, r3
 8005572:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005576:	801a      	strh	r2, [r3, #0]
 8005578:	e025      	b.n	80055c6 <USB_EPStartXfer+0xd42>
 800557a:	463b      	mov	r3, r7
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	785b      	ldrb	r3, [r3, #1]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d120      	bne.n	80055c6 <USB_EPStartXfer+0xd42>
 8005584:	1d3b      	adds	r3, r7, #4
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800558c:	1d3b      	adds	r3, r7, #4
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005594:	b29b      	uxth	r3, r3
 8005596:	461a      	mov	r2, r3
 8005598:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800559c:	4413      	add	r3, r2
 800559e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80055a2:	463b      	mov	r3, r7
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	011a      	lsls	r2, r3, #4
 80055aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80055ae:	4413      	add	r3, r2
 80055b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055b8:	463b      	mov	r3, r7
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	b29a      	uxth	r2, r3
 80055c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80055c4:	801a      	strh	r2, [r3, #0]
 80055c6:	1d3b      	adds	r3, r7, #4
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80055ce:	463b      	mov	r3, r7
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	785b      	ldrb	r3, [r3, #1]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d175      	bne.n	80056c4 <USB_EPStartXfer+0xe40>
 80055d8:	1d3b      	adds	r3, r7, #4
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80055e0:	1d3b      	adds	r3, r7, #4
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	461a      	mov	r2, r3
 80055ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80055f0:	4413      	add	r3, r2
 80055f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80055f6:	463b      	mov	r3, r7
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	011a      	lsls	r2, r3, #4
 80055fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005602:	4413      	add	r3, r2
 8005604:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005608:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800560c:	463b      	mov	r3, r7
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d116      	bne.n	8005644 <USB_EPStartXfer+0xdc0>
 8005616:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800561a:	881b      	ldrh	r3, [r3, #0]
 800561c:	b29b      	uxth	r3, r3
 800561e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005622:	b29a      	uxth	r2, r3
 8005624:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005628:	801a      	strh	r2, [r3, #0]
 800562a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800562e:	881b      	ldrh	r3, [r3, #0]
 8005630:	b29b      	uxth	r3, r3
 8005632:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005636:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800563a:	b29a      	uxth	r2, r3
 800563c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005640:	801a      	strh	r2, [r3, #0]
 8005642:	e061      	b.n	8005708 <USB_EPStartXfer+0xe84>
 8005644:	463b      	mov	r3, r7
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	2b3e      	cmp	r3, #62	; 0x3e
 800564c:	d81a      	bhi.n	8005684 <USB_EPStartXfer+0xe00>
 800564e:	463b      	mov	r3, r7
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	085b      	lsrs	r3, r3, #1
 8005656:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800565a:	463b      	mov	r3, r7
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	f003 0301 	and.w	r3, r3, #1
 8005664:	2b00      	cmp	r3, #0
 8005666:	d004      	beq.n	8005672 <USB_EPStartXfer+0xdee>
 8005668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800566c:	3301      	adds	r3, #1
 800566e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005676:	b29b      	uxth	r3, r3
 8005678:	029b      	lsls	r3, r3, #10
 800567a:	b29a      	uxth	r2, r3
 800567c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005680:	801a      	strh	r2, [r3, #0]
 8005682:	e041      	b.n	8005708 <USB_EPStartXfer+0xe84>
 8005684:	463b      	mov	r3, r7
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	095b      	lsrs	r3, r3, #5
 800568c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005690:	463b      	mov	r3, r7
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	f003 031f 	and.w	r3, r3, #31
 800569a:	2b00      	cmp	r3, #0
 800569c:	d104      	bne.n	80056a8 <USB_EPStartXfer+0xe24>
 800569e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056a2:	3b01      	subs	r3, #1
 80056a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80056a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	029b      	lsls	r3, r3, #10
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056c0:	801a      	strh	r2, [r3, #0]
 80056c2:	e021      	b.n	8005708 <USB_EPStartXfer+0xe84>
 80056c4:	463b      	mov	r3, r7
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	785b      	ldrb	r3, [r3, #1]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d11c      	bne.n	8005708 <USB_EPStartXfer+0xe84>
 80056ce:	1d3b      	adds	r3, r7, #4
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	461a      	mov	r2, r3
 80056da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80056de:	4413      	add	r3, r2
 80056e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80056e4:	463b      	mov	r3, r7
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	011a      	lsls	r2, r3, #4
 80056ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80056f0:	4413      	add	r3, r2
 80056f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80056fa:	463b      	mov	r3, r7
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	b29a      	uxth	r2, r3
 8005702:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005706:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005708:	463b      	mov	r3, r7
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	69db      	ldr	r3, [r3, #28]
 800570e:	2b00      	cmp	r3, #0
 8005710:	f000 81a4 	beq.w	8005a5c <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005714:	1d3b      	adds	r3, r7, #4
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	463b      	mov	r3, r7
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4413      	add	r3, r2
 8005722:	881b      	ldrh	r3, [r3, #0]
 8005724:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005728:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800572c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d005      	beq.n	8005740 <USB_EPStartXfer+0xebc>
 8005734:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10d      	bne.n	800575c <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005740:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005744:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005748:	2b00      	cmp	r3, #0
 800574a:	f040 8187 	bne.w	8005a5c <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800574e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005756:	2b00      	cmp	r3, #0
 8005758:	f040 8180 	bne.w	8005a5c <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800575c:	1d3b      	adds	r3, r7, #4
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	463b      	mov	r3, r7
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	4413      	add	r3, r2
 800576a:	881b      	ldrh	r3, [r3, #0]
 800576c:	b29b      	uxth	r3, r3
 800576e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005776:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800577a:	1d3b      	adds	r3, r7, #4
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	463b      	mov	r3, r7
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	441a      	add	r2, r3
 8005788:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800578c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005790:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005794:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005798:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800579c:	b29b      	uxth	r3, r3
 800579e:	8013      	strh	r3, [r2, #0]
 80057a0:	e15c      	b.n	8005a5c <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80057a2:	463b      	mov	r3, r7
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	78db      	ldrb	r3, [r3, #3]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	f040 8155 	bne.w	8005a58 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80057ae:	463b      	mov	r3, r7
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	699a      	ldr	r2, [r3, #24]
 80057b4:	463b      	mov	r3, r7
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d90e      	bls.n	80057dc <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 80057be:	463b      	mov	r3, r7
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 80057c8:	463b      	mov	r3, r7
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	699a      	ldr	r2, [r3, #24]
 80057ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057d2:	1ad2      	subs	r2, r2, r3
 80057d4:	463b      	mov	r3, r7
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	619a      	str	r2, [r3, #24]
 80057da:	e008      	b.n	80057ee <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 80057dc:	463b      	mov	r3, r7
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 80057e6:	463b      	mov	r3, r7
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2200      	movs	r2, #0
 80057ec:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80057ee:	463b      	mov	r3, r7
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	785b      	ldrb	r3, [r3, #1]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d16f      	bne.n	80058d8 <USB_EPStartXfer+0x1054>
 80057f8:	1d3b      	adds	r3, r7, #4
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005800:	1d3b      	adds	r3, r7, #4
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005808:	b29b      	uxth	r3, r3
 800580a:	461a      	mov	r2, r3
 800580c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005810:	4413      	add	r3, r2
 8005812:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005816:	463b      	mov	r3, r7
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	011a      	lsls	r2, r3, #4
 800581e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005822:	4413      	add	r3, r2
 8005824:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005828:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800582c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005830:	2b00      	cmp	r3, #0
 8005832:	d116      	bne.n	8005862 <USB_EPStartXfer+0xfde>
 8005834:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005838:	881b      	ldrh	r3, [r3, #0]
 800583a:	b29b      	uxth	r3, r3
 800583c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005840:	b29a      	uxth	r2, r3
 8005842:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005846:	801a      	strh	r2, [r3, #0]
 8005848:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800584c:	881b      	ldrh	r3, [r3, #0]
 800584e:	b29b      	uxth	r3, r3
 8005850:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005854:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005858:	b29a      	uxth	r2, r3
 800585a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800585e:	801a      	strh	r2, [r3, #0]
 8005860:	e05f      	b.n	8005922 <USB_EPStartXfer+0x109e>
 8005862:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005866:	2b3e      	cmp	r3, #62	; 0x3e
 8005868:	d818      	bhi.n	800589c <USB_EPStartXfer+0x1018>
 800586a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800586e:	085b      	lsrs	r3, r3, #1
 8005870:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005874:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005878:	f003 0301 	and.w	r3, r3, #1
 800587c:	2b00      	cmp	r3, #0
 800587e:	d004      	beq.n	800588a <USB_EPStartXfer+0x1006>
 8005880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005884:	3301      	adds	r3, #1
 8005886:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800588a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800588e:	b29b      	uxth	r3, r3
 8005890:	029b      	lsls	r3, r3, #10
 8005892:	b29a      	uxth	r2, r3
 8005894:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005898:	801a      	strh	r2, [r3, #0]
 800589a:	e042      	b.n	8005922 <USB_EPStartXfer+0x109e>
 800589c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058a0:	095b      	lsrs	r3, r3, #5
 80058a2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80058a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058aa:	f003 031f 	and.w	r3, r3, #31
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d104      	bne.n	80058bc <USB_EPStartXfer+0x1038>
 80058b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058b6:	3b01      	subs	r3, #1
 80058b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80058bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	029b      	lsls	r3, r3, #10
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80058d4:	801a      	strh	r2, [r3, #0]
 80058d6:	e024      	b.n	8005922 <USB_EPStartXfer+0x109e>
 80058d8:	463b      	mov	r3, r7
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	785b      	ldrb	r3, [r3, #1]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d11f      	bne.n	8005922 <USB_EPStartXfer+0x109e>
 80058e2:	1d3b      	adds	r3, r7, #4
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80058ea:	1d3b      	adds	r3, r7, #4
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	461a      	mov	r2, r3
 80058f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058fa:	4413      	add	r3, r2
 80058fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005900:	463b      	mov	r3, r7
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	011a      	lsls	r2, r3, #4
 8005908:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800590c:	4413      	add	r3, r2
 800590e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005912:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005916:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800591a:	b29a      	uxth	r2, r3
 800591c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005920:	801a      	strh	r2, [r3, #0]
 8005922:	1d3b      	adds	r3, r7, #4
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800592a:	463b      	mov	r3, r7
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	785b      	ldrb	r3, [r3, #1]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d16f      	bne.n	8005a14 <USB_EPStartXfer+0x1190>
 8005934:	1d3b      	adds	r3, r7, #4
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800593c:	1d3b      	adds	r3, r7, #4
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005944:	b29b      	uxth	r3, r3
 8005946:	461a      	mov	r2, r3
 8005948:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800594c:	4413      	add	r3, r2
 800594e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005952:	463b      	mov	r3, r7
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	011a      	lsls	r2, r3, #4
 800595a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800595e:	4413      	add	r3, r2
 8005960:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005964:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005968:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800596c:	2b00      	cmp	r3, #0
 800596e:	d116      	bne.n	800599e <USB_EPStartXfer+0x111a>
 8005970:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005974:	881b      	ldrh	r3, [r3, #0]
 8005976:	b29b      	uxth	r3, r3
 8005978:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800597c:	b29a      	uxth	r2, r3
 800597e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005982:	801a      	strh	r2, [r3, #0]
 8005984:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005988:	881b      	ldrh	r3, [r3, #0]
 800598a:	b29b      	uxth	r3, r3
 800598c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005990:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005994:	b29a      	uxth	r2, r3
 8005996:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800599a:	801a      	strh	r2, [r3, #0]
 800599c:	e05e      	b.n	8005a5c <USB_EPStartXfer+0x11d8>
 800599e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059a2:	2b3e      	cmp	r3, #62	; 0x3e
 80059a4:	d818      	bhi.n	80059d8 <USB_EPStartXfer+0x1154>
 80059a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059aa:	085b      	lsrs	r3, r3, #1
 80059ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80059b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059b4:	f003 0301 	and.w	r3, r3, #1
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d004      	beq.n	80059c6 <USB_EPStartXfer+0x1142>
 80059bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059c0:	3301      	adds	r3, #1
 80059c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80059c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	029b      	lsls	r3, r3, #10
 80059ce:	b29a      	uxth	r2, r3
 80059d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80059d4:	801a      	strh	r2, [r3, #0]
 80059d6:	e041      	b.n	8005a5c <USB_EPStartXfer+0x11d8>
 80059d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059dc:	095b      	lsrs	r3, r3, #5
 80059de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80059e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059e6:	f003 031f 	and.w	r3, r3, #31
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d104      	bne.n	80059f8 <USB_EPStartXfer+0x1174>
 80059ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059f2:	3b01      	subs	r3, #1
 80059f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80059f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	029b      	lsls	r3, r3, #10
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a0a:	b29a      	uxth	r2, r3
 8005a0c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005a10:	801a      	strh	r2, [r3, #0]
 8005a12:	e023      	b.n	8005a5c <USB_EPStartXfer+0x11d8>
 8005a14:	463b      	mov	r3, r7
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	785b      	ldrb	r3, [r3, #1]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d11e      	bne.n	8005a5c <USB_EPStartXfer+0x11d8>
 8005a1e:	1d3b      	adds	r3, r7, #4
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	461a      	mov	r2, r3
 8005a2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a2e:	4413      	add	r3, r2
 8005a30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a34:	463b      	mov	r3, r7
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	011a      	lsls	r2, r3, #4
 8005a3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a40:	4413      	add	r3, r2
 8005a42:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a46:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a4e:	b29a      	uxth	r2, r3
 8005a50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005a54:	801a      	strh	r2, [r3, #0]
 8005a56:	e001      	b.n	8005a5c <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e02e      	b.n	8005aba <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005a5c:	1d3b      	adds	r3, r7, #4
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	463b      	mov	r3, r7
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	4413      	add	r3, r2
 8005a6a:	881b      	ldrh	r3, [r3, #0]
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a76:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005a7a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005a7e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005a82:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005a86:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005a8a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005a8e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005a92:	1d3b      	adds	r3, r7, #4
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	463b      	mov	r3, r7
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	441a      	add	r2, r3
 8005aa0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005aa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	785b      	ldrb	r3, [r3, #1]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d020      	beq.n	8005b18 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	4413      	add	r3, r2
 8005ae0:	881b      	ldrh	r3, [r3, #0]
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ae8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aec:	81bb      	strh	r3, [r7, #12]
 8005aee:	89bb      	ldrh	r3, [r7, #12]
 8005af0:	f083 0310 	eor.w	r3, r3, #16
 8005af4:	81bb      	strh	r3, [r7, #12]
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	441a      	add	r2, r3
 8005b00:	89bb      	ldrh	r3, [r7, #12]
 8005b02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	8013      	strh	r3, [r2, #0]
 8005b16:	e01f      	b.n	8005b58 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	4413      	add	r3, r2
 8005b22:	881b      	ldrh	r3, [r3, #0]
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b2e:	81fb      	strh	r3, [r7, #14]
 8005b30:	89fb      	ldrh	r3, [r7, #14]
 8005b32:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005b36:	81fb      	strh	r3, [r7, #14]
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	441a      	add	r2, r3
 8005b42:	89fb      	ldrh	r3, [r7, #14]
 8005b44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3714      	adds	r7, #20
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bc80      	pop	{r7}
 8005b62:	4770      	bx	lr

08005b64 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b087      	sub	sp, #28
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	7b1b      	ldrb	r3, [r3, #12]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	f040 809d 	bne.w	8005cb2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	785b      	ldrb	r3, [r3, #1]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d04c      	beq.n	8005c1a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4413      	add	r3, r2
 8005b8a:	881b      	ldrh	r3, [r3, #0]
 8005b8c:	823b      	strh	r3, [r7, #16]
 8005b8e:	8a3b      	ldrh	r3, [r7, #16]
 8005b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d01b      	beq.n	8005bd0 <USB_EPClearStall+0x6c>
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	4413      	add	r3, r2
 8005ba2:	881b      	ldrh	r3, [r3, #0]
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bae:	81fb      	strh	r3, [r7, #14]
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	441a      	add	r2, r3
 8005bba:	89fb      	ldrh	r3, [r7, #14]
 8005bbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bc8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	78db      	ldrb	r3, [r3, #3]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d06c      	beq.n	8005cb2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	4413      	add	r3, r2
 8005be2:	881b      	ldrh	r3, [r3, #0]
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bee:	81bb      	strh	r3, [r7, #12]
 8005bf0:	89bb      	ldrh	r3, [r7, #12]
 8005bf2:	f083 0320 	eor.w	r3, r3, #32
 8005bf6:	81bb      	strh	r3, [r7, #12]
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	441a      	add	r2, r3
 8005c02:	89bb      	ldrh	r3, [r7, #12]
 8005c04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	8013      	strh	r3, [r2, #0]
 8005c18:	e04b      	b.n	8005cb2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	4413      	add	r3, r2
 8005c24:	881b      	ldrh	r3, [r3, #0]
 8005c26:	82fb      	strh	r3, [r7, #22]
 8005c28:	8afb      	ldrh	r3, [r7, #22]
 8005c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d01b      	beq.n	8005c6a <USB_EPClearStall+0x106>
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	4413      	add	r3, r2
 8005c3c:	881b      	ldrh	r3, [r3, #0]
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c48:	82bb      	strh	r3, [r7, #20]
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	441a      	add	r2, r3
 8005c54:	8abb      	ldrh	r3, [r7, #20]
 8005c56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4413      	add	r3, r2
 8005c74:	881b      	ldrh	r3, [r3, #0]
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c80:	827b      	strh	r3, [r7, #18]
 8005c82:	8a7b      	ldrh	r3, [r7, #18]
 8005c84:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005c88:	827b      	strh	r3, [r7, #18]
 8005c8a:	8a7b      	ldrh	r3, [r7, #18]
 8005c8c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005c90:	827b      	strh	r3, [r7, #18]
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	441a      	add	r2, r3
 8005c9c:	8a7b      	ldrh	r3, [r7, #18]
 8005c9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ca2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ca6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	371c      	adds	r7, #28
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bc80      	pop	{r7}
 8005cbc:	4770      	bx	lr

08005cbe <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b083      	sub	sp, #12
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005cca:	78fb      	ldrb	r3, [r7, #3]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d103      	bne.n	8005cd8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2280      	movs	r2, #128	; 0x80
 8005cd4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	370c      	adds	r7, #12
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bc80      	pop	{r7}
 8005ce2:	4770      	bx	lr

08005ce4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	370c      	adds	r7, #12
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bc80      	pop	{r7}
 8005cf6:	4770      	bx	lr

08005cf8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	370c      	adds	r7, #12
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bc80      	pop	{r7}
 8005d0a:	4770      	bx	lr

08005d0c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b085      	sub	sp, #20
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3714      	adds	r7, #20
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bc80      	pop	{r7}
 8005d28:	4770      	bx	lr

08005d2a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	b083      	sub	sp, #12
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
 8005d32:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	370c      	adds	r7, #12
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bc80      	pop	{r7}
 8005d3e:	4770      	bx	lr

08005d40 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b08d      	sub	sp, #52	; 0x34
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	4611      	mov	r1, r2
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	460b      	mov	r3, r1
 8005d50:	80fb      	strh	r3, [r7, #6]
 8005d52:	4613      	mov	r3, r2
 8005d54:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005d56:	88bb      	ldrh	r3, [r7, #4]
 8005d58:	3301      	adds	r3, #1
 8005d5a:	085b      	lsrs	r3, r3, #1
 8005d5c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005d66:	88fb      	ldrh	r3, [r7, #6]
 8005d68:	005a      	lsls	r2, r3, #1
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d72:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005d74:	6a3b      	ldr	r3, [r7, #32]
 8005d76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d78:	e01e      	b.n	8005db8 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d82:	3301      	adds	r3, #1
 8005d84:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	021b      	lsls	r3, r3, #8
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	461a      	mov	r2, r3
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da2:	3302      	adds	r3, #2
 8005da4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da8:	3302      	adds	r3, #2
 8005daa:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dae:	3301      	adds	r3, #1
 8005db0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db4:	3b01      	subs	r3, #1
 8005db6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1dd      	bne.n	8005d7a <USB_WritePMA+0x3a>
  }
}
 8005dbe:	bf00      	nop
 8005dc0:	3734      	adds	r7, #52	; 0x34
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bc80      	pop	{r7}
 8005dc6:	4770      	bx	lr

08005dc8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b08b      	sub	sp, #44	; 0x2c
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	4611      	mov	r1, r2
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	80fb      	strh	r3, [r7, #6]
 8005dda:	4613      	mov	r3, r2
 8005ddc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005dde:	88bb      	ldrh	r3, [r7, #4]
 8005de0:	085b      	lsrs	r3, r3, #1
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005dee:	88fb      	ldrh	r3, [r7, #6]
 8005df0:	005a      	lsls	r2, r3, #1
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	4413      	add	r3, r2
 8005df6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dfa:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	627b      	str	r3, [r7, #36]	; 0x24
 8005e00:	e01b      	b.n	8005e3a <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005e02:	6a3b      	ldr	r3, [r7, #32]
 8005e04:	881b      	ldrh	r3, [r3, #0]
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005e0a:	6a3b      	ldr	r3, [r7, #32]
 8005e0c:	3302      	adds	r3, #2
 8005e0e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	b2da      	uxtb	r2, r3
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	0a1b      	lsrs	r3, r3, #8
 8005e22:	b2da      	uxtb	r2, r3
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005e2e:	6a3b      	ldr	r3, [r7, #32]
 8005e30:	3302      	adds	r3, #2
 8005e32:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8005e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e36:	3b01      	subs	r3, #1
 8005e38:	627b      	str	r3, [r7, #36]	; 0x24
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d1e0      	bne.n	8005e02 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005e40:	88bb      	ldrh	r3, [r7, #4]
 8005e42:	f003 0301 	and.w	r3, r3, #1
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d007      	beq.n	8005e5c <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8005e4c:	6a3b      	ldr	r3, [r7, #32]
 8005e4e:	881b      	ldrh	r3, [r3, #0]
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	b2da      	uxtb	r2, r3
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	701a      	strb	r2, [r3, #0]
  }
}
 8005e5c:	bf00      	nop
 8005e5e:	372c      	adds	r7, #44	; 0x2c
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bc80      	pop	{r7}
 8005e64:	4770      	bx	lr

08005e66 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e66:	b580      	push	{r7, lr}
 8005e68:	b084      	sub	sp, #16
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
 8005e6e:	460b      	mov	r3, r1
 8005e70:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005e72:	2300      	movs	r3, #0
 8005e74:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	7c1b      	ldrb	r3, [r3, #16]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d115      	bne.n	8005eaa <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005e7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e82:	2202      	movs	r2, #2
 8005e84:	2181      	movs	r1, #129	; 0x81
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f001 fe75 	bl	8007b76 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005e92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e96:	2202      	movs	r2, #2
 8005e98:	2101      	movs	r1, #1
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f001 fe6b 	bl	8007b76 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8005ea8:	e012      	b.n	8005ed0 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005eaa:	2340      	movs	r3, #64	; 0x40
 8005eac:	2202      	movs	r2, #2
 8005eae:	2181      	movs	r1, #129	; 0x81
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f001 fe60 	bl	8007b76 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005ebc:	2340      	movs	r3, #64	; 0x40
 8005ebe:	2202      	movs	r2, #2
 8005ec0:	2101      	movs	r1, #1
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f001 fe57 	bl	8007b76 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005ed0:	2308      	movs	r3, #8
 8005ed2:	2203      	movs	r2, #3
 8005ed4:	2182      	movs	r1, #130	; 0x82
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f001 fe4d 	bl	8007b76 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005ee2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005ee6:	f001 ff6d 	bl	8007dc4 <USBD_static_malloc>
 8005eea:	4602      	mov	r2, r0
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d102      	bne.n	8005f02 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005efc:	2301      	movs	r3, #1
 8005efe:	73fb      	strb	r3, [r7, #15]
 8005f00:	e026      	b.n	8005f50 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f08:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	7c1b      	ldrb	r3, [r3, #16]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d109      	bne.n	8005f40 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f36:	2101      	movs	r1, #1
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f001 ff0d 	bl	8007d58 <USBD_LL_PrepareReceive>
 8005f3e:	e007      	b.n	8005f50 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f46:	2340      	movs	r3, #64	; 0x40
 8005f48:	2101      	movs	r1, #1
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f001 ff04 	bl	8007d58 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b084      	sub	sp, #16
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
 8005f62:	460b      	mov	r3, r1
 8005f64:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005f66:	2300      	movs	r3, #0
 8005f68:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005f6a:	2181      	movs	r1, #129	; 0x81
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f001 fe28 	bl	8007bc2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005f78:	2101      	movs	r1, #1
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f001 fe21 	bl	8007bc2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005f88:	2182      	movs	r1, #130	; 0x82
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f001 fe19 	bl	8007bc2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00e      	beq.n	8005fbe <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f001 ff13 	bl	8007ddc <USBD_static_free>
    pdev->pClassData = NULL;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3710      	adds	r7, #16
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b086      	sub	sp, #24
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fd8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d039      	beq.n	8006066 <USBD_CDC_Setup+0x9e>
 8005ff2:	2b20      	cmp	r3, #32
 8005ff4:	d17c      	bne.n	80060f0 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	88db      	ldrh	r3, [r3, #6]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d029      	beq.n	8006052 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	b25b      	sxtb	r3, r3
 8006004:	2b00      	cmp	r3, #0
 8006006:	da11      	bge.n	800602c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	683a      	ldr	r2, [r7, #0]
 8006012:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006014:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006016:	683a      	ldr	r2, [r7, #0]
 8006018:	88d2      	ldrh	r2, [r2, #6]
 800601a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800601c:	6939      	ldr	r1, [r7, #16]
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	88db      	ldrh	r3, [r3, #6]
 8006022:	461a      	mov	r2, r3
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f001 f9f9 	bl	800741c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800602a:	e068      	b.n	80060fe <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	785a      	ldrb	r2, [r3, #1]
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	88db      	ldrh	r3, [r3, #6]
 800603a:	b2da      	uxtb	r2, r3
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006042:	6939      	ldr	r1, [r7, #16]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	88db      	ldrh	r3, [r3, #6]
 8006048:	461a      	mov	r2, r3
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f001 fa14 	bl	8007478 <USBD_CtlPrepareRx>
      break;
 8006050:	e055      	b.n	80060fe <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	683a      	ldr	r2, [r7, #0]
 800605c:	7850      	ldrb	r0, [r2, #1]
 800605e:	2200      	movs	r2, #0
 8006060:	6839      	ldr	r1, [r7, #0]
 8006062:	4798      	blx	r3
      break;
 8006064:	e04b      	b.n	80060fe <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	785b      	ldrb	r3, [r3, #1]
 800606a:	2b0a      	cmp	r3, #10
 800606c:	d017      	beq.n	800609e <USBD_CDC_Setup+0xd6>
 800606e:	2b0b      	cmp	r3, #11
 8006070:	d029      	beq.n	80060c6 <USBD_CDC_Setup+0xfe>
 8006072:	2b00      	cmp	r3, #0
 8006074:	d133      	bne.n	80060de <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800607c:	2b03      	cmp	r3, #3
 800607e:	d107      	bne.n	8006090 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006080:	f107 030c 	add.w	r3, r7, #12
 8006084:	2202      	movs	r2, #2
 8006086:	4619      	mov	r1, r3
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f001 f9c7 	bl	800741c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800608e:	e02e      	b.n	80060ee <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006090:	6839      	ldr	r1, [r7, #0]
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f001 f958 	bl	8007348 <USBD_CtlError>
            ret = USBD_FAIL;
 8006098:	2302      	movs	r3, #2
 800609a:	75fb      	strb	r3, [r7, #23]
          break;
 800609c:	e027      	b.n	80060ee <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060a4:	2b03      	cmp	r3, #3
 80060a6:	d107      	bne.n	80060b8 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80060a8:	f107 030f 	add.w	r3, r7, #15
 80060ac:	2201      	movs	r2, #1
 80060ae:	4619      	mov	r1, r3
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f001 f9b3 	bl	800741c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80060b6:	e01a      	b.n	80060ee <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80060b8:	6839      	ldr	r1, [r7, #0]
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f001 f944 	bl	8007348 <USBD_CtlError>
            ret = USBD_FAIL;
 80060c0:	2302      	movs	r3, #2
 80060c2:	75fb      	strb	r3, [r7, #23]
          break;
 80060c4:	e013      	b.n	80060ee <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060cc:	2b03      	cmp	r3, #3
 80060ce:	d00d      	beq.n	80060ec <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80060d0:	6839      	ldr	r1, [r7, #0]
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f001 f938 	bl	8007348 <USBD_CtlError>
            ret = USBD_FAIL;
 80060d8:	2302      	movs	r3, #2
 80060da:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80060dc:	e006      	b.n	80060ec <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80060de:	6839      	ldr	r1, [r7, #0]
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f001 f931 	bl	8007348 <USBD_CtlError>
          ret = USBD_FAIL;
 80060e6:	2302      	movs	r3, #2
 80060e8:	75fb      	strb	r3, [r7, #23]
          break;
 80060ea:	e000      	b.n	80060ee <USBD_CDC_Setup+0x126>
          break;
 80060ec:	bf00      	nop
      }
      break;
 80060ee:	e006      	b.n	80060fe <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 80060f0:	6839      	ldr	r1, [r7, #0]
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f001 f928 	bl	8007348 <USBD_CtlError>
      ret = USBD_FAIL;
 80060f8:	2302      	movs	r3, #2
 80060fa:	75fb      	strb	r3, [r7, #23]
      break;
 80060fc:	bf00      	nop
  }

  return ret;
 80060fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006100:	4618      	mov	r0, r3
 8006102:	3718      	adds	r7, #24
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	460b      	mov	r3, r1
 8006112:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800611a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006122:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800612a:	2b00      	cmp	r3, #0
 800612c:	d03a      	beq.n	80061a4 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800612e:	78fa      	ldrb	r2, [r7, #3]
 8006130:	6879      	ldr	r1, [r7, #4]
 8006132:	4613      	mov	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4413      	add	r3, r2
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	440b      	add	r3, r1
 800613c:	331c      	adds	r3, #28
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d029      	beq.n	8006198 <USBD_CDC_DataIn+0x90>
 8006144:	78fa      	ldrb	r2, [r7, #3]
 8006146:	6879      	ldr	r1, [r7, #4]
 8006148:	4613      	mov	r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4413      	add	r3, r2
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	440b      	add	r3, r1
 8006152:	331c      	adds	r3, #28
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	78f9      	ldrb	r1, [r7, #3]
 8006158:	68b8      	ldr	r0, [r7, #8]
 800615a:	460b      	mov	r3, r1
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	440b      	add	r3, r1
 8006160:	00db      	lsls	r3, r3, #3
 8006162:	4403      	add	r3, r0
 8006164:	3338      	adds	r3, #56	; 0x38
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	fbb2 f1f3 	udiv	r1, r2, r3
 800616c:	fb03 f301 	mul.w	r3, r3, r1
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d110      	bne.n	8006198 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006176:	78fa      	ldrb	r2, [r7, #3]
 8006178:	6879      	ldr	r1, [r7, #4]
 800617a:	4613      	mov	r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4413      	add	r3, r2
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	440b      	add	r3, r1
 8006184:	331c      	adds	r3, #28
 8006186:	2200      	movs	r2, #0
 8006188:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800618a:	78f9      	ldrb	r1, [r7, #3]
 800618c:	2300      	movs	r3, #0
 800618e:	2200      	movs	r2, #0
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f001 fdbe 	bl	8007d12 <USBD_LL_Transmit>
 8006196:	e003      	b.n	80061a0 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80061a0:	2300      	movs	r3, #0
 80061a2:	e000      	b.n	80061a6 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80061a4:	2302      	movs	r3, #2
  }
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b084      	sub	sp, #16
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
 80061b6:	460b      	mov	r3, r1
 80061b8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061c0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80061c2:	78fb      	ldrb	r3, [r7, #3]
 80061c4:	4619      	mov	r1, r3
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f001 fde9 	bl	8007d9e <USBD_LL_GetRxDataSize>
 80061cc:	4602      	mov	r2, r0
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00d      	beq.n	80061fa <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80061f2:	4611      	mov	r1, r2
 80061f4:	4798      	blx	r3

    return USBD_OK;
 80061f6:	2300      	movs	r3, #0
 80061f8:	e000      	b.n	80061fc <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80061fa:	2302      	movs	r3, #2
  }
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3710      	adds	r7, #16
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006212:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800621a:	2b00      	cmp	r3, #0
 800621c:	d015      	beq.n	800624a <USBD_CDC_EP0_RxReady+0x46>
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006224:	2bff      	cmp	r3, #255	; 0xff
 8006226:	d010      	beq.n	800624a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006236:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800623e:	b292      	uxth	r2, r2
 8006240:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	22ff      	movs	r2, #255	; 0xff
 8006246:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2243      	movs	r2, #67	; 0x43
 8006260:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006262:	4b03      	ldr	r3, [pc, #12]	; (8006270 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006264:	4618      	mov	r0, r3
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	bc80      	pop	{r7}
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	20000094 	.word	0x20000094

08006274 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2243      	movs	r2, #67	; 0x43
 8006280:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006282:	4b03      	ldr	r3, [pc, #12]	; (8006290 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006284:	4618      	mov	r0, r3
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	bc80      	pop	{r7}
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	20000050 	.word	0x20000050

08006294 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2243      	movs	r2, #67	; 0x43
 80062a0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80062a2:	4b03      	ldr	r3, [pc, #12]	; (80062b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bc80      	pop	{r7}
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	200000d8 	.word	0x200000d8

080062b4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	220a      	movs	r2, #10
 80062c0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80062c2:	4b03      	ldr	r3, [pc, #12]	; (80062d0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bc80      	pop	{r7}
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	2000000c 	.word	0x2000000c

080062d4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80062de:	2302      	movs	r3, #2
 80062e0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d005      	beq.n	80062f4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	683a      	ldr	r2, [r7, #0]
 80062ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80062f0:	2300      	movs	r3, #0
 80062f2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80062f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3714      	adds	r7, #20
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bc80      	pop	{r7}
 80062fe:	4770      	bx	lr

08006300 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006300:	b480      	push	{r7}
 8006302:	b087      	sub	sp, #28
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	4613      	mov	r3, r2
 800630c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006314:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	68ba      	ldr	r2, [r7, #8]
 800631a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800631e:	88fa      	ldrh	r2, [r7, #6]
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	371c      	adds	r7, #28
 800632c:	46bd      	mov	sp, r7
 800632e:	bc80      	pop	{r7}
 8006330:	4770      	bx	lr

08006332 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006332:	b480      	push	{r7}
 8006334:	b085      	sub	sp, #20
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
 800633a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006342:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	683a      	ldr	r2, [r7, #0]
 8006348:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3714      	adds	r7, #20
 8006352:	46bd      	mov	sp, r7
 8006354:	bc80      	pop	{r7}
 8006356:	4770      	bx	lr

08006358 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006366:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800636e:	2b00      	cmp	r3, #0
 8006370:	d01c      	beq.n	80063ac <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006378:	2b00      	cmp	r3, #0
 800637a:	d115      	bne.n	80063a8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2201      	movs	r2, #1
 8006380:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800639a:	b29b      	uxth	r3, r3
 800639c:	2181      	movs	r1, #129	; 0x81
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f001 fcb7 	bl	8007d12 <USBD_LL_Transmit>

      return USBD_OK;
 80063a4:	2300      	movs	r3, #0
 80063a6:	e002      	b.n	80063ae <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e000      	b.n	80063ae <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80063ac:	2302      	movs	r3, #2
  }
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80063b6:	b580      	push	{r7, lr}
 80063b8:	b084      	sub	sp, #16
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063c4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d017      	beq.n	8006400 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	7c1b      	ldrb	r3, [r3, #16]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d109      	bne.n	80063ec <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80063de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063e2:	2101      	movs	r1, #1
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f001 fcb7 	bl	8007d58 <USBD_LL_PrepareReceive>
 80063ea:	e007      	b.n	80063fc <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80063f2:	2340      	movs	r3, #64	; 0x40
 80063f4:	2101      	movs	r1, #1
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f001 fcae 	bl	8007d58 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80063fc:	2300      	movs	r3, #0
 80063fe:	e000      	b.n	8006402 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006400:	2302      	movs	r3, #2
  }
}
 8006402:	4618      	mov	r0, r3
 8006404:	3710      	adds	r7, #16
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800640a:	b580      	push	{r7, lr}
 800640c:	b084      	sub	sp, #16
 800640e:	af00      	add	r7, sp, #0
 8006410:	60f8      	str	r0, [r7, #12]
 8006412:	60b9      	str	r1, [r7, #8]
 8006414:	4613      	mov	r3, r2
 8006416:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d101      	bne.n	8006422 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800641e:	2302      	movs	r3, #2
 8006420:	e01a      	b.n	8006458 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006428:	2b00      	cmp	r3, #0
 800642a:	d003      	beq.n	8006434 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2200      	movs	r2, #0
 8006430:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d003      	beq.n	8006442 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	68ba      	ldr	r2, [r7, #8]
 800643e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2201      	movs	r2, #1
 8006446:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	79fa      	ldrb	r2, [r7, #7]
 800644e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006450:	68f8      	ldr	r0, [r7, #12]
 8006452:	f001 fb1b 	bl	8007a8c <USBD_LL_Init>

  return USBD_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3710      	adds	r7, #16
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006460:	b480      	push	{r7}
 8006462:	b085      	sub	sp, #20
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800646a:	2300      	movs	r3, #0
 800646c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d006      	beq.n	8006482 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	683a      	ldr	r2, [r7, #0]
 8006478:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800647c:	2300      	movs	r3, #0
 800647e:	73fb      	strb	r3, [r7, #15]
 8006480:	e001      	b.n	8006486 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006482:	2302      	movs	r3, #2
 8006484:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006486:	7bfb      	ldrb	r3, [r7, #15]
}
 8006488:	4618      	mov	r0, r3
 800648a:	3714      	adds	r7, #20
 800648c:	46bd      	mov	sp, r7
 800648e:	bc80      	pop	{r7}
 8006490:	4770      	bx	lr

08006492 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b082      	sub	sp, #8
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f001 fb50 	bl	8007b40 <USBD_LL_Start>

  return USBD_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3708      	adds	r7, #8
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}

080064aa <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80064aa:	b480      	push	{r7}
 80064ac:	b083      	sub	sp, #12
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bc80      	pop	{r7}
 80064bc:	4770      	bx	lr

080064be <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80064be:	b580      	push	{r7, lr}
 80064c0:	b084      	sub	sp, #16
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
 80064c6:	460b      	mov	r3, r1
 80064c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80064ca:	2302      	movs	r3, #2
 80064cc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00c      	beq.n	80064f2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	78fa      	ldrb	r2, [r7, #3]
 80064e2:	4611      	mov	r1, r2
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	4798      	blx	r3
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d101      	bne.n	80064f2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80064ee:	2300      	movs	r3, #0
 80064f0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80064f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3710      	adds	r7, #16
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	460b      	mov	r3, r1
 8006506:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	78fa      	ldrb	r2, [r7, #3]
 8006512:	4611      	mov	r1, r2
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	4798      	blx	r3

  return USBD_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3708      	adds	r7, #8
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006522:	b580      	push	{r7, lr}
 8006524:	b082      	sub	sp, #8
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
 800652a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006532:	6839      	ldr	r1, [r7, #0]
 8006534:	4618      	mov	r0, r3
 8006536:	f000 fecb 	bl	80072d0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2201      	movs	r2, #1
 800653e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006548:	461a      	mov	r2, r3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006556:	f003 031f 	and.w	r3, r3, #31
 800655a:	2b01      	cmp	r3, #1
 800655c:	d00c      	beq.n	8006578 <USBD_LL_SetupStage+0x56>
 800655e:	2b01      	cmp	r3, #1
 8006560:	d302      	bcc.n	8006568 <USBD_LL_SetupStage+0x46>
 8006562:	2b02      	cmp	r3, #2
 8006564:	d010      	beq.n	8006588 <USBD_LL_SetupStage+0x66>
 8006566:	e017      	b.n	8006598 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800656e:	4619      	mov	r1, r3
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 f9cb 	bl	800690c <USBD_StdDevReq>
      break;
 8006576:	e01a      	b.n	80065ae <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800657e:	4619      	mov	r1, r3
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 fa2d 	bl	80069e0 <USBD_StdItfReq>
      break;
 8006586:	e012      	b.n	80065ae <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800658e:	4619      	mov	r1, r3
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 fa6b 	bl	8006a6c <USBD_StdEPReq>
      break;
 8006596:	e00a      	b.n	80065ae <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800659e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	4619      	mov	r1, r3
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f001 fb2a 	bl	8007c00 <USBD_LL_StallEP>
      break;
 80065ac:	bf00      	nop
  }

  return USBD_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3708      	adds	r7, #8
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b086      	sub	sp, #24
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	460b      	mov	r3, r1
 80065c2:	607a      	str	r2, [r7, #4]
 80065c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80065c6:	7afb      	ldrb	r3, [r7, #11]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d14b      	bne.n	8006664 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80065d2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80065da:	2b03      	cmp	r3, #3
 80065dc:	d134      	bne.n	8006648 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	68da      	ldr	r2, [r3, #12]
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d919      	bls.n	800661e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	68da      	ldr	r2, [r3, #12]
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	1ad2      	subs	r2, r2, r3
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	68da      	ldr	r2, [r3, #12]
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006600:	429a      	cmp	r2, r3
 8006602:	d203      	bcs.n	800660c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006608:	b29b      	uxth	r3, r3
 800660a:	e002      	b.n	8006612 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006610:	b29b      	uxth	r3, r3
 8006612:	461a      	mov	r2, r3
 8006614:	6879      	ldr	r1, [r7, #4]
 8006616:	68f8      	ldr	r0, [r7, #12]
 8006618:	f000 ff4c 	bl	80074b4 <USBD_CtlContinueRx>
 800661c:	e038      	b.n	8006690 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00a      	beq.n	8006640 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006630:	2b03      	cmp	r3, #3
 8006632:	d105      	bne.n	8006640 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	68f8      	ldr	r0, [r7, #12]
 800663e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f000 ff49 	bl	80074d8 <USBD_CtlSendStatus>
 8006646:	e023      	b.n	8006690 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800664e:	2b05      	cmp	r3, #5
 8006650:	d11e      	bne.n	8006690 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800665a:	2100      	movs	r1, #0
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f001 facf 	bl	8007c00 <USBD_LL_StallEP>
 8006662:	e015      	b.n	8006690 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00d      	beq.n	800668c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006676:	2b03      	cmp	r3, #3
 8006678:	d108      	bne.n	800668c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006680:	699b      	ldr	r3, [r3, #24]
 8006682:	7afa      	ldrb	r2, [r7, #11]
 8006684:	4611      	mov	r1, r2
 8006686:	68f8      	ldr	r0, [r7, #12]
 8006688:	4798      	blx	r3
 800668a:	e001      	b.n	8006690 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800668c:	2302      	movs	r3, #2
 800668e:	e000      	b.n	8006692 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3718      	adds	r7, #24
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800669a:	b580      	push	{r7, lr}
 800669c:	b086      	sub	sp, #24
 800669e:	af00      	add	r7, sp, #0
 80066a0:	60f8      	str	r0, [r7, #12]
 80066a2:	460b      	mov	r3, r1
 80066a4:	607a      	str	r2, [r7, #4]
 80066a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80066a8:	7afb      	ldrb	r3, [r7, #11]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d17f      	bne.n	80067ae <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	3314      	adds	r3, #20
 80066b2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	d15c      	bne.n	8006778 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	68da      	ldr	r2, [r3, #12]
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d915      	bls.n	80066f6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	68da      	ldr	r2, [r3, #12]
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	1ad2      	subs	r2, r2, r3
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	b29b      	uxth	r3, r3
 80066de:	461a      	mov	r2, r3
 80066e0:	6879      	ldr	r1, [r7, #4]
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f000 feb6 	bl	8007454 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80066e8:	2300      	movs	r3, #0
 80066ea:	2200      	movs	r2, #0
 80066ec:	2100      	movs	r1, #0
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f001 fb32 	bl	8007d58 <USBD_LL_PrepareReceive>
 80066f4:	e04e      	b.n	8006794 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	697a      	ldr	r2, [r7, #20]
 80066fc:	6912      	ldr	r2, [r2, #16]
 80066fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8006702:	fb02 f201 	mul.w	r2, r2, r1
 8006706:	1a9b      	subs	r3, r3, r2
 8006708:	2b00      	cmp	r3, #0
 800670a:	d11c      	bne.n	8006746 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	689a      	ldr	r2, [r3, #8]
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006714:	429a      	cmp	r2, r3
 8006716:	d316      	bcc.n	8006746 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	689a      	ldr	r2, [r3, #8]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006722:	429a      	cmp	r2, r3
 8006724:	d20f      	bcs.n	8006746 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006726:	2200      	movs	r2, #0
 8006728:	2100      	movs	r1, #0
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	f000 fe92 	bl	8007454 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006738:	2300      	movs	r3, #0
 800673a:	2200      	movs	r2, #0
 800673c:	2100      	movs	r1, #0
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f001 fb0a 	bl	8007d58 <USBD_LL_PrepareReceive>
 8006744:	e026      	b.n	8006794 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00a      	beq.n	8006768 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006758:	2b03      	cmp	r3, #3
 800675a:	d105      	bne.n	8006768 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006768:	2180      	movs	r1, #128	; 0x80
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f001 fa48 	bl	8007c00 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f000 fec4 	bl	80074fe <USBD_CtlReceiveStatus>
 8006776:	e00d      	b.n	8006794 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800677e:	2b04      	cmp	r3, #4
 8006780:	d004      	beq.n	800678c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006788:	2b00      	cmp	r3, #0
 800678a:	d103      	bne.n	8006794 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800678c:	2180      	movs	r1, #128	; 0x80
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	f001 fa36 	bl	8007c00 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800679a:	2b01      	cmp	r3, #1
 800679c:	d11d      	bne.n	80067da <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f7ff fe83 	bl	80064aa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80067ac:	e015      	b.n	80067da <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067b4:	695b      	ldr	r3, [r3, #20]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00d      	beq.n	80067d6 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80067c0:	2b03      	cmp	r3, #3
 80067c2:	d108      	bne.n	80067d6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067ca:	695b      	ldr	r3, [r3, #20]
 80067cc:	7afa      	ldrb	r2, [r7, #11]
 80067ce:	4611      	mov	r1, r2
 80067d0:	68f8      	ldr	r0, [r7, #12]
 80067d2:	4798      	blx	r3
 80067d4:	e001      	b.n	80067da <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80067d6:	2302      	movs	r3, #2
 80067d8:	e000      	b.n	80067dc <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3718      	adds	r7, #24
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067ec:	2340      	movs	r3, #64	; 0x40
 80067ee:	2200      	movs	r2, #0
 80067f0:	2100      	movs	r1, #0
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f001 f9bf 	bl	8007b76 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2240      	movs	r2, #64	; 0x40
 8006804:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006808:	2340      	movs	r3, #64	; 0x40
 800680a:	2200      	movs	r2, #0
 800680c:	2180      	movs	r1, #128	; 0x80
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f001 f9b1 	bl	8007b76 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2240      	movs	r2, #64	; 0x40
 800681e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006844:	2b00      	cmp	r3, #0
 8006846:	d009      	beq.n	800685c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	6852      	ldr	r2, [r2, #4]
 8006854:	b2d2      	uxtb	r2, r2
 8006856:	4611      	mov	r1, r2
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	4798      	blx	r3
  }

  return USBD_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3708      	adds	r7, #8
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}

08006866 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006866:	b480      	push	{r7}
 8006868:	b083      	sub	sp, #12
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
 800686e:	460b      	mov	r3, r1
 8006870:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	78fa      	ldrb	r2, [r7, #3]
 8006876:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	370c      	adds	r7, #12
 800687e:	46bd      	mov	sp, r7
 8006880:	bc80      	pop	{r7}
 8006882:	4770      	bx	lr

08006884 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2204      	movs	r2, #4
 800689c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	370c      	adds	r7, #12
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bc80      	pop	{r7}
 80068aa:	4770      	bx	lr

080068ac <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068ba:	2b04      	cmp	r3, #4
 80068bc:	d105      	bne.n	80068ca <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	370c      	adds	r7, #12
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bc80      	pop	{r7}
 80068d4:	4770      	bx	lr

080068d6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80068d6:	b580      	push	{r7, lr}
 80068d8:	b082      	sub	sp, #8
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068e4:	2b03      	cmp	r3, #3
 80068e6:	d10b      	bne.n	8006900 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ee:	69db      	ldr	r3, [r3, #28]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d005      	beq.n	8006900 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068fa:	69db      	ldr	r3, [r3, #28]
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3708      	adds	r7, #8
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
	...

0800690c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006916:	2300      	movs	r3, #0
 8006918:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006922:	2b20      	cmp	r3, #32
 8006924:	d004      	beq.n	8006930 <USBD_StdDevReq+0x24>
 8006926:	2b40      	cmp	r3, #64	; 0x40
 8006928:	d002      	beq.n	8006930 <USBD_StdDevReq+0x24>
 800692a:	2b00      	cmp	r3, #0
 800692c:	d008      	beq.n	8006940 <USBD_StdDevReq+0x34>
 800692e:	e04c      	b.n	80069ca <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	6839      	ldr	r1, [r7, #0]
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	4798      	blx	r3
      break;
 800693e:	e049      	b.n	80069d4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	785b      	ldrb	r3, [r3, #1]
 8006944:	2b09      	cmp	r3, #9
 8006946:	d83a      	bhi.n	80069be <USBD_StdDevReq+0xb2>
 8006948:	a201      	add	r2, pc, #4	; (adr r2, 8006950 <USBD_StdDevReq+0x44>)
 800694a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800694e:	bf00      	nop
 8006950:	080069a1 	.word	0x080069a1
 8006954:	080069b5 	.word	0x080069b5
 8006958:	080069bf 	.word	0x080069bf
 800695c:	080069ab 	.word	0x080069ab
 8006960:	080069bf 	.word	0x080069bf
 8006964:	08006983 	.word	0x08006983
 8006968:	08006979 	.word	0x08006979
 800696c:	080069bf 	.word	0x080069bf
 8006970:	08006997 	.word	0x08006997
 8006974:	0800698d 	.word	0x0800698d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006978:	6839      	ldr	r1, [r7, #0]
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 f9d4 	bl	8006d28 <USBD_GetDescriptor>
          break;
 8006980:	e022      	b.n	80069c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006982:	6839      	ldr	r1, [r7, #0]
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 fb37 	bl	8006ff8 <USBD_SetAddress>
          break;
 800698a:	e01d      	b.n	80069c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800698c:	6839      	ldr	r1, [r7, #0]
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 fb74 	bl	800707c <USBD_SetConfig>
          break;
 8006994:	e018      	b.n	80069c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006996:	6839      	ldr	r1, [r7, #0]
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 fbfd 	bl	8007198 <USBD_GetConfig>
          break;
 800699e:	e013      	b.n	80069c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80069a0:	6839      	ldr	r1, [r7, #0]
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 fc2c 	bl	8007200 <USBD_GetStatus>
          break;
 80069a8:	e00e      	b.n	80069c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80069aa:	6839      	ldr	r1, [r7, #0]
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 fc5a 	bl	8007266 <USBD_SetFeature>
          break;
 80069b2:	e009      	b.n	80069c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80069b4:	6839      	ldr	r1, [r7, #0]
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 fc69 	bl	800728e <USBD_ClrFeature>
          break;
 80069bc:	e004      	b.n	80069c8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80069be:	6839      	ldr	r1, [r7, #0]
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 fcc1 	bl	8007348 <USBD_CtlError>
          break;
 80069c6:	bf00      	nop
      }
      break;
 80069c8:	e004      	b.n	80069d4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80069ca:	6839      	ldr	r1, [r7, #0]
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 fcbb 	bl	8007348 <USBD_CtlError>
      break;
 80069d2:	bf00      	nop
  }

  return ret;
 80069d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3710      	adds	r7, #16
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop

080069e0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069ea:	2300      	movs	r3, #0
 80069ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069f6:	2b20      	cmp	r3, #32
 80069f8:	d003      	beq.n	8006a02 <USBD_StdItfReq+0x22>
 80069fa:	2b40      	cmp	r3, #64	; 0x40
 80069fc:	d001      	beq.n	8006a02 <USBD_StdItfReq+0x22>
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d12a      	bne.n	8006a58 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d81d      	bhi.n	8006a4a <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	889b      	ldrh	r3, [r3, #4]
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d813      	bhi.n	8006a40 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	6839      	ldr	r1, [r7, #0]
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	4798      	blx	r3
 8006a26:	4603      	mov	r3, r0
 8006a28:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	88db      	ldrh	r3, [r3, #6]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d110      	bne.n	8006a54 <USBD_StdItfReq+0x74>
 8006a32:	7bfb      	ldrb	r3, [r7, #15]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d10d      	bne.n	8006a54 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 fd4d 	bl	80074d8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006a3e:	e009      	b.n	8006a54 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006a40:	6839      	ldr	r1, [r7, #0]
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 fc80 	bl	8007348 <USBD_CtlError>
          break;
 8006a48:	e004      	b.n	8006a54 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8006a4a:	6839      	ldr	r1, [r7, #0]
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 fc7b 	bl	8007348 <USBD_CtlError>
          break;
 8006a52:	e000      	b.n	8006a56 <USBD_StdItfReq+0x76>
          break;
 8006a54:	bf00      	nop
      }
      break;
 8006a56:	e004      	b.n	8006a62 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8006a58:	6839      	ldr	r1, [r7, #0]
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 fc74 	bl	8007348 <USBD_CtlError>
      break;
 8006a60:	bf00      	nop
  }

  return USBD_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3710      	adds	r7, #16
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006a76:	2300      	movs	r3, #0
 8006a78:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	889b      	ldrh	r3, [r3, #4]
 8006a7e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a88:	2b20      	cmp	r3, #32
 8006a8a:	d004      	beq.n	8006a96 <USBD_StdEPReq+0x2a>
 8006a8c:	2b40      	cmp	r3, #64	; 0x40
 8006a8e:	d002      	beq.n	8006a96 <USBD_StdEPReq+0x2a>
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d008      	beq.n	8006aa6 <USBD_StdEPReq+0x3a>
 8006a94:	e13d      	b.n	8006d12 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	6839      	ldr	r1, [r7, #0]
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	4798      	blx	r3
      break;
 8006aa4:	e13a      	b.n	8006d1c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006aae:	2b20      	cmp	r3, #32
 8006ab0:	d10a      	bne.n	8006ac8 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	6839      	ldr	r1, [r7, #0]
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	4798      	blx	r3
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006ac4:	7bfb      	ldrb	r3, [r7, #15]
 8006ac6:	e12a      	b.n	8006d1e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	785b      	ldrb	r3, [r3, #1]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d03e      	beq.n	8006b4e <USBD_StdEPReq+0xe2>
 8006ad0:	2b03      	cmp	r3, #3
 8006ad2:	d002      	beq.n	8006ada <USBD_StdEPReq+0x6e>
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d070      	beq.n	8006bba <USBD_StdEPReq+0x14e>
 8006ad8:	e115      	b.n	8006d06 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ae0:	2b02      	cmp	r3, #2
 8006ae2:	d002      	beq.n	8006aea <USBD_StdEPReq+0x7e>
 8006ae4:	2b03      	cmp	r3, #3
 8006ae6:	d015      	beq.n	8006b14 <USBD_StdEPReq+0xa8>
 8006ae8:	e02b      	b.n	8006b42 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006aea:	7bbb      	ldrb	r3, [r7, #14]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d00c      	beq.n	8006b0a <USBD_StdEPReq+0x9e>
 8006af0:	7bbb      	ldrb	r3, [r7, #14]
 8006af2:	2b80      	cmp	r3, #128	; 0x80
 8006af4:	d009      	beq.n	8006b0a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006af6:	7bbb      	ldrb	r3, [r7, #14]
 8006af8:	4619      	mov	r1, r3
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f001 f880 	bl	8007c00 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006b00:	2180      	movs	r1, #128	; 0x80
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f001 f87c 	bl	8007c00 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b08:	e020      	b.n	8006b4c <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8006b0a:	6839      	ldr	r1, [r7, #0]
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 fc1b 	bl	8007348 <USBD_CtlError>
              break;
 8006b12:	e01b      	b.n	8006b4c <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	885b      	ldrh	r3, [r3, #2]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d10e      	bne.n	8006b3a <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8006b1c:	7bbb      	ldrb	r3, [r7, #14]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d00b      	beq.n	8006b3a <USBD_StdEPReq+0xce>
 8006b22:	7bbb      	ldrb	r3, [r7, #14]
 8006b24:	2b80      	cmp	r3, #128	; 0x80
 8006b26:	d008      	beq.n	8006b3a <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	88db      	ldrh	r3, [r3, #6]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d104      	bne.n	8006b3a <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006b30:	7bbb      	ldrb	r3, [r7, #14]
 8006b32:	4619      	mov	r1, r3
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f001 f863 	bl	8007c00 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 fccc 	bl	80074d8 <USBD_CtlSendStatus>

              break;
 8006b40:	e004      	b.n	8006b4c <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8006b42:	6839      	ldr	r1, [r7, #0]
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 fbff 	bl	8007348 <USBD_CtlError>
              break;
 8006b4a:	bf00      	nop
          }
          break;
 8006b4c:	e0e0      	b.n	8006d10 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b54:	2b02      	cmp	r3, #2
 8006b56:	d002      	beq.n	8006b5e <USBD_StdEPReq+0xf2>
 8006b58:	2b03      	cmp	r3, #3
 8006b5a:	d015      	beq.n	8006b88 <USBD_StdEPReq+0x11c>
 8006b5c:	e026      	b.n	8006bac <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b5e:	7bbb      	ldrb	r3, [r7, #14]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00c      	beq.n	8006b7e <USBD_StdEPReq+0x112>
 8006b64:	7bbb      	ldrb	r3, [r7, #14]
 8006b66:	2b80      	cmp	r3, #128	; 0x80
 8006b68:	d009      	beq.n	8006b7e <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006b6a:	7bbb      	ldrb	r3, [r7, #14]
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f001 f846 	bl	8007c00 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006b74:	2180      	movs	r1, #128	; 0x80
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f001 f842 	bl	8007c00 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b7c:	e01c      	b.n	8006bb8 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8006b7e:	6839      	ldr	r1, [r7, #0]
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 fbe1 	bl	8007348 <USBD_CtlError>
              break;
 8006b86:	e017      	b.n	8006bb8 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	885b      	ldrh	r3, [r3, #2]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d112      	bne.n	8006bb6 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006b90:	7bbb      	ldrb	r3, [r7, #14]
 8006b92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d004      	beq.n	8006ba4 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006b9a:	7bbb      	ldrb	r3, [r7, #14]
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f001 f84d 	bl	8007c3e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 fc97 	bl	80074d8 <USBD_CtlSendStatus>
              }
              break;
 8006baa:	e004      	b.n	8006bb6 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8006bac:	6839      	ldr	r1, [r7, #0]
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 fbca 	bl	8007348 <USBD_CtlError>
              break;
 8006bb4:	e000      	b.n	8006bb8 <USBD_StdEPReq+0x14c>
              break;
 8006bb6:	bf00      	nop
          }
          break;
 8006bb8:	e0aa      	b.n	8006d10 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d002      	beq.n	8006bca <USBD_StdEPReq+0x15e>
 8006bc4:	2b03      	cmp	r3, #3
 8006bc6:	d032      	beq.n	8006c2e <USBD_StdEPReq+0x1c2>
 8006bc8:	e097      	b.n	8006cfa <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006bca:	7bbb      	ldrb	r3, [r7, #14]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d007      	beq.n	8006be0 <USBD_StdEPReq+0x174>
 8006bd0:	7bbb      	ldrb	r3, [r7, #14]
 8006bd2:	2b80      	cmp	r3, #128	; 0x80
 8006bd4:	d004      	beq.n	8006be0 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8006bd6:	6839      	ldr	r1, [r7, #0]
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 fbb5 	bl	8007348 <USBD_CtlError>
                break;
 8006bde:	e091      	b.n	8006d04 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006be0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	da0b      	bge.n	8006c00 <USBD_StdEPReq+0x194>
 8006be8:	7bbb      	ldrb	r3, [r7, #14]
 8006bea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bee:	4613      	mov	r3, r2
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	4413      	add	r3, r2
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	3310      	adds	r3, #16
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	3304      	adds	r3, #4
 8006bfe:	e00b      	b.n	8006c18 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c00:	7bbb      	ldrb	r3, [r7, #14]
 8006c02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c06:	4613      	mov	r3, r2
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	4413      	add	r3, r2
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	4413      	add	r3, r2
 8006c16:	3304      	adds	r3, #4
 8006c18:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	2202      	movs	r2, #2
 8006c24:	4619      	mov	r1, r3
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 fbf8 	bl	800741c <USBD_CtlSendData>
              break;
 8006c2c:	e06a      	b.n	8006d04 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006c2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	da11      	bge.n	8006c5a <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006c36:	7bbb      	ldrb	r3, [r7, #14]
 8006c38:	f003 020f 	and.w	r2, r3, #15
 8006c3c:	6879      	ldr	r1, [r7, #4]
 8006c3e:	4613      	mov	r3, r2
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	4413      	add	r3, r2
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	440b      	add	r3, r1
 8006c48:	3318      	adds	r3, #24
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d117      	bne.n	8006c80 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006c50:	6839      	ldr	r1, [r7, #0]
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 fb78 	bl	8007348 <USBD_CtlError>
                  break;
 8006c58:	e054      	b.n	8006d04 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006c5a:	7bbb      	ldrb	r3, [r7, #14]
 8006c5c:	f003 020f 	and.w	r2, r3, #15
 8006c60:	6879      	ldr	r1, [r7, #4]
 8006c62:	4613      	mov	r3, r2
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	4413      	add	r3, r2
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	440b      	add	r3, r1
 8006c6c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d104      	bne.n	8006c80 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006c76:	6839      	ldr	r1, [r7, #0]
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 fb65 	bl	8007348 <USBD_CtlError>
                  break;
 8006c7e:	e041      	b.n	8006d04 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	da0b      	bge.n	8006ca0 <USBD_StdEPReq+0x234>
 8006c88:	7bbb      	ldrb	r3, [r7, #14]
 8006c8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c8e:	4613      	mov	r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	4413      	add	r3, r2
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	3310      	adds	r3, #16
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	3304      	adds	r3, #4
 8006c9e:	e00b      	b.n	8006cb8 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006ca0:	7bbb      	ldrb	r3, [r7, #14]
 8006ca2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	4413      	add	r3, r2
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	3304      	adds	r3, #4
 8006cb8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006cba:	7bbb      	ldrb	r3, [r7, #14]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d002      	beq.n	8006cc6 <USBD_StdEPReq+0x25a>
 8006cc0:	7bbb      	ldrb	r3, [r7, #14]
 8006cc2:	2b80      	cmp	r3, #128	; 0x80
 8006cc4:	d103      	bne.n	8006cce <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	601a      	str	r2, [r3, #0]
 8006ccc:	e00e      	b.n	8006cec <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006cce:	7bbb      	ldrb	r3, [r7, #14]
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 ffd2 	bl	8007c7c <USBD_LL_IsStallEP>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d003      	beq.n	8006ce6 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	601a      	str	r2, [r3, #0]
 8006ce4:	e002      	b.n	8006cec <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	2202      	movs	r2, #2
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 fb92 	bl	800741c <USBD_CtlSendData>
              break;
 8006cf8:	e004      	b.n	8006d04 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8006cfa:	6839      	ldr	r1, [r7, #0]
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 fb23 	bl	8007348 <USBD_CtlError>
              break;
 8006d02:	bf00      	nop
          }
          break;
 8006d04:	e004      	b.n	8006d10 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8006d06:	6839      	ldr	r1, [r7, #0]
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 fb1d 	bl	8007348 <USBD_CtlError>
          break;
 8006d0e:	bf00      	nop
      }
      break;
 8006d10:	e004      	b.n	8006d1c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8006d12:	6839      	ldr	r1, [r7, #0]
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 fb17 	bl	8007348 <USBD_CtlError>
      break;
 8006d1a:	bf00      	nop
  }

  return ret;
 8006d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3710      	adds	r7, #16
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
	...

08006d28 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006d32:	2300      	movs	r3, #0
 8006d34:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006d36:	2300      	movs	r3, #0
 8006d38:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	885b      	ldrh	r3, [r3, #2]
 8006d42:	0a1b      	lsrs	r3, r3, #8
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	3b01      	subs	r3, #1
 8006d48:	2b06      	cmp	r3, #6
 8006d4a:	f200 8128 	bhi.w	8006f9e <USBD_GetDescriptor+0x276>
 8006d4e:	a201      	add	r2, pc, #4	; (adr r2, 8006d54 <USBD_GetDescriptor+0x2c>)
 8006d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d54:	08006d71 	.word	0x08006d71
 8006d58:	08006d89 	.word	0x08006d89
 8006d5c:	08006dc9 	.word	0x08006dc9
 8006d60:	08006f9f 	.word	0x08006f9f
 8006d64:	08006f9f 	.word	0x08006f9f
 8006d68:	08006f3f 	.word	0x08006f3f
 8006d6c:	08006f6b 	.word	0x08006f6b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	7c12      	ldrb	r2, [r2, #16]
 8006d7c:	f107 0108 	add.w	r1, r7, #8
 8006d80:	4610      	mov	r0, r2
 8006d82:	4798      	blx	r3
 8006d84:	60f8      	str	r0, [r7, #12]
      break;
 8006d86:	e112      	b.n	8006fae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	7c1b      	ldrb	r3, [r3, #16]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d10d      	bne.n	8006dac <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d98:	f107 0208 	add.w	r2, r7, #8
 8006d9c:	4610      	mov	r0, r2
 8006d9e:	4798      	blx	r3
 8006da0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	3301      	adds	r3, #1
 8006da6:	2202      	movs	r2, #2
 8006da8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006daa:	e100      	b.n	8006fae <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db4:	f107 0208 	add.w	r2, r7, #8
 8006db8:	4610      	mov	r0, r2
 8006dba:	4798      	blx	r3
 8006dbc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	2202      	movs	r2, #2
 8006dc4:	701a      	strb	r2, [r3, #0]
      break;
 8006dc6:	e0f2      	b.n	8006fae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	885b      	ldrh	r3, [r3, #2]
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	2b05      	cmp	r3, #5
 8006dd0:	f200 80ac 	bhi.w	8006f2c <USBD_GetDescriptor+0x204>
 8006dd4:	a201      	add	r2, pc, #4	; (adr r2, 8006ddc <USBD_GetDescriptor+0xb4>)
 8006dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dda:	bf00      	nop
 8006ddc:	08006df5 	.word	0x08006df5
 8006de0:	08006e29 	.word	0x08006e29
 8006de4:	08006e5d 	.word	0x08006e5d
 8006de8:	08006e91 	.word	0x08006e91
 8006dec:	08006ec5 	.word	0x08006ec5
 8006df0:	08006ef9 	.word	0x08006ef9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00b      	beq.n	8006e18 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	7c12      	ldrb	r2, [r2, #16]
 8006e0c:	f107 0108 	add.w	r1, r7, #8
 8006e10:	4610      	mov	r0, r2
 8006e12:	4798      	blx	r3
 8006e14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e16:	e091      	b.n	8006f3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e18:	6839      	ldr	r1, [r7, #0]
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 fa94 	bl	8007348 <USBD_CtlError>
            err++;
 8006e20:	7afb      	ldrb	r3, [r7, #11]
 8006e22:	3301      	adds	r3, #1
 8006e24:	72fb      	strb	r3, [r7, #11]
          break;
 8006e26:	e089      	b.n	8006f3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00b      	beq.n	8006e4c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	7c12      	ldrb	r2, [r2, #16]
 8006e40:	f107 0108 	add.w	r1, r7, #8
 8006e44:	4610      	mov	r0, r2
 8006e46:	4798      	blx	r3
 8006e48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e4a:	e077      	b.n	8006f3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e4c:	6839      	ldr	r1, [r7, #0]
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 fa7a 	bl	8007348 <USBD_CtlError>
            err++;
 8006e54:	7afb      	ldrb	r3, [r7, #11]
 8006e56:	3301      	adds	r3, #1
 8006e58:	72fb      	strb	r3, [r7, #11]
          break;
 8006e5a:	e06f      	b.n	8006f3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d00b      	beq.n	8006e80 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	7c12      	ldrb	r2, [r2, #16]
 8006e74:	f107 0108 	add.w	r1, r7, #8
 8006e78:	4610      	mov	r0, r2
 8006e7a:	4798      	blx	r3
 8006e7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e7e:	e05d      	b.n	8006f3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e80:	6839      	ldr	r1, [r7, #0]
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 fa60 	bl	8007348 <USBD_CtlError>
            err++;
 8006e88:	7afb      	ldrb	r3, [r7, #11]
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	72fb      	strb	r3, [r7, #11]
          break;
 8006e8e:	e055      	b.n	8006f3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d00b      	beq.n	8006eb4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	7c12      	ldrb	r2, [r2, #16]
 8006ea8:	f107 0108 	add.w	r1, r7, #8
 8006eac:	4610      	mov	r0, r2
 8006eae:	4798      	blx	r3
 8006eb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006eb2:	e043      	b.n	8006f3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006eb4:	6839      	ldr	r1, [r7, #0]
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 fa46 	bl	8007348 <USBD_CtlError>
            err++;
 8006ebc:	7afb      	ldrb	r3, [r7, #11]
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	72fb      	strb	r3, [r7, #11]
          break;
 8006ec2:	e03b      	b.n	8006f3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006eca:	695b      	ldr	r3, [r3, #20]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00b      	beq.n	8006ee8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ed6:	695b      	ldr	r3, [r3, #20]
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	7c12      	ldrb	r2, [r2, #16]
 8006edc:	f107 0108 	add.w	r1, r7, #8
 8006ee0:	4610      	mov	r0, r2
 8006ee2:	4798      	blx	r3
 8006ee4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ee6:	e029      	b.n	8006f3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ee8:	6839      	ldr	r1, [r7, #0]
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 fa2c 	bl	8007348 <USBD_CtlError>
            err++;
 8006ef0:	7afb      	ldrb	r3, [r7, #11]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	72fb      	strb	r3, [r7, #11]
          break;
 8006ef6:	e021      	b.n	8006f3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006efe:	699b      	ldr	r3, [r3, #24]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00b      	beq.n	8006f1c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f0a:	699b      	ldr	r3, [r3, #24]
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	7c12      	ldrb	r2, [r2, #16]
 8006f10:	f107 0108 	add.w	r1, r7, #8
 8006f14:	4610      	mov	r0, r2
 8006f16:	4798      	blx	r3
 8006f18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f1a:	e00f      	b.n	8006f3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f1c:	6839      	ldr	r1, [r7, #0]
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 fa12 	bl	8007348 <USBD_CtlError>
            err++;
 8006f24:	7afb      	ldrb	r3, [r7, #11]
 8006f26:	3301      	adds	r3, #1
 8006f28:	72fb      	strb	r3, [r7, #11]
          break;
 8006f2a:	e007      	b.n	8006f3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006f2c:	6839      	ldr	r1, [r7, #0]
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 fa0a 	bl	8007348 <USBD_CtlError>
          err++;
 8006f34:	7afb      	ldrb	r3, [r7, #11]
 8006f36:	3301      	adds	r3, #1
 8006f38:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006f3a:	e038      	b.n	8006fae <USBD_GetDescriptor+0x286>
 8006f3c:	e037      	b.n	8006fae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	7c1b      	ldrb	r3, [r3, #16]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d109      	bne.n	8006f5a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f4e:	f107 0208 	add.w	r2, r7, #8
 8006f52:	4610      	mov	r0, r2
 8006f54:	4798      	blx	r3
 8006f56:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f58:	e029      	b.n	8006fae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006f5a:	6839      	ldr	r1, [r7, #0]
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 f9f3 	bl	8007348 <USBD_CtlError>
        err++;
 8006f62:	7afb      	ldrb	r3, [r7, #11]
 8006f64:	3301      	adds	r3, #1
 8006f66:	72fb      	strb	r3, [r7, #11]
      break;
 8006f68:	e021      	b.n	8006fae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	7c1b      	ldrb	r3, [r3, #16]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d10d      	bne.n	8006f8e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f7a:	f107 0208 	add.w	r2, r7, #8
 8006f7e:	4610      	mov	r0, r2
 8006f80:	4798      	blx	r3
 8006f82:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	3301      	adds	r3, #1
 8006f88:	2207      	movs	r2, #7
 8006f8a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f8c:	e00f      	b.n	8006fae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006f8e:	6839      	ldr	r1, [r7, #0]
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 f9d9 	bl	8007348 <USBD_CtlError>
        err++;
 8006f96:	7afb      	ldrb	r3, [r7, #11]
 8006f98:	3301      	adds	r3, #1
 8006f9a:	72fb      	strb	r3, [r7, #11]
      break;
 8006f9c:	e007      	b.n	8006fae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006f9e:	6839      	ldr	r1, [r7, #0]
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 f9d1 	bl	8007348 <USBD_CtlError>
      err++;
 8006fa6:	7afb      	ldrb	r3, [r7, #11]
 8006fa8:	3301      	adds	r3, #1
 8006faa:	72fb      	strb	r3, [r7, #11]
      break;
 8006fac:	bf00      	nop
  }

  if (err != 0U)
 8006fae:	7afb      	ldrb	r3, [r7, #11]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d11c      	bne.n	8006fee <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006fb4:	893b      	ldrh	r3, [r7, #8]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d011      	beq.n	8006fde <USBD_GetDescriptor+0x2b6>
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	88db      	ldrh	r3, [r3, #6]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00d      	beq.n	8006fde <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	88da      	ldrh	r2, [r3, #6]
 8006fc6:	893b      	ldrh	r3, [r7, #8]
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	bf28      	it	cs
 8006fcc:	4613      	movcs	r3, r2
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006fd2:	893b      	ldrh	r3, [r7, #8]
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	68f9      	ldr	r1, [r7, #12]
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 fa1f 	bl	800741c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	88db      	ldrh	r3, [r3, #6]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d104      	bne.n	8006ff0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 fa76 	bl	80074d8 <USBD_CtlSendStatus>
 8006fec:	e000      	b.n	8006ff0 <USBD_GetDescriptor+0x2c8>
    return;
 8006fee:	bf00      	nop
    }
  }
}
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop

08006ff8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	889b      	ldrh	r3, [r3, #4]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d130      	bne.n	800706c <USBD_SetAddress+0x74>
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	88db      	ldrh	r3, [r3, #6]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d12c      	bne.n	800706c <USBD_SetAddress+0x74>
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	885b      	ldrh	r3, [r3, #2]
 8007016:	2b7f      	cmp	r3, #127	; 0x7f
 8007018:	d828      	bhi.n	800706c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	885b      	ldrh	r3, [r3, #2]
 800701e:	b2db      	uxtb	r3, r3
 8007020:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007024:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800702c:	2b03      	cmp	r3, #3
 800702e:	d104      	bne.n	800703a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007030:	6839      	ldr	r1, [r7, #0]
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 f988 	bl	8007348 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007038:	e01c      	b.n	8007074 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	7bfa      	ldrb	r2, [r7, #15]
 800703e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007042:	7bfb      	ldrb	r3, [r7, #15]
 8007044:	4619      	mov	r1, r3
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fe44 	bl	8007cd4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 fa43 	bl	80074d8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007052:	7bfb      	ldrb	r3, [r7, #15]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d004      	beq.n	8007062 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2202      	movs	r2, #2
 800705c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007060:	e008      	b.n	8007074 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2201      	movs	r2, #1
 8007066:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800706a:	e003      	b.n	8007074 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800706c:	6839      	ldr	r1, [r7, #0]
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 f96a 	bl	8007348 <USBD_CtlError>
  }
}
 8007074:	bf00      	nop
 8007076:	3710      	adds	r7, #16
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b082      	sub	sp, #8
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	885b      	ldrh	r3, [r3, #2]
 800708a:	b2da      	uxtb	r2, r3
 800708c:	4b41      	ldr	r3, [pc, #260]	; (8007194 <USBD_SetConfig+0x118>)
 800708e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007090:	4b40      	ldr	r3, [pc, #256]	; (8007194 <USBD_SetConfig+0x118>)
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	2b01      	cmp	r3, #1
 8007096:	d904      	bls.n	80070a2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007098:	6839      	ldr	r1, [r7, #0]
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 f954 	bl	8007348 <USBD_CtlError>
 80070a0:	e075      	b.n	800718e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070a8:	2b02      	cmp	r3, #2
 80070aa:	d002      	beq.n	80070b2 <USBD_SetConfig+0x36>
 80070ac:	2b03      	cmp	r3, #3
 80070ae:	d023      	beq.n	80070f8 <USBD_SetConfig+0x7c>
 80070b0:	e062      	b.n	8007178 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80070b2:	4b38      	ldr	r3, [pc, #224]	; (8007194 <USBD_SetConfig+0x118>)
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d01a      	beq.n	80070f0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80070ba:	4b36      	ldr	r3, [pc, #216]	; (8007194 <USBD_SetConfig+0x118>)
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	461a      	mov	r2, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2203      	movs	r2, #3
 80070c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80070cc:	4b31      	ldr	r3, [pc, #196]	; (8007194 <USBD_SetConfig+0x118>)
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	4619      	mov	r1, r3
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f7ff f9f3 	bl	80064be <USBD_SetClassConfig>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d104      	bne.n	80070e8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80070de:	6839      	ldr	r1, [r7, #0]
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 f931 	bl	8007348 <USBD_CtlError>
            return;
 80070e6:	e052      	b.n	800718e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 f9f5 	bl	80074d8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80070ee:	e04e      	b.n	800718e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 f9f1 	bl	80074d8 <USBD_CtlSendStatus>
        break;
 80070f6:	e04a      	b.n	800718e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80070f8:	4b26      	ldr	r3, [pc, #152]	; (8007194 <USBD_SetConfig+0x118>)
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d112      	bne.n	8007126 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2202      	movs	r2, #2
 8007104:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007108:	4b22      	ldr	r3, [pc, #136]	; (8007194 <USBD_SetConfig+0x118>)
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	461a      	mov	r2, r3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007112:	4b20      	ldr	r3, [pc, #128]	; (8007194 <USBD_SetConfig+0x118>)
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	4619      	mov	r1, r3
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f7ff f9ef 	bl	80064fc <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 f9da 	bl	80074d8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007124:	e033      	b.n	800718e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007126:	4b1b      	ldr	r3, [pc, #108]	; (8007194 <USBD_SetConfig+0x118>)
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	461a      	mov	r2, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	429a      	cmp	r2, r3
 8007132:	d01d      	beq.n	8007170 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	b2db      	uxtb	r3, r3
 800713a:	4619      	mov	r1, r3
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f7ff f9dd 	bl	80064fc <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007142:	4b14      	ldr	r3, [pc, #80]	; (8007194 <USBD_SetConfig+0x118>)
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	461a      	mov	r2, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800714c:	4b11      	ldr	r3, [pc, #68]	; (8007194 <USBD_SetConfig+0x118>)
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	4619      	mov	r1, r3
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f7ff f9b3 	bl	80064be <USBD_SetClassConfig>
 8007158:	4603      	mov	r3, r0
 800715a:	2b02      	cmp	r3, #2
 800715c:	d104      	bne.n	8007168 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800715e:	6839      	ldr	r1, [r7, #0]
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 f8f1 	bl	8007348 <USBD_CtlError>
            return;
 8007166:	e012      	b.n	800718e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 f9b5 	bl	80074d8 <USBD_CtlSendStatus>
        break;
 800716e:	e00e      	b.n	800718e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 f9b1 	bl	80074d8 <USBD_CtlSendStatus>
        break;
 8007176:	e00a      	b.n	800718e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007178:	6839      	ldr	r1, [r7, #0]
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 f8e4 	bl	8007348 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007180:	4b04      	ldr	r3, [pc, #16]	; (8007194 <USBD_SetConfig+0x118>)
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	4619      	mov	r1, r3
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f7ff f9b8 	bl	80064fc <USBD_ClrClassConfig>
        break;
 800718c:	bf00      	nop
    }
  }
}
 800718e:	3708      	adds	r7, #8
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}
 8007194:	20000198 	.word	0x20000198

08007198 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	88db      	ldrh	r3, [r3, #6]
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d004      	beq.n	80071b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80071aa:	6839      	ldr	r1, [r7, #0]
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 f8cb 	bl	8007348 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80071b2:	e021      	b.n	80071f8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	db17      	blt.n	80071ee <USBD_GetConfig+0x56>
 80071be:	2b02      	cmp	r3, #2
 80071c0:	dd02      	ble.n	80071c8 <USBD_GetConfig+0x30>
 80071c2:	2b03      	cmp	r3, #3
 80071c4:	d00b      	beq.n	80071de <USBD_GetConfig+0x46>
 80071c6:	e012      	b.n	80071ee <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	3308      	adds	r3, #8
 80071d2:	2201      	movs	r2, #1
 80071d4:	4619      	mov	r1, r3
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 f920 	bl	800741c <USBD_CtlSendData>
        break;
 80071dc:	e00c      	b.n	80071f8 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	3304      	adds	r3, #4
 80071e2:	2201      	movs	r2, #1
 80071e4:	4619      	mov	r1, r3
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 f918 	bl	800741c <USBD_CtlSendData>
        break;
 80071ec:	e004      	b.n	80071f8 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80071ee:	6839      	ldr	r1, [r7, #0]
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 f8a9 	bl	8007348 <USBD_CtlError>
        break;
 80071f6:	bf00      	nop
}
 80071f8:	bf00      	nop
 80071fa:	3708      	adds	r7, #8
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007210:	3b01      	subs	r3, #1
 8007212:	2b02      	cmp	r3, #2
 8007214:	d81e      	bhi.n	8007254 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	88db      	ldrh	r3, [r3, #6]
 800721a:	2b02      	cmp	r3, #2
 800721c:	d004      	beq.n	8007228 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800721e:	6839      	ldr	r1, [r7, #0]
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 f891 	bl	8007348 <USBD_CtlError>
        break;
 8007226:	e01a      	b.n	800725e <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007234:	2b00      	cmp	r3, #0
 8007236:	d005      	beq.n	8007244 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	f043 0202 	orr.w	r2, r3, #2
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	330c      	adds	r3, #12
 8007248:	2202      	movs	r2, #2
 800724a:	4619      	mov	r1, r3
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 f8e5 	bl	800741c <USBD_CtlSendData>
      break;
 8007252:	e004      	b.n	800725e <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007254:	6839      	ldr	r1, [r7, #0]
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 f876 	bl	8007348 <USBD_CtlError>
      break;
 800725c:	bf00      	nop
  }
}
 800725e:	bf00      	nop
 8007260:	3708      	adds	r7, #8
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007266:	b580      	push	{r7, lr}
 8007268:	b082      	sub	sp, #8
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
 800726e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	885b      	ldrh	r3, [r3, #2]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d106      	bne.n	8007286 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 f929 	bl	80074d8 <USBD_CtlSendStatus>
  }
}
 8007286:	bf00      	nop
 8007288:	3708      	adds	r7, #8
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b082      	sub	sp, #8
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
 8007296:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800729e:	3b01      	subs	r3, #1
 80072a0:	2b02      	cmp	r3, #2
 80072a2:	d80b      	bhi.n	80072bc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	885b      	ldrh	r3, [r3, #2]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d10c      	bne.n	80072c6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 f90f 	bl	80074d8 <USBD_CtlSendStatus>
      }
      break;
 80072ba:	e004      	b.n	80072c6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80072bc:	6839      	ldr	r1, [r7, #0]
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 f842 	bl	8007348 <USBD_CtlError>
      break;
 80072c4:	e000      	b.n	80072c8 <USBD_ClrFeature+0x3a>
      break;
 80072c6:	bf00      	nop
  }
}
 80072c8:	bf00      	nop
 80072ca:	3708      	adds	r7, #8
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	781a      	ldrb	r2, [r3, #0]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	785a      	ldrb	r2, [r3, #1]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	3302      	adds	r3, #2
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	b29a      	uxth	r2, r3
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	3303      	adds	r3, #3
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	021b      	lsls	r3, r3, #8
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	4413      	add	r3, r2
 8007300:	b29a      	uxth	r2, r3
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	3304      	adds	r3, #4
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	b29a      	uxth	r2, r3
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	3305      	adds	r3, #5
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	b29b      	uxth	r3, r3
 8007316:	021b      	lsls	r3, r3, #8
 8007318:	b29b      	uxth	r3, r3
 800731a:	4413      	add	r3, r2
 800731c:	b29a      	uxth	r2, r3
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	3306      	adds	r3, #6
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	b29a      	uxth	r2, r3
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	3307      	adds	r3, #7
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	b29b      	uxth	r3, r3
 8007332:	021b      	lsls	r3, r3, #8
 8007334:	b29b      	uxth	r3, r3
 8007336:	4413      	add	r3, r2
 8007338:	b29a      	uxth	r2, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	80da      	strh	r2, [r3, #6]

}
 800733e:	bf00      	nop
 8007340:	370c      	adds	r7, #12
 8007342:	46bd      	mov	sp, r7
 8007344:	bc80      	pop	{r7}
 8007346:	4770      	bx	lr

08007348 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007352:	2180      	movs	r1, #128	; 0x80
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 fc53 	bl	8007c00 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800735a:	2100      	movs	r1, #0
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 fc4f 	bl	8007c00 <USBD_LL_StallEP>
}
 8007362:	bf00      	nop
 8007364:	3708      	adds	r7, #8
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800736a:	b580      	push	{r7, lr}
 800736c:	b086      	sub	sp, #24
 800736e:	af00      	add	r7, sp, #0
 8007370:	60f8      	str	r0, [r7, #12]
 8007372:	60b9      	str	r1, [r7, #8]
 8007374:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007376:	2300      	movs	r3, #0
 8007378:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d032      	beq.n	80073e6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007380:	68f8      	ldr	r0, [r7, #12]
 8007382:	f000 f834 	bl	80073ee <USBD_GetLen>
 8007386:	4603      	mov	r3, r0
 8007388:	3301      	adds	r3, #1
 800738a:	b29b      	uxth	r3, r3
 800738c:	005b      	lsls	r3, r3, #1
 800738e:	b29a      	uxth	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007394:	7dfb      	ldrb	r3, [r7, #23]
 8007396:	1c5a      	adds	r2, r3, #1
 8007398:	75fa      	strb	r2, [r7, #23]
 800739a:	461a      	mov	r2, r3
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	4413      	add	r3, r2
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	7812      	ldrb	r2, [r2, #0]
 80073a4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80073a6:	7dfb      	ldrb	r3, [r7, #23]
 80073a8:	1c5a      	adds	r2, r3, #1
 80073aa:	75fa      	strb	r2, [r7, #23]
 80073ac:	461a      	mov	r2, r3
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	4413      	add	r3, r2
 80073b2:	2203      	movs	r2, #3
 80073b4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80073b6:	e012      	b.n	80073de <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	1c5a      	adds	r2, r3, #1
 80073bc:	60fa      	str	r2, [r7, #12]
 80073be:	7dfa      	ldrb	r2, [r7, #23]
 80073c0:	1c51      	adds	r1, r2, #1
 80073c2:	75f9      	strb	r1, [r7, #23]
 80073c4:	4611      	mov	r1, r2
 80073c6:	68ba      	ldr	r2, [r7, #8]
 80073c8:	440a      	add	r2, r1
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80073ce:	7dfb      	ldrb	r3, [r7, #23]
 80073d0:	1c5a      	adds	r2, r3, #1
 80073d2:	75fa      	strb	r2, [r7, #23]
 80073d4:	461a      	mov	r2, r3
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	4413      	add	r3, r2
 80073da:	2200      	movs	r2, #0
 80073dc:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d1e8      	bne.n	80073b8 <USBD_GetString+0x4e>
    }
  }
}
 80073e6:	bf00      	nop
 80073e8:	3718      	adds	r7, #24
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80073ee:	b480      	push	{r7}
 80073f0:	b085      	sub	sp, #20
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80073f6:	2300      	movs	r3, #0
 80073f8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80073fa:	e005      	b.n	8007408 <USBD_GetLen+0x1a>
  {
    len++;
 80073fc:	7bfb      	ldrb	r3, [r7, #15]
 80073fe:	3301      	adds	r3, #1
 8007400:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	3301      	adds	r3, #1
 8007406:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d1f5      	bne.n	80073fc <USBD_GetLen+0xe>
  }

  return len;
 8007410:	7bfb      	ldrb	r3, [r7, #15]
}
 8007412:	4618      	mov	r0, r3
 8007414:	3714      	adds	r7, #20
 8007416:	46bd      	mov	sp, r7
 8007418:	bc80      	pop	{r7}
 800741a:	4770      	bx	lr

0800741c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	4613      	mov	r3, r2
 8007428:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2202      	movs	r2, #2
 800742e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007432:	88fa      	ldrh	r2, [r7, #6]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007438:	88fa      	ldrh	r2, [r7, #6]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800743e:	88fb      	ldrh	r3, [r7, #6]
 8007440:	68ba      	ldr	r2, [r7, #8]
 8007442:	2100      	movs	r1, #0
 8007444:	68f8      	ldr	r0, [r7, #12]
 8007446:	f000 fc64 	bl	8007d12 <USBD_LL_Transmit>

  return USBD_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3710      	adds	r7, #16
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	4613      	mov	r3, r2
 8007460:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007462:	88fb      	ldrh	r3, [r7, #6]
 8007464:	68ba      	ldr	r2, [r7, #8]
 8007466:	2100      	movs	r1, #0
 8007468:	68f8      	ldr	r0, [r7, #12]
 800746a:	f000 fc52 	bl	8007d12 <USBD_LL_Transmit>

  return USBD_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3710      	adds	r7, #16
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	4613      	mov	r3, r2
 8007484:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2203      	movs	r2, #3
 800748a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800748e:	88fa      	ldrh	r2, [r7, #6]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007496:	88fa      	ldrh	r2, [r7, #6]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800749e:	88fb      	ldrh	r3, [r7, #6]
 80074a0:	68ba      	ldr	r2, [r7, #8]
 80074a2:	2100      	movs	r1, #0
 80074a4:	68f8      	ldr	r0, [r7, #12]
 80074a6:	f000 fc57 	bl	8007d58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3710      	adds	r7, #16
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	4613      	mov	r3, r2
 80074c0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80074c2:	88fb      	ldrh	r3, [r7, #6]
 80074c4:	68ba      	ldr	r2, [r7, #8]
 80074c6:	2100      	movs	r1, #0
 80074c8:	68f8      	ldr	r0, [r7, #12]
 80074ca:	f000 fc45 	bl	8007d58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3710      	adds	r7, #16
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b082      	sub	sp, #8
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2204      	movs	r2, #4
 80074e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80074e8:	2300      	movs	r3, #0
 80074ea:	2200      	movs	r2, #0
 80074ec:	2100      	movs	r1, #0
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 fc0f 	bl	8007d12 <USBD_LL_Transmit>

  return USBD_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3708      	adds	r7, #8
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}

080074fe <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80074fe:	b580      	push	{r7, lr}
 8007500:	b082      	sub	sp, #8
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2205      	movs	r2, #5
 800750a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800750e:	2300      	movs	r3, #0
 8007510:	2200      	movs	r2, #0
 8007512:	2100      	movs	r1, #0
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 fc1f 	bl	8007d58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	3708      	adds	r7, #8
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007528:	2200      	movs	r2, #0
 800752a:	4912      	ldr	r1, [pc, #72]	; (8007574 <MX_USB_DEVICE_Init+0x50>)
 800752c:	4812      	ldr	r0, [pc, #72]	; (8007578 <MX_USB_DEVICE_Init+0x54>)
 800752e:	f7fe ff6c 	bl	800640a <USBD_Init>
 8007532:	4603      	mov	r3, r0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d001      	beq.n	800753c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007538:	f7f9 f8a2 	bl	8000680 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800753c:	490f      	ldr	r1, [pc, #60]	; (800757c <MX_USB_DEVICE_Init+0x58>)
 800753e:	480e      	ldr	r0, [pc, #56]	; (8007578 <MX_USB_DEVICE_Init+0x54>)
 8007540:	f7fe ff8e 	bl	8006460 <USBD_RegisterClass>
 8007544:	4603      	mov	r3, r0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d001      	beq.n	800754e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800754a:	f7f9 f899 	bl	8000680 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800754e:	490c      	ldr	r1, [pc, #48]	; (8007580 <MX_USB_DEVICE_Init+0x5c>)
 8007550:	4809      	ldr	r0, [pc, #36]	; (8007578 <MX_USB_DEVICE_Init+0x54>)
 8007552:	f7fe febf 	bl	80062d4 <USBD_CDC_RegisterInterface>
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d001      	beq.n	8007560 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800755c:	f7f9 f890 	bl	8000680 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007560:	4805      	ldr	r0, [pc, #20]	; (8007578 <MX_USB_DEVICE_Init+0x54>)
 8007562:	f7fe ff96 	bl	8006492 <USBD_Start>
 8007566:	4603      	mov	r3, r0
 8007568:	2b00      	cmp	r3, #0
 800756a:	d001      	beq.n	8007570 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800756c:	f7f9 f888 	bl	8000680 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007570:	bf00      	nop
 8007572:	bd80      	pop	{r7, pc}
 8007574:	2000012c 	.word	0x2000012c
 8007578:	20002c40 	.word	0x20002c40
 800757c:	20000018 	.word	0x20000018
 8007580:	2000011c 	.word	0x2000011c

08007584 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007588:	2200      	movs	r2, #0
 800758a:	4905      	ldr	r1, [pc, #20]	; (80075a0 <CDC_Init_FS+0x1c>)
 800758c:	4805      	ldr	r0, [pc, #20]	; (80075a4 <CDC_Init_FS+0x20>)
 800758e:	f7fe feb7 	bl	8006300 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007592:	4905      	ldr	r1, [pc, #20]	; (80075a8 <CDC_Init_FS+0x24>)
 8007594:	4803      	ldr	r0, [pc, #12]	; (80075a4 <CDC_Init_FS+0x20>)
 8007596:	f7fe fecc 	bl	8006332 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800759a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800759c:	4618      	mov	r0, r3
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	200032ec 	.word	0x200032ec
 80075a4:	20002c40 	.word	0x20002c40
 80075a8:	20002f04 	.word	0x20002f04

080075ac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80075ac:	b480      	push	{r7}
 80075ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80075b0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bc80      	pop	{r7}
 80075b8:	4770      	bx	lr
	...

080075bc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	4603      	mov	r3, r0
 80075c4:	6039      	str	r1, [r7, #0]
 80075c6:	71fb      	strb	r3, [r7, #7]
 80075c8:	4613      	mov	r3, r2
 80075ca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80075cc:	79fb      	ldrb	r3, [r7, #7]
 80075ce:	2b23      	cmp	r3, #35	; 0x23
 80075d0:	d84a      	bhi.n	8007668 <CDC_Control_FS+0xac>
 80075d2:	a201      	add	r2, pc, #4	; (adr r2, 80075d8 <CDC_Control_FS+0x1c>)
 80075d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d8:	08007669 	.word	0x08007669
 80075dc:	08007669 	.word	0x08007669
 80075e0:	08007669 	.word	0x08007669
 80075e4:	08007669 	.word	0x08007669
 80075e8:	08007669 	.word	0x08007669
 80075ec:	08007669 	.word	0x08007669
 80075f0:	08007669 	.word	0x08007669
 80075f4:	08007669 	.word	0x08007669
 80075f8:	08007669 	.word	0x08007669
 80075fc:	08007669 	.word	0x08007669
 8007600:	08007669 	.word	0x08007669
 8007604:	08007669 	.word	0x08007669
 8007608:	08007669 	.word	0x08007669
 800760c:	08007669 	.word	0x08007669
 8007610:	08007669 	.word	0x08007669
 8007614:	08007669 	.word	0x08007669
 8007618:	08007669 	.word	0x08007669
 800761c:	08007669 	.word	0x08007669
 8007620:	08007669 	.word	0x08007669
 8007624:	08007669 	.word	0x08007669
 8007628:	08007669 	.word	0x08007669
 800762c:	08007669 	.word	0x08007669
 8007630:	08007669 	.word	0x08007669
 8007634:	08007669 	.word	0x08007669
 8007638:	08007669 	.word	0x08007669
 800763c:	08007669 	.word	0x08007669
 8007640:	08007669 	.word	0x08007669
 8007644:	08007669 	.word	0x08007669
 8007648:	08007669 	.word	0x08007669
 800764c:	08007669 	.word	0x08007669
 8007650:	08007669 	.word	0x08007669
 8007654:	08007669 	.word	0x08007669
 8007658:	08007669 	.word	0x08007669
 800765c:	08007669 	.word	0x08007669
 8007660:	08007669 	.word	0x08007669
 8007664:	08007669 	.word	0x08007669
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007668:	bf00      	nop
  }

  return (USBD_OK);
 800766a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800766c:	4618      	mov	r0, r3
 800766e:	370c      	adds	r7, #12
 8007670:	46bd      	mov	sp, r7
 8007672:	bc80      	pop	{r7}
 8007674:	4770      	bx	lr
 8007676:	bf00      	nop

08007678 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007682:	6879      	ldr	r1, [r7, #4]
 8007684:	4805      	ldr	r0, [pc, #20]	; (800769c <CDC_Receive_FS+0x24>)
 8007686:	f7fe fe54 	bl	8006332 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800768a:	4804      	ldr	r0, [pc, #16]	; (800769c <CDC_Receive_FS+0x24>)
 800768c:	f7fe fe93 	bl	80063b6 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007690:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007692:	4618      	mov	r0, r3
 8007694:	3708      	adds	r7, #8
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
 800769a:	bf00      	nop
 800769c:	20002c40 	.word	0x20002c40

080076a0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	460b      	mov	r3, r1
 80076aa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80076ac:	2300      	movs	r3, #0
 80076ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80076b0:	4b0d      	ldr	r3, [pc, #52]	; (80076e8 <CDC_Transmit_FS+0x48>)
 80076b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076b6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d001      	beq.n	80076c6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80076c2:	2301      	movs	r3, #1
 80076c4:	e00b      	b.n	80076de <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80076c6:	887b      	ldrh	r3, [r7, #2]
 80076c8:	461a      	mov	r2, r3
 80076ca:	6879      	ldr	r1, [r7, #4]
 80076cc:	4806      	ldr	r0, [pc, #24]	; (80076e8 <CDC_Transmit_FS+0x48>)
 80076ce:	f7fe fe17 	bl	8006300 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80076d2:	4805      	ldr	r0, [pc, #20]	; (80076e8 <CDC_Transmit_FS+0x48>)
 80076d4:	f7fe fe40 	bl	8006358 <USBD_CDC_TransmitPacket>
 80076d8:	4603      	mov	r3, r0
 80076da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80076dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3710      	adds	r7, #16
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop
 80076e8:	20002c40 	.word	0x20002c40

080076ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	4603      	mov	r3, r0
 80076f4:	6039      	str	r1, [r7, #0]
 80076f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	2212      	movs	r2, #18
 80076fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80076fe:	4b03      	ldr	r3, [pc, #12]	; (800770c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007700:	4618      	mov	r0, r3
 8007702:	370c      	adds	r7, #12
 8007704:	46bd      	mov	sp, r7
 8007706:	bc80      	pop	{r7}
 8007708:	4770      	bx	lr
 800770a:	bf00      	nop
 800770c:	20000148 	.word	0x20000148

08007710 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007710:	b480      	push	{r7}
 8007712:	b083      	sub	sp, #12
 8007714:	af00      	add	r7, sp, #0
 8007716:	4603      	mov	r3, r0
 8007718:	6039      	str	r1, [r7, #0]
 800771a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	2204      	movs	r2, #4
 8007720:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007722:	4b03      	ldr	r3, [pc, #12]	; (8007730 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007724:	4618      	mov	r0, r3
 8007726:	370c      	adds	r7, #12
 8007728:	46bd      	mov	sp, r7
 800772a:	bc80      	pop	{r7}
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop
 8007730:	2000015c 	.word	0x2000015c

08007734 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	af00      	add	r7, sp, #0
 800773a:	4603      	mov	r3, r0
 800773c:	6039      	str	r1, [r7, #0]
 800773e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007740:	79fb      	ldrb	r3, [r7, #7]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d105      	bne.n	8007752 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007746:	683a      	ldr	r2, [r7, #0]
 8007748:	4907      	ldr	r1, [pc, #28]	; (8007768 <USBD_FS_ProductStrDescriptor+0x34>)
 800774a:	4808      	ldr	r0, [pc, #32]	; (800776c <USBD_FS_ProductStrDescriptor+0x38>)
 800774c:	f7ff fe0d 	bl	800736a <USBD_GetString>
 8007750:	e004      	b.n	800775c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007752:	683a      	ldr	r2, [r7, #0]
 8007754:	4904      	ldr	r1, [pc, #16]	; (8007768 <USBD_FS_ProductStrDescriptor+0x34>)
 8007756:	4805      	ldr	r0, [pc, #20]	; (800776c <USBD_FS_ProductStrDescriptor+0x38>)
 8007758:	f7ff fe07 	bl	800736a <USBD_GetString>
  }
  return USBD_StrDesc;
 800775c:	4b02      	ldr	r3, [pc, #8]	; (8007768 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800775e:	4618      	mov	r0, r3
 8007760:	3708      	adds	r7, #8
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	200036d4 	.word	0x200036d4
 800776c:	08007efc 	.word	0x08007efc

08007770 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	4603      	mov	r3, r0
 8007778:	6039      	str	r1, [r7, #0]
 800777a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800777c:	683a      	ldr	r2, [r7, #0]
 800777e:	4904      	ldr	r1, [pc, #16]	; (8007790 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007780:	4804      	ldr	r0, [pc, #16]	; (8007794 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007782:	f7ff fdf2 	bl	800736a <USBD_GetString>
  return USBD_StrDesc;
 8007786:	4b02      	ldr	r3, [pc, #8]	; (8007790 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007788:	4618      	mov	r0, r3
 800778a:	3708      	adds	r7, #8
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	200036d4 	.word	0x200036d4
 8007794:	08007f14 	.word	0x08007f14

08007798 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
 800779e:	4603      	mov	r3, r0
 80077a0:	6039      	str	r1, [r7, #0]
 80077a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	221a      	movs	r2, #26
 80077a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80077aa:	f000 f843 	bl	8007834 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80077ae:	4b02      	ldr	r3, [pc, #8]	; (80077b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3708      	adds	r7, #8
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	20000160 	.word	0x20000160

080077bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	4603      	mov	r3, r0
 80077c4:	6039      	str	r1, [r7, #0]
 80077c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80077c8:	79fb      	ldrb	r3, [r7, #7]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d105      	bne.n	80077da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80077ce:	683a      	ldr	r2, [r7, #0]
 80077d0:	4907      	ldr	r1, [pc, #28]	; (80077f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80077d2:	4808      	ldr	r0, [pc, #32]	; (80077f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80077d4:	f7ff fdc9 	bl	800736a <USBD_GetString>
 80077d8:	e004      	b.n	80077e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80077da:	683a      	ldr	r2, [r7, #0]
 80077dc:	4904      	ldr	r1, [pc, #16]	; (80077f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80077de:	4805      	ldr	r0, [pc, #20]	; (80077f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80077e0:	f7ff fdc3 	bl	800736a <USBD_GetString>
  }
  return USBD_StrDesc;
 80077e4:	4b02      	ldr	r3, [pc, #8]	; (80077f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3708      	adds	r7, #8
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	200036d4 	.word	0x200036d4
 80077f4:	08007f28 	.word	0x08007f28

080077f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	4603      	mov	r3, r0
 8007800:	6039      	str	r1, [r7, #0]
 8007802:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007804:	79fb      	ldrb	r3, [r7, #7]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d105      	bne.n	8007816 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800780a:	683a      	ldr	r2, [r7, #0]
 800780c:	4907      	ldr	r1, [pc, #28]	; (800782c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800780e:	4808      	ldr	r0, [pc, #32]	; (8007830 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007810:	f7ff fdab 	bl	800736a <USBD_GetString>
 8007814:	e004      	b.n	8007820 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007816:	683a      	ldr	r2, [r7, #0]
 8007818:	4904      	ldr	r1, [pc, #16]	; (800782c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800781a:	4805      	ldr	r0, [pc, #20]	; (8007830 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800781c:	f7ff fda5 	bl	800736a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007820:	4b02      	ldr	r3, [pc, #8]	; (800782c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007822:	4618      	mov	r0, r3
 8007824:	3708      	adds	r7, #8
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	200036d4 	.word	0x200036d4
 8007830:	08007f34 	.word	0x08007f34

08007834 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800783a:	4b0f      	ldr	r3, [pc, #60]	; (8007878 <Get_SerialNum+0x44>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007840:	4b0e      	ldr	r3, [pc, #56]	; (800787c <Get_SerialNum+0x48>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007846:	4b0e      	ldr	r3, [pc, #56]	; (8007880 <Get_SerialNum+0x4c>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800784c:	68fa      	ldr	r2, [r7, #12]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4413      	add	r3, r2
 8007852:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d009      	beq.n	800786e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800785a:	2208      	movs	r2, #8
 800785c:	4909      	ldr	r1, [pc, #36]	; (8007884 <Get_SerialNum+0x50>)
 800785e:	68f8      	ldr	r0, [r7, #12]
 8007860:	f000 f814 	bl	800788c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007864:	2204      	movs	r2, #4
 8007866:	4908      	ldr	r1, [pc, #32]	; (8007888 <Get_SerialNum+0x54>)
 8007868:	68b8      	ldr	r0, [r7, #8]
 800786a:	f000 f80f 	bl	800788c <IntToUnicode>
  }
}
 800786e:	bf00      	nop
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	1ffff7e8 	.word	0x1ffff7e8
 800787c:	1ffff7ec 	.word	0x1ffff7ec
 8007880:	1ffff7f0 	.word	0x1ffff7f0
 8007884:	20000162 	.word	0x20000162
 8007888:	20000172 	.word	0x20000172

0800788c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800788c:	b480      	push	{r7}
 800788e:	b087      	sub	sp, #28
 8007890:	af00      	add	r7, sp, #0
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	60b9      	str	r1, [r7, #8]
 8007896:	4613      	mov	r3, r2
 8007898:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800789a:	2300      	movs	r3, #0
 800789c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800789e:	2300      	movs	r3, #0
 80078a0:	75fb      	strb	r3, [r7, #23]
 80078a2:	e027      	b.n	80078f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	0f1b      	lsrs	r3, r3, #28
 80078a8:	2b09      	cmp	r3, #9
 80078aa:	d80b      	bhi.n	80078c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	0f1b      	lsrs	r3, r3, #28
 80078b0:	b2da      	uxtb	r2, r3
 80078b2:	7dfb      	ldrb	r3, [r7, #23]
 80078b4:	005b      	lsls	r3, r3, #1
 80078b6:	4619      	mov	r1, r3
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	440b      	add	r3, r1
 80078bc:	3230      	adds	r2, #48	; 0x30
 80078be:	b2d2      	uxtb	r2, r2
 80078c0:	701a      	strb	r2, [r3, #0]
 80078c2:	e00a      	b.n	80078da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	0f1b      	lsrs	r3, r3, #28
 80078c8:	b2da      	uxtb	r2, r3
 80078ca:	7dfb      	ldrb	r3, [r7, #23]
 80078cc:	005b      	lsls	r3, r3, #1
 80078ce:	4619      	mov	r1, r3
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	440b      	add	r3, r1
 80078d4:	3237      	adds	r2, #55	; 0x37
 80078d6:	b2d2      	uxtb	r2, r2
 80078d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	011b      	lsls	r3, r3, #4
 80078de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80078e0:	7dfb      	ldrb	r3, [r7, #23]
 80078e2:	005b      	lsls	r3, r3, #1
 80078e4:	3301      	adds	r3, #1
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	4413      	add	r3, r2
 80078ea:	2200      	movs	r2, #0
 80078ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80078ee:	7dfb      	ldrb	r3, [r7, #23]
 80078f0:	3301      	adds	r3, #1
 80078f2:	75fb      	strb	r3, [r7, #23]
 80078f4:	7dfa      	ldrb	r2, [r7, #23]
 80078f6:	79fb      	ldrb	r3, [r7, #7]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d3d3      	bcc.n	80078a4 <IntToUnicode+0x18>
  }
}
 80078fc:	bf00      	nop
 80078fe:	371c      	adds	r7, #28
 8007900:	46bd      	mov	sp, r7
 8007902:	bc80      	pop	{r7}
 8007904:	4770      	bx	lr
	...

08007908 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a0d      	ldr	r2, [pc, #52]	; (800794c <HAL_PCD_MspInit+0x44>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d113      	bne.n	8007942 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800791a:	4b0d      	ldr	r3, [pc, #52]	; (8007950 <HAL_PCD_MspInit+0x48>)
 800791c:	69db      	ldr	r3, [r3, #28]
 800791e:	4a0c      	ldr	r2, [pc, #48]	; (8007950 <HAL_PCD_MspInit+0x48>)
 8007920:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007924:	61d3      	str	r3, [r2, #28]
 8007926:	4b0a      	ldr	r3, [pc, #40]	; (8007950 <HAL_PCD_MspInit+0x48>)
 8007928:	69db      	ldr	r3, [r3, #28]
 800792a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800792e:	60fb      	str	r3, [r7, #12]
 8007930:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007932:	2200      	movs	r2, #0
 8007934:	2100      	movs	r1, #0
 8007936:	2014      	movs	r0, #20
 8007938:	f7f9 fa19 	bl	8000d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800793c:	2014      	movs	r0, #20
 800793e:	f7f9 fa32 	bl	8000da6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007942:	bf00      	nop
 8007944:	3710      	adds	r7, #16
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	40005c00 	.word	0x40005c00
 8007950:	40021000 	.word	0x40021000

08007954 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007968:	4619      	mov	r1, r3
 800796a:	4610      	mov	r0, r2
 800796c:	f7fe fdd9 	bl	8006522 <USBD_LL_SetupStage>
}
 8007970:	bf00      	nop
 8007972:	3708      	adds	r7, #8
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	460b      	mov	r3, r1
 8007982:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800798a:	78fa      	ldrb	r2, [r7, #3]
 800798c:	6879      	ldr	r1, [r7, #4]
 800798e:	4613      	mov	r3, r2
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	4413      	add	r3, r2
 8007994:	00db      	lsls	r3, r3, #3
 8007996:	440b      	add	r3, r1
 8007998:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	78fb      	ldrb	r3, [r7, #3]
 80079a0:	4619      	mov	r1, r3
 80079a2:	f7fe fe09 	bl	80065b8 <USBD_LL_DataOutStage>
}
 80079a6:	bf00      	nop
 80079a8:	3708      	adds	r7, #8
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b082      	sub	sp, #8
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
 80079b6:	460b      	mov	r3, r1
 80079b8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80079c0:	78fa      	ldrb	r2, [r7, #3]
 80079c2:	6879      	ldr	r1, [r7, #4]
 80079c4:	4613      	mov	r3, r2
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	4413      	add	r3, r2
 80079ca:	00db      	lsls	r3, r3, #3
 80079cc:	440b      	add	r3, r1
 80079ce:	333c      	adds	r3, #60	; 0x3c
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	78fb      	ldrb	r3, [r7, #3]
 80079d4:	4619      	mov	r1, r3
 80079d6:	f7fe fe60 	bl	800669a <USBD_LL_DataInStage>
}
 80079da:	bf00      	nop
 80079dc:	3708      	adds	r7, #8
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b082      	sub	sp, #8
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80079f0:	4618      	mov	r0, r3
 80079f2:	f7fe ff70 	bl	80068d6 <USBD_LL_SOF>
}
 80079f6:	bf00      	nop
 80079f8:	3708      	adds	r7, #8
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}

080079fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b084      	sub	sp, #16
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007a06:	2301      	movs	r3, #1
 8007a08:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	d001      	beq.n	8007a16 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007a12:	f7f8 fe35 	bl	8000680 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007a1c:	7bfa      	ldrb	r2, [r7, #15]
 8007a1e:	4611      	mov	r1, r2
 8007a20:	4618      	mov	r0, r3
 8007a22:	f7fe ff20 	bl	8006866 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f7fe fed9 	bl	80067e4 <USBD_LL_Reset>
}
 8007a32:	bf00      	nop
 8007a34:	3710      	adds	r7, #16
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
	...

08007a3c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b082      	sub	sp, #8
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f7fe ff1a 	bl	8006884 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	699b      	ldr	r3, [r3, #24]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d005      	beq.n	8007a64 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007a58:	4b04      	ldr	r3, [pc, #16]	; (8007a6c <HAL_PCD_SuspendCallback+0x30>)
 8007a5a:	691b      	ldr	r3, [r3, #16]
 8007a5c:	4a03      	ldr	r2, [pc, #12]	; (8007a6c <HAL_PCD_SuspendCallback+0x30>)
 8007a5e:	f043 0306 	orr.w	r3, r3, #6
 8007a62:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007a64:	bf00      	nop
 8007a66:	3708      	adds	r7, #8
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	e000ed00 	.word	0xe000ed00

08007a70 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7fe ff14 	bl	80068ac <USBD_LL_Resume>
}
 8007a84:	bf00      	nop
 8007a86:	3708      	adds	r7, #8
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007a94:	4a28      	ldr	r2, [pc, #160]	; (8007b38 <USBD_LL_Init+0xac>)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	4a26      	ldr	r2, [pc, #152]	; (8007b38 <USBD_LL_Init+0xac>)
 8007aa0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007aa4:	4b24      	ldr	r3, [pc, #144]	; (8007b38 <USBD_LL_Init+0xac>)
 8007aa6:	4a25      	ldr	r2, [pc, #148]	; (8007b3c <USBD_LL_Init+0xb0>)
 8007aa8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007aaa:	4b23      	ldr	r3, [pc, #140]	; (8007b38 <USBD_LL_Init+0xac>)
 8007aac:	2208      	movs	r2, #8
 8007aae:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007ab0:	4b21      	ldr	r3, [pc, #132]	; (8007b38 <USBD_LL_Init+0xac>)
 8007ab2:	2202      	movs	r2, #2
 8007ab4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007ab6:	4b20      	ldr	r3, [pc, #128]	; (8007b38 <USBD_LL_Init+0xac>)
 8007ab8:	2200      	movs	r2, #0
 8007aba:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007abc:	4b1e      	ldr	r3, [pc, #120]	; (8007b38 <USBD_LL_Init+0xac>)
 8007abe:	2200      	movs	r2, #0
 8007ac0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007ac2:	4b1d      	ldr	r3, [pc, #116]	; (8007b38 <USBD_LL_Init+0xac>)
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007ac8:	481b      	ldr	r0, [pc, #108]	; (8007b38 <USBD_LL_Init+0xac>)
 8007aca:	f7f9 fb29 	bl	8001120 <HAL_PCD_Init>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d001      	beq.n	8007ad8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007ad4:	f7f8 fdd4 	bl	8000680 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007ade:	2318      	movs	r3, #24
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	2100      	movs	r1, #0
 8007ae4:	f7fa fe5d 	bl	80027a2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007aee:	2358      	movs	r3, #88	; 0x58
 8007af0:	2200      	movs	r2, #0
 8007af2:	2180      	movs	r1, #128	; 0x80
 8007af4:	f7fa fe55 	bl	80027a2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007afe:	23c0      	movs	r3, #192	; 0xc0
 8007b00:	2200      	movs	r2, #0
 8007b02:	2181      	movs	r1, #129	; 0x81
 8007b04:	f7fa fe4d 	bl	80027a2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007b0e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007b12:	2200      	movs	r2, #0
 8007b14:	2101      	movs	r1, #1
 8007b16:	f7fa fe44 	bl	80027a2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007b20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b24:	2200      	movs	r2, #0
 8007b26:	2182      	movs	r1, #130	; 0x82
 8007b28:	f7fa fe3b 	bl	80027a2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3708      	adds	r7, #8
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	200038d4 	.word	0x200038d4
 8007b3c:	40005c00 	.word	0x40005c00

08007b40 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7f9 fbed 	bl	8001336 <HAL_PCD_Start>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b60:	7bfb      	ldrb	r3, [r7, #15]
 8007b62:	4618      	mov	r0, r3
 8007b64:	f000 f94e 	bl	8007e04 <USBD_Get_USB_Status>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3710      	adds	r7, #16
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}

08007b76 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007b76:	b580      	push	{r7, lr}
 8007b78:	b084      	sub	sp, #16
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
 8007b7e:	4608      	mov	r0, r1
 8007b80:	4611      	mov	r1, r2
 8007b82:	461a      	mov	r2, r3
 8007b84:	4603      	mov	r3, r0
 8007b86:	70fb      	strb	r3, [r7, #3]
 8007b88:	460b      	mov	r3, r1
 8007b8a:	70bb      	strb	r3, [r7, #2]
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b90:	2300      	movs	r3, #0
 8007b92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b94:	2300      	movs	r3, #0
 8007b96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007b9e:	78bb      	ldrb	r3, [r7, #2]
 8007ba0:	883a      	ldrh	r2, [r7, #0]
 8007ba2:	78f9      	ldrb	r1, [r7, #3]
 8007ba4:	f7f9 fd67 	bl	8001676 <HAL_PCD_EP_Open>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bac:	7bfb      	ldrb	r3, [r7, #15]
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f000 f928 	bl	8007e04 <USBD_Get_USB_Status>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bb8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3710      	adds	r7, #16
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}

08007bc2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b084      	sub	sp, #16
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
 8007bca:	460b      	mov	r3, r1
 8007bcc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007bdc:	78fa      	ldrb	r2, [r7, #3]
 8007bde:	4611      	mov	r1, r2
 8007be0:	4618      	mov	r0, r3
 8007be2:	f7f9 fdae 	bl	8001742 <HAL_PCD_EP_Close>
 8007be6:	4603      	mov	r3, r0
 8007be8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bea:	7bfb      	ldrb	r3, [r7, #15]
 8007bec:	4618      	mov	r0, r3
 8007bee:	f000 f909 	bl	8007e04 <USBD_Get_USB_Status>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bf6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	460b      	mov	r3, r1
 8007c0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c10:	2300      	movs	r3, #0
 8007c12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c1a:	78fa      	ldrb	r2, [r7, #3]
 8007c1c:	4611      	mov	r1, r2
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7f9 fe6e 	bl	8001900 <HAL_PCD_EP_SetStall>
 8007c24:	4603      	mov	r3, r0
 8007c26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c28:	7bfb      	ldrb	r3, [r7, #15]
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f000 f8ea 	bl	8007e04 <USBD_Get_USB_Status>
 8007c30:	4603      	mov	r3, r0
 8007c32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c34:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3710      	adds	r7, #16
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c3e:	b580      	push	{r7, lr}
 8007c40:	b084      	sub	sp, #16
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
 8007c46:	460b      	mov	r3, r1
 8007c48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c58:	78fa      	ldrb	r2, [r7, #3]
 8007c5a:	4611      	mov	r1, r2
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7f9 feaf 	bl	80019c0 <HAL_PCD_EP_ClrStall>
 8007c62:	4603      	mov	r3, r0
 8007c64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c66:	7bfb      	ldrb	r3, [r7, #15]
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f000 f8cb 	bl	8007e04 <USBD_Get_USB_Status>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c72:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3710      	adds	r7, #16
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b085      	sub	sp, #20
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	460b      	mov	r3, r1
 8007c86:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c8e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007c90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	da0c      	bge.n	8007cb2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007c98:	78fb      	ldrb	r3, [r7, #3]
 8007c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c9e:	68f9      	ldr	r1, [r7, #12]
 8007ca0:	1c5a      	adds	r2, r3, #1
 8007ca2:	4613      	mov	r3, r2
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	4413      	add	r3, r2
 8007ca8:	00db      	lsls	r3, r3, #3
 8007caa:	440b      	add	r3, r1
 8007cac:	3302      	adds	r3, #2
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	e00b      	b.n	8007cca <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007cb2:	78fb      	ldrb	r3, [r7, #3]
 8007cb4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007cb8:	68f9      	ldr	r1, [r7, #12]
 8007cba:	4613      	mov	r3, r2
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	4413      	add	r3, r2
 8007cc0:	00db      	lsls	r3, r3, #3
 8007cc2:	440b      	add	r3, r1
 8007cc4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007cc8:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3714      	adds	r7, #20
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bc80      	pop	{r7}
 8007cd2:	4770      	bx	lr

08007cd4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	460b      	mov	r3, r1
 8007cde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cee:	78fa      	ldrb	r2, [r7, #3]
 8007cf0:	4611      	mov	r1, r2
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7f9 fc9a 	bl	800162c <HAL_PCD_SetAddress>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cfc:	7bfb      	ldrb	r3, [r7, #15]
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f000 f880 	bl	8007e04 <USBD_Get_USB_Status>
 8007d04:	4603      	mov	r3, r0
 8007d06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d08:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}

08007d12 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007d12:	b580      	push	{r7, lr}
 8007d14:	b086      	sub	sp, #24
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	60f8      	str	r0, [r7, #12]
 8007d1a:	607a      	str	r2, [r7, #4]
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	460b      	mov	r3, r1
 8007d20:	72fb      	strb	r3, [r7, #11]
 8007d22:	4613      	mov	r3, r2
 8007d24:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d26:	2300      	movs	r3, #0
 8007d28:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007d34:	893b      	ldrh	r3, [r7, #8]
 8007d36:	7af9      	ldrb	r1, [r7, #11]
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	f7f9 fd9e 	bl	800187a <HAL_PCD_EP_Transmit>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d42:	7dfb      	ldrb	r3, [r7, #23]
 8007d44:	4618      	mov	r0, r3
 8007d46:	f000 f85d 	bl	8007e04 <USBD_Get_USB_Status>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007d4e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3718      	adds	r7, #24
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b086      	sub	sp, #24
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	607a      	str	r2, [r7, #4]
 8007d62:	461a      	mov	r2, r3
 8007d64:	460b      	mov	r3, r1
 8007d66:	72fb      	strb	r3, [r7, #11]
 8007d68:	4613      	mov	r3, r2
 8007d6a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d70:	2300      	movs	r3, #0
 8007d72:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007d7a:	893b      	ldrh	r3, [r7, #8]
 8007d7c:	7af9      	ldrb	r1, [r7, #11]
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	f7f9 fd27 	bl	80017d2 <HAL_PCD_EP_Receive>
 8007d84:	4603      	mov	r3, r0
 8007d86:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d88:	7dfb      	ldrb	r3, [r7, #23]
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f000 f83a 	bl	8007e04 <USBD_Get_USB_Status>
 8007d90:	4603      	mov	r3, r0
 8007d92:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007d94:	7dbb      	ldrb	r3, [r7, #22]
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3718      	adds	r7, #24
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b082      	sub	sp, #8
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
 8007da6:	460b      	mov	r3, r1
 8007da8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007db0:	78fa      	ldrb	r2, [r7, #3]
 8007db2:	4611      	mov	r1, r2
 8007db4:	4618      	mov	r0, r3
 8007db6:	f7f9 fd49 	bl	800184c <HAL_PCD_EP_GetRxCount>
 8007dba:	4603      	mov	r3, r0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3708      	adds	r7, #8
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007dcc:	4b02      	ldr	r3, [pc, #8]	; (8007dd8 <USBD_static_malloc+0x14>)
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	370c      	adds	r7, #12
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bc80      	pop	{r7}
 8007dd6:	4770      	bx	lr
 8007dd8:	2000019c 	.word	0x2000019c

08007ddc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]

}
 8007de4:	bf00      	nop
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bc80      	pop	{r7}
 8007dec:	4770      	bx	lr

08007dee <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dee:	b480      	push	{r7}
 8007df0:	b083      	sub	sp, #12
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
 8007df6:	460b      	mov	r3, r1
 8007df8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007dfa:	bf00      	nop
 8007dfc:	370c      	adds	r7, #12
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bc80      	pop	{r7}
 8007e02:	4770      	bx	lr

08007e04 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b085      	sub	sp, #20
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007e12:	79fb      	ldrb	r3, [r7, #7]
 8007e14:	2b03      	cmp	r3, #3
 8007e16:	d817      	bhi.n	8007e48 <USBD_Get_USB_Status+0x44>
 8007e18:	a201      	add	r2, pc, #4	; (adr r2, 8007e20 <USBD_Get_USB_Status+0x1c>)
 8007e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e1e:	bf00      	nop
 8007e20:	08007e31 	.word	0x08007e31
 8007e24:	08007e37 	.word	0x08007e37
 8007e28:	08007e3d 	.word	0x08007e3d
 8007e2c:	08007e43 	.word	0x08007e43
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007e30:	2300      	movs	r3, #0
 8007e32:	73fb      	strb	r3, [r7, #15]
    break;
 8007e34:	e00b      	b.n	8007e4e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007e36:	2302      	movs	r3, #2
 8007e38:	73fb      	strb	r3, [r7, #15]
    break;
 8007e3a:	e008      	b.n	8007e4e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	73fb      	strb	r3, [r7, #15]
    break;
 8007e40:	e005      	b.n	8007e4e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007e42:	2302      	movs	r3, #2
 8007e44:	73fb      	strb	r3, [r7, #15]
    break;
 8007e46:	e002      	b.n	8007e4e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007e48:	2302      	movs	r3, #2
 8007e4a:	73fb      	strb	r3, [r7, #15]
    break;
 8007e4c:	bf00      	nop
  }
  return usb_status;
 8007e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3714      	adds	r7, #20
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bc80      	pop	{r7}
 8007e58:	4770      	bx	lr
 8007e5a:	bf00      	nop

08007e5c <__libc_init_array>:
 8007e5c:	b570      	push	{r4, r5, r6, lr}
 8007e5e:	2500      	movs	r5, #0
 8007e60:	4e0c      	ldr	r6, [pc, #48]	; (8007e94 <__libc_init_array+0x38>)
 8007e62:	4c0d      	ldr	r4, [pc, #52]	; (8007e98 <__libc_init_array+0x3c>)
 8007e64:	1ba4      	subs	r4, r4, r6
 8007e66:	10a4      	asrs	r4, r4, #2
 8007e68:	42a5      	cmp	r5, r4
 8007e6a:	d109      	bne.n	8007e80 <__libc_init_array+0x24>
 8007e6c:	f000 f82e 	bl	8007ecc <_init>
 8007e70:	2500      	movs	r5, #0
 8007e72:	4e0a      	ldr	r6, [pc, #40]	; (8007e9c <__libc_init_array+0x40>)
 8007e74:	4c0a      	ldr	r4, [pc, #40]	; (8007ea0 <__libc_init_array+0x44>)
 8007e76:	1ba4      	subs	r4, r4, r6
 8007e78:	10a4      	asrs	r4, r4, #2
 8007e7a:	42a5      	cmp	r5, r4
 8007e7c:	d105      	bne.n	8007e8a <__libc_init_array+0x2e>
 8007e7e:	bd70      	pop	{r4, r5, r6, pc}
 8007e80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007e84:	4798      	blx	r3
 8007e86:	3501      	adds	r5, #1
 8007e88:	e7ee      	b.n	8007e68 <__libc_init_array+0xc>
 8007e8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007e8e:	4798      	blx	r3
 8007e90:	3501      	adds	r5, #1
 8007e92:	e7f2      	b.n	8007e7a <__libc_init_array+0x1e>
 8007e94:	08007f94 	.word	0x08007f94
 8007e98:	08007f94 	.word	0x08007f94
 8007e9c:	08007f94 	.word	0x08007f94
 8007ea0:	08007f98 	.word	0x08007f98

08007ea4 <memcpy>:
 8007ea4:	b510      	push	{r4, lr}
 8007ea6:	1e43      	subs	r3, r0, #1
 8007ea8:	440a      	add	r2, r1
 8007eaa:	4291      	cmp	r1, r2
 8007eac:	d100      	bne.n	8007eb0 <memcpy+0xc>
 8007eae:	bd10      	pop	{r4, pc}
 8007eb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007eb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007eb8:	e7f7      	b.n	8007eaa <memcpy+0x6>

08007eba <memset>:
 8007eba:	4603      	mov	r3, r0
 8007ebc:	4402      	add	r2, r0
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d100      	bne.n	8007ec4 <memset+0xa>
 8007ec2:	4770      	bx	lr
 8007ec4:	f803 1b01 	strb.w	r1, [r3], #1
 8007ec8:	e7f9      	b.n	8007ebe <memset+0x4>
	...

08007ecc <_init>:
 8007ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ece:	bf00      	nop
 8007ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ed2:	bc08      	pop	{r3}
 8007ed4:	469e      	mov	lr, r3
 8007ed6:	4770      	bx	lr

08007ed8 <_fini>:
 8007ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eda:	bf00      	nop
 8007edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ede:	bc08      	pop	{r3}
 8007ee0:	469e      	mov	lr, r3
 8007ee2:	4770      	bx	lr
